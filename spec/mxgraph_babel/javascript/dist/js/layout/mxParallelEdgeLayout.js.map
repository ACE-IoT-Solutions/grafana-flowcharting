{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/layout/mxParallelEdgeLayout.js"],"names":["mxParallelEdgeLayout","graph","mxGraphLayout","call","prototype","constructor","spacing","execute","parent","lookup","findParallels","model","beginUpdate","i","parallels","length","layout","endUpdate","getModel","childCount","getChildCount","child","getChildAt","isEdgeIgnored","id","getEdgeId","push","edge","view","getView","src","getVisibleTerminal","trg","mxObjectIdentity","get","getGeometry","x0","x","width","y0","y","height","route","scx","scy","tcx","tcy","dx","dy","len","Math","sqrt","nx","ny","isCellMovable","setEdgePoints","mxPoint","__mxOutput","undefined"],"mappings":"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","file":"mxParallelEdgeLayout.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxParallelEdgeLayout\n * \n * Extends <mxGraphLayout> for arranging parallel edges. This layout works\n * on edges for all pairs of vertices where there is more than one edge\n * connecting the latter.\n * \n * Example:\n * \n * (code)\n * var layout = new mxParallelEdgeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * To run the layout for the parallel edges of a changed edge only, the\n * following code can be used.\n * \n * (code)\n * var layout = new mxParallelEdgeLayout(graph);\n * \n * graph.addListener(mxEvent.CELL_CONNECTED, function(sender, evt)\n * {\n *   var model = graph.getModel();\n *   var edge = evt.getProperty('edge');\n *   var src = model.getTerminal(edge, true);\n *   var trg = model.getTerminal(edge, false);\n *   \n *   layout.isEdgeIgnored = function(edge2)\n *   {\n *     var src2 = model.getTerminal(edge2, true);\n *     var trg2 = model.getTerminal(edge2, false);\n *     \n *     return !(model.isEdge(edge2) && ((src == src2 && trg == trg2) || (src == trg2 && trg == src2)));\n *   };\n *   \n *   layout.execute(graph.getDefaultParent());\n * });\n * (end)\n * \n * Constructor: mxCompactTreeLayout\n * \n * Constructs a new fast organic layout for the specified graph.\n */\nfunction mxParallelEdgeLayout(graph)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxParallelEdgeLayout.prototype = new mxGraphLayout();\nmxParallelEdgeLayout.prototype.constructor = mxParallelEdgeLayout;\n\n/**\n * Variable: spacing\n * \n * Defines the spacing between the parallels. Default is 20.\n */\nmxParallelEdgeLayout.prototype.spacing = 20;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxParallelEdgeLayout.prototype.execute = function(parent)\n{\n\tvar lookup = this.findParallels(parent);\n\t\n\tthis.graph.model.beginUpdate();\t\n\ttry\n\t{\n\t\tfor (var i in lookup)\n\t\t{\n\t\t\tvar parallels = lookup[i];\n\n\t\t\tif (parallels.length > 1)\n\t\t\t{\n\t\t\t\tthis.layout(parallels);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.graph.model.endUpdate();\n\t}\n};\n\n/**\n * Function: findParallels\n * \n * Finds the parallel edges in the given parent.\n */\nmxParallelEdgeLayout.prototype.findParallels = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tvar lookup = [];\n\tvar childCount = model.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (!this.isEdgeIgnored(child))\n\t\t{\n\t\t\tvar id = this.getEdgeId(child);\n\t\t\t\n\t\t\tif (id != null)\n\t\t\t{\n\t\t\t\tif (lookup[id] == null)\n\t\t\t\t{\n\t\t\t\t\tlookup[id] = [];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlookup[id].push(child);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn lookup;\n};\n\n/**\n * Function: getEdgeId\n * \n * Returns a unique ID for the given edge. The id is independent of the\n * edge direction and is built using the visible terminal of the given\n * edge.\n */\nmxParallelEdgeLayout.prototype.getEdgeId = function(edge)\n{\n\tvar view = this.graph.getView();\n\t\n\t// Cannot used cached visible terminal because this could be triggered in BEFORE_UNDO\n\tvar src = view.getVisibleTerminal(edge, true);\n\tvar trg = view.getVisibleTerminal(edge, false);\n\n\tif (src != null && trg != null)\n\t{\n\t\tsrc = mxObjectIdentity.get(src);\n\t\ttrg = mxObjectIdentity.get(trg);\n\t\t\n\t\treturn (src > trg) ? trg + '-' + src : src + '-' + trg;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: layout\n * \n * Lays out the parallel edges in the given array.\n */\nmxParallelEdgeLayout.prototype.layout = function(parallels)\n{\n\tvar edge = parallels[0];\n\tvar view = this.graph.getView();\n\tvar model = this.graph.getModel();\n\tvar src = model.getGeometry(view.getVisibleTerminal(edge, true));\n\tvar trg = model.getGeometry(view.getVisibleTerminal(edge, false));\n\t\n\t// Routes multiple loops\n\tif (src == trg)\n\t{\n\t\tvar x0 = src.x + src.width + this.spacing;\n\t\tvar y0 = src.y + src.height / 2;\n\n\t\tfor (var i = 0; i < parallels.length; i++)\n\t\t{\n\t\t\tthis.route(parallels[i], x0, y0);\n\t\t\tx0 += this.spacing;\n\t\t}\n\t}\n\telse if (src != null && trg != null)\n\t{\n\t\t// Routes parallel edges\n\t\tvar scx = src.x + src.width / 2;\n\t\tvar scy = src.y + src.height / 2;\n\t\t\n\t\tvar tcx = trg.x + trg.width / 2;\n\t\tvar tcy = trg.y + trg.height / 2;\n\t\t\n\t\tvar dx = tcx - scx;\n\t\tvar dy = tcy - scy;\n\n\t\tvar len = Math.sqrt(dx * dx + dy * dy);\n\t\t\n\t\tif (len > 0)\n\t\t{\n\t\t\tvar x0 = scx + dx / 2;\n\t\t\tvar y0 = scy + dy / 2;\n\t\t\t\n\t\t\tvar nx = dy * this.spacing / len;\n\t\t\tvar ny = dx * this.spacing / len;\n\t\t\t\n\t\t\tx0 += nx * (parallels.length - 1) / 2;\n\t\t\ty0 -= ny * (parallels.length - 1) / 2;\n\t\n\t\t\tfor (var i = 0; i < parallels.length; i++)\n\t\t\t{\n\t\t\t\tthis.route(parallels[i], x0, y0);\n\t\t\t\tx0 -= nx;\n\t\t\t\ty0 += ny;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: route\n * \n * Routes the given edge via the given point.\n */\nmxParallelEdgeLayout.prototype.route = function(edge, x, y)\n{\n\tif (this.graph.isCellMovable(edge))\n\t{\n\t\tthis.setEdgePoints(edge, [new mxPoint(x, y)]);\n\t}\n};\n\n__mxOutput.mxParallelEdgeLayout = typeof mxParallelEdgeLayout !== 'undefined' ? mxParallelEdgeLayout : undefined;\n"]}