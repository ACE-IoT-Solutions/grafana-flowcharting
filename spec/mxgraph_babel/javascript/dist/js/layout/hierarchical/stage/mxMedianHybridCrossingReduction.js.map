{"version":3,"sources":["../../../../../../../../src/mxgraph/javascript/dist/js/layout/hierarchical/stage/mxMedianHybridCrossingReduction.js"],"names":["mxMedianHybridCrossingReduction","layout","MedianCellSorter","prototype","mxHierarchicalLayoutStage","constructor","maxIterations","nestedBestRanks","currentBestCrossings","iterationsWithoutImprovement","maxNoImprovementIterations","execute","parent","model","getModel","i","ranks","length","slice","calculateCrossings","weightedMedian","transpose","candidateCrossings","j","rank","k","cell","getGeneralPurposeVariable","setGeneralPurposeVariable","rankList","maxRank","push","numRanks","totalCrossings","calculateRankCrossing","previousRank","tmpIndices","node","rankPosition","connectedCells","getPreviousLayerConnectedCells","nodeIndices","connectedNode","otherCellRankPosition","sort","x","y","indices","concat","firstIndex","treeSize","tree","index","treeIndex","mainLoopIteration","improved","count","maxCount","nudge","orderedCells","tempRank","leftCellAboveConnections","leftCellBelowConnections","rightCellAboveConnections","rightCellBelowConnections","leftAbovePositions","leftBelowPositions","rightAbovePositions","rightBelowPositions","leftCell","rightCell","getNextLayerConnectedCells","totalCurrentCrossings","totalSwitchedCrossings","ik","temp","iteration","downwardSweep","medianRank","rankValue","numCellsForRank","medianValues","reservedPositions","sorterEntry","nextLevelConnectedCells","nextRankValue","medianValue","compare","shift","arrayCount","a","b","Math","floor","medianPoint","leftMedian","rightMedian","__mxOutput","undefined"],"mappings":";;;;;AAAA;;;;AAIA;;;;;;;;;;;;;;;;;;AAkBA,UAASA,+BAAT,CAAyCC,MAAzC,EACA;AACC,OAAKA,MAAL,GAAcA,MAAd;AACA;;AAklBD;;;;;;;;;;AAUA,UAASC,gBAAT,GACA;AACC;AACA,E;;;AA/lBA;;AAED;;;AAGAF,mCAAgCG,SAAhC,GAA4C,IAAIC,yBAAJ,EAA5C;AACAJ,mCAAgCG,SAAhC,CAA0CE,WAA1C,GAAwDL,+BAAxD;;AAEA;;;;;AAKAA,mCAAgCG,SAAhC,CAA0CF,MAA1C,GAAmD,IAAnD;;AAEA;;;;;;AAMAD,mCAAgCG,SAAhC,CAA0CG,aAA1C,GAA0D,EAA1D;;AAEA;;;;;;AAMAN,mCAAgCG,SAAhC,CAA0CI,eAA1C,GAA4D,IAA5D;;AAEA;;;;;AAKAP,mCAAgCG,SAAhC,CAA0CK,oBAA1C,GAAiE,CAAjE;;AAEA;;;;;AAKAR,mCAAgCG,SAAhC,CAA0CM,4BAA1C,GAAyE,CAAzE;;AAEA;;;;;AAKAT,mCAAgCG,SAAhC,CAA0CO,0BAA1C,GAAuE,CAAvE;;AAEA;;;;;;AAMAV,mCAAgCG,SAAhC,CAA0CQ,OAA1C,GAAoD,UAASC,MAAT,EACpD;AACC,QAAIC,QAAQ,KAAKZ,MAAL,CAAYa,QAAZ,EAAZ;;AAEA;AACA,SAAKP,eAAL,GAAuB,EAAvB;;AAEA,SAAK,IAAIQ,IAAI,CAAb,EAAgBA,IAAIF,MAAMG,KAAN,CAAYC,MAAhC,EAAwCF,GAAxC,EACA;AACC,UAAKR,eAAL,CAAqBQ,CAArB,IAA0BF,MAAMG,KAAN,CAAYD,CAAZ,EAAeG,KAAf,EAA1B;AACA;;AAED,QAAIT,+BAA+B,CAAnC;AACA,QAAID,uBAAuB,KAAKW,kBAAL,CAAwBN,KAAxB,CAA3B;;AAEA,SAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAI,KAAKT,aAAT,IACfG,+BAA+B,KAAKC,0BADrC,EACiEK,GADjE,EAEA;AACC,UAAKK,cAAL,CAAoBL,CAApB,EAAuBF,KAAvB;AACA,UAAKQ,SAAL,CAAeN,CAAf,EAAkBF,KAAlB;AACA,SAAIS,qBAAqB,KAAKH,kBAAL,CAAwBN,KAAxB,CAAzB;;AAEA,SAAIS,qBAAqBd,oBAAzB,EACA;AACCA,6BAAuBc,kBAAvB;AACAb,qCAA+B,CAA/B;;AAEA;AACA,WAAK,IAAIc,IAAI,CAAb,EAAgBA,IAAI,KAAKhB,eAAL,CAAqBU,MAAzC,EAAiDM,GAAjD,EACA;AACC,WAAIC,OAAOX,MAAMG,KAAN,CAAYO,CAAZ,CAAX;;AAEA,YAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAID,KAAKP,MAAzB,EAAiCQ,GAAjC,EACA;AACC,YAAIC,OAAOF,KAAKC,CAAL,CAAX;AACA,aAAKlB,eAAL,CAAqBgB,CAArB,EAAwBG,KAAKC,yBAAL,CAA+BJ,CAA/B,CAAxB,IAA6DG,IAA7D;AACA;AACD;AACD,MAhBD,MAkBA;AACC;AACA;AACAjB;;AAEA;AACA,WAAK,IAAIc,IAAI,CAAb,EAAgBA,IAAI,KAAKhB,eAAL,CAAqBU,MAAzC,EAAiDM,GAAjD,EACA;AACC,WAAIC,OAAOX,MAAMG,KAAN,CAAYO,CAAZ,CAAX;;AAEA,YAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAID,KAAKP,MAAzB,EAAiCQ,GAAjC,EACA;AACC,YAAIC,OAAOF,KAAKC,CAAL,CAAX;AACAC,aAAKE,yBAAL,CAA+BL,CAA/B,EAAkCE,CAAlC;AACA;AACD;AACD;;AAED,SAAIjB,wBAAwB,CAA5B,EACA;AACC;AACA;AACA;AACD;;AAED;AACA,QAAIQ,QAAQ,EAAZ;AACA,QAAIa,WAAW,EAAf;;AAEA,SAAK,IAAId,IAAI,CAAb,EAAgBA,IAAIF,MAAMiB,OAAN,GAAgB,CAApC,EAAuCf,GAAvC,EACA;AACCc,cAASd,CAAT,IAAc,EAAd;AACAC,WAAMD,CAAN,IAAWc,SAASd,CAAT,CAAX;AACA;;AAED,SAAK,IAAIA,IAAI,CAAb,EAAgBA,IAAI,KAAKR,eAAL,CAAqBU,MAAzC,EAAiDF,GAAjD,EACA;AACC,UAAK,IAAIQ,IAAI,CAAb,EAAgBA,IAAI,KAAKhB,eAAL,CAAqBQ,CAArB,EAAwBE,MAA5C,EAAoDM,GAApD,EACA;AACCM,eAASd,CAAT,EAAYgB,IAAZ,CAAiB,KAAKxB,eAAL,CAAqBQ,CAArB,EAAwBQ,CAAxB,CAAjB;AACA;AACD;;AAEDV,UAAMG,KAAN,GAAcA,KAAd;AACA,IApFD;;AAuFA;;;;;;;;;;;AAWAhB,mCAAgCG,SAAhC,CAA0CgB,kBAA1C,GAA+D,UAASN,KAAT,EAC/D;AACC,QAAImB,WAAWnB,MAAMG,KAAN,CAAYC,MAA3B;AACA,QAAIgB,iBAAiB,CAArB;;AAEA,SAAK,IAAIlB,IAAI,CAAb,EAAgBA,IAAIiB,QAApB,EAA8BjB,GAA9B,EACA;AACCkB,uBAAkB,KAAKC,qBAAL,CAA2BnB,CAA3B,EAA8BF,KAA9B,CAAlB;AACA;;AAED,WAAOoB,cAAP;AACA,IAXD;;AAaA;;;;;;;;;;;;AAYAjC,mCAAgCG,SAAhC,CAA0C+B,qBAA1C,GAAkE,UAASnB,CAAT,EAAYF,KAAZ,EAClE;AACC,QAAIoB,iBAAiB,CAArB;AACA,QAAIT,OAAOX,MAAMG,KAAN,CAAYD,CAAZ,CAAX;AACA,QAAIoB,eAAetB,MAAMG,KAAN,CAAYD,IAAI,CAAhB,CAAnB;;AAEA,QAAIqB,aAAa,EAAjB;;AAEA;AACA,SAAK,IAAIb,IAAI,CAAb,EAAgBA,IAAIC,KAAKP,MAAzB,EAAiCM,GAAjC,EACA;AACC,SAAIc,OAAOb,KAAKD,CAAL,CAAX;AACA,SAAIe,eAAeD,KAAKV,yBAAL,CAA+BZ,CAA/B,CAAnB;AACA,SAAIwB,iBAAiBF,KAAKG,8BAAL,CAAoCzB,CAApC,CAArB;AACA,SAAI0B,cAAc,EAAlB;;AAEA,UAAK,IAAIhB,IAAI,CAAb,EAAgBA,IAAIc,eAAetB,MAAnC,EAA2CQ,GAA3C,EACA;AACC,UAAIiB,gBAAgBH,eAAed,CAAf,CAApB;AACA,UAAIkB,wBAAwBD,cAAcf,yBAAd,CAAwCZ,IAAI,CAA5C,CAA5B;AACA0B,kBAAYV,IAAZ,CAAiBY,qBAAjB;AACA;;AAEDF,iBAAYG,IAAZ,CAAiB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAAE,aAAOD,IAAIC,CAAX;AAAe,MAAjD;AACAV,gBAAWE,YAAX,IAA2BG,WAA3B;AACA;;AAED,QAAIM,UAAU,EAAd;;AAEA,SAAK,IAAIxB,IAAI,CAAb,EAAgBA,IAAIa,WAAWnB,MAA/B,EAAuCM,GAAvC,EACA;AACCwB,eAAUA,QAAQC,MAAR,CAAeZ,WAAWb,CAAX,CAAf,CAAV;AACA;;AAED,QAAI0B,aAAa,CAAjB;;AAEA,WAAOA,aAAad,aAAalB,MAAjC,EACA;AACCgC,oBAAe,CAAf;AACA;;AAED,QAAIC,WAAW,IAAID,UAAJ,GAAiB,CAAhC;AACAA,kBAAc,CAAd;;AAEA,QAAIE,OAAO,EAAX;;AAEA,SAAK,IAAI5B,IAAI,CAAb,EAAgBA,IAAI2B,QAApB,EAA8B,EAAE3B,CAAhC,EACA;AACC4B,UAAK5B,CAAL,IAAU,CAAV;AACA;;AAED,SAAK,IAAIA,IAAI,CAAb,EAAgBA,IAAIwB,QAAQ9B,MAA5B,EAAoCM,GAApC,EACA;AACC,SAAI6B,QAAQL,QAAQxB,CAAR,CAAZ;AACG,SAAI8B,YAAYD,QAAQH,UAAxB;AACA,OAAEE,KAAKE,SAAL,CAAF;;AAEA,YAAOA,YAAY,CAAnB,EACA;AACC,UAAIA,YAAY,CAAhB,EACA;AACCpB,yBAAkBkB,KAAKE,YAAY,CAAjB,CAAlB;AACA;;AAEDA,kBAAaA,YAAY,CAAb,IAAmB,CAA/B;AACA,QAAEF,KAAKE,SAAL,CAAF;AACA;AACJ;;AAED,WAAOpB,cAAP;AACA,IAtED;;AAwEA;;;;;;;;;;;AAWAjC,mCAAgCG,SAAhC,CAA0CkB,SAA1C,GAAsD,UAASiC,iBAAT,EAA4BzC,KAA5B,EACtD;AACC,QAAI0C,WAAW,IAAf;;AAEA;AACA,QAAIC,QAAQ,CAAZ;AACA,QAAIC,WAAW,EAAf;AACA,WAAOF,YAAYC,UAAUC,QAA7B,EACA;AACC;AACA;AACA;AACA,SAAIC,QAAQJ,oBAAoB,CAApB,IAAyB,CAAzB,IAA8BE,QAAQ,CAAR,IAAa,CAAvD;AACAD,gBAAW,KAAX;;AAEA,UAAK,IAAIxC,IAAI,CAAb,EAAgBA,IAAIF,MAAMG,KAAN,CAAYC,MAAhC,EAAwCF,GAAxC,EACA;AACC,UAAIS,OAAOX,MAAMG,KAAN,CAAYD,CAAZ,CAAX;AACA,UAAI4C,eAAe,EAAnB;;AAEA,WAAK,IAAIpC,IAAI,CAAb,EAAgBA,IAAIC,KAAKP,MAAzB,EAAiCM,GAAjC,EACA;AACC,WAAIG,OAAOF,KAAKD,CAAL,CAAX;AACA,WAAIqC,WAAWlC,KAAKC,yBAAL,CAA+BZ,CAA/B,CAAf;;AAEA;AACA,WAAI6C,WAAW,CAAf,EACA;AACCA,mBAAWrC,CAAX;AACA;AACDoC,oBAAaC,QAAb,IAAyBlC,IAAzB;AACA;;AAED,UAAImC,2BAA2B,IAA/B;AACA,UAAIC,2BAA2B,IAA/B;AACA,UAAIC,4BAA4B,IAAhC;AACA,UAAIC,4BAA4B,IAAhC;;AAEA,UAAIC,qBAAqB,IAAzB;AACA,UAAIC,qBAAqB,IAAzB;AACA,UAAIC,sBAAsB,IAA1B;AACA,UAAIC,sBAAsB,IAA1B;;AAEA,UAAIC,WAAW,IAAf;AACA,UAAIC,YAAY,IAAhB;;AAEA,WAAK,IAAI/C,IAAI,CAAb,EAAgBA,IAAKC,KAAKP,MAAL,GAAc,CAAnC,EAAuCM,GAAvC,EACA;AACC;AACA;AACA;AACA;AACA;AACA;AACA,WAAIA,KAAK,CAAT,EACA;AACC8C,mBAAWV,aAAapC,CAAb,CAAX;AACAsC,mCAA2BQ,SACxBE,0BADwB,CACGxD,CADH,CAA3B;AAEA+C,mCAA2BO,SACxB7B,8BADwB,CACOzB,CADP,CAA3B;AAEAkD,6BAAqB,EAArB;AACAC,6BAAqB,EAArB;;AAEA,aAAK,IAAIzC,IAAI,CAAb,EAAgBA,IAAIoC,yBAAyB5C,MAA7C,EAAqDQ,GAArD,EACA;AACCwC,4BAAmBxC,CAAnB,IAAwBoC,yBAAyBpC,CAAzB,EAA4BE,yBAA5B,CAAsDZ,IAAI,CAA1D,CAAxB;AACA;;AAED,aAAK,IAAIU,IAAI,CAAb,EAAgBA,IAAIqC,yBAAyB7C,MAA7C,EAAqDQ,GAArD,EACA;AACCyC,4BAAmBzC,CAAnB,IAAwBqC,yBAAyBrC,CAAzB,EAA4BE,yBAA5B,CAAsDZ,IAAI,CAA1D,CAAxB;AACA;AACD,QAnBD,MAqBA;AACC8C,mCAA2BE,yBAA3B;AACAD,mCAA2BE,yBAA3B;AACAC,6BAAqBE,mBAArB;AACAD,6BAAqBE,mBAArB;AACAC,mBAAWC,SAAX;AACA;;AAEDA,mBAAYX,aAAapC,IAAI,CAAjB,CAAZ;AACAwC,mCAA4BO,UACzBC,0BADyB,CACExD,CADF,CAA5B;AAEAiD,mCAA4BM,UACzB9B,8BADyB,CACMzB,CADN,CAA5B;;AAGAoD,6BAAsB,EAAtB;AACAC,6BAAsB,EAAtB;;AAEA,YAAK,IAAI3C,IAAI,CAAb,EAAgBA,IAAIsC,0BAA0B9C,MAA9C,EAAsDQ,GAAtD,EACA;AACC0C,4BAAoB1C,CAApB,IAAyBsC,0BAA0BtC,CAA1B,EAA6BE,yBAA7B,CAAuDZ,IAAI,CAA3D,CAAzB;AACA;;AAED,YAAK,IAAIU,IAAI,CAAb,EAAgBA,IAAIuC,0BAA0B/C,MAA9C,EAAsDQ,GAAtD,EACA;AACC2C,4BAAoB3C,CAApB,IAAyBuC,0BAA0BvC,CAA1B,EAA6BE,yBAA7B,CAAuDZ,IAAI,CAA3D,CAAzB;AACA;;AAED,WAAIyD,wBAAwB,CAA5B;AACA,WAAIC,yBAAyB,CAA7B;;AAEA,YAAK,IAAIhD,IAAI,CAAb,EAAgBA,IAAIwC,mBAAmBhD,MAAvC,EAA+CQ,GAA/C,EACA;AACC,aAAK,IAAIiD,KAAK,CAAd,EAAiBA,KAAKP,oBAAoBlD,MAA1C,EAAkDyD,IAAlD,EACA;AACC,aAAIT,mBAAmBxC,CAAnB,IAAwB0C,oBAAoBO,EAApB,CAA5B,EACA;AACCF;AACA;;AAED,aAAIP,mBAAmBxC,CAAnB,IAAwB0C,oBAAoBO,EAApB,CAA5B,EACA;AACCD;AACA;AACD;AACD;;AAED,YAAK,IAAIhD,IAAI,CAAb,EAAgBA,IAAIyC,mBAAmBjD,MAAvC,EAA+CQ,GAA/C,EACA;AACC,aAAK,IAAIiD,KAAK,CAAd,EAAiBA,KAAKN,oBAAoBnD,MAA1C,EAAkDyD,IAAlD,EACA;AACC,aAAIR,mBAAmBzC,CAAnB,IAAwB2C,oBAAoBM,EAApB,CAA5B,EACA;AACCF;AACA;;AAED,aAAIN,mBAAmBzC,CAAnB,IAAwB2C,oBAAoBM,EAApB,CAA5B,EACA;AACCD;AACA;AACD;AACD;;AAED,WAAKA,yBAAyBD,qBAA1B,IACFC,0BAA0BD,qBAA1B,IACDd,KAFD,EAGA;AACC,YAAIiB,OAAON,SAAS1C,yBAAT,CAAmCZ,CAAnC,CAAX;AACAsD,iBAASzC,yBAAT,CAAmCb,CAAnC,EAAsCuD,UACnC3C,yBADmC,CACTZ,CADS,CAAtC;AAEAuD,kBAAU1C,yBAAV,CAAoCb,CAApC,EAAuC4D,IAAvC;;AAEA;AACA;AACA;AACA;AACAZ,oCAA4BF,wBAA5B;AACAG,oCAA4BF,wBAA5B;AACAK,8BAAsBF,kBAAtB;AACAG,8BAAsBF,kBAAtB;AACAI,oBAAYD,QAAZ;;AAEA,YAAI,CAACX,KAAL,EACA;AACC;AACA;AACA;AACAH,oBAAW,IAAX;AACA;AACD;AACD;AACD;AACD;AACD,IAvKD;;AAyKA;;;;;;;;;;;AAWAvD,mCAAgCG,SAAhC,CAA0CiB,cAA1C,GAA2D,UAASwD,SAAT,EAAoB/D,KAApB,EAC3D;AACC;AACA,QAAIgE,gBAAiBD,YAAY,CAAZ,IAAiB,CAAtC;AACA,QAAIC,aAAJ,EACA;AACC,UAAK,IAAItD,IAAIV,MAAMiB,OAAN,GAAgB,CAA7B,EAAgCP,KAAK,CAArC,EAAwCA,GAAxC,EACA;AACC,WAAKuD,UAAL,CAAgBvD,CAAhB,EAAmBsD,aAAnB;AACA;AACD,KAND,MAQA;AACC,UAAK,IAAItD,IAAI,CAAb,EAAgBA,IAAIV,MAAMiB,OAA1B,EAAmCP,GAAnC,EACA;AACC,WAAKuD,UAAL,CAAgBvD,CAAhB,EAAmBsD,aAAnB;AACA;AACD;AACD,IAlBD;;AAoBA;;;;;;;;;;;AAWA7E,mCAAgCG,SAAhC,CAA0C2E,UAA1C,GAAuD,UAASC,SAAT,EAAoBF,aAApB,EACvD;AACC,QAAIG,kBAAkB,KAAKzE,eAAL,CAAqBwE,SAArB,EAAgC9D,MAAtD;AACA,QAAIgE,eAAe,EAAnB;AACA,QAAIC,oBAAoB,EAAxB;;AAEA,SAAK,IAAInE,IAAI,CAAb,EAAgBA,IAAIiE,eAApB,EAAqCjE,GAArC,EACA;AACC,SAAIW,OAAO,KAAKnB,eAAL,CAAqBwE,SAArB,EAAgChE,CAAhC,CAAX;AACA,SAAIoE,cAAc,IAAIjF,gBAAJ,EAAlB;AACAiF,iBAAYzD,IAAZ,GAAmBA,IAAnB;;AAEA;AACA;AACA;AACA;AACA,SAAI0D,uBAAJ;;AAEA,SAAIP,aAAJ,EACA;AACCO,gCAA0B1D,KACvB6C,0BADuB,CACIQ,SADJ,CAA1B;AAEA,MAJD,MAMA;AACCK,gCAA0B1D,KACvBc,8BADuB,CACQuC,SADR,CAA1B;AAEA;;AAED,SAAIM,aAAJ;;AAEA,SAAIR,aAAJ,EACA;AACCQ,sBAAgBN,YAAY,CAA5B;AACA,MAHD,MAKA;AACCM,sBAAgBN,YAAY,CAA5B;AACA;;AAED,SAAIK,2BAA2B,IAA3B,IACCA,wBAAwBnE,MAAxB,IAAkC,CADvC,EAEA;AACCkE,kBAAYG,WAAZ,GAA0B,KAAKA,WAAL,CACxBF,uBADwB,EACCC,aADD,CAA1B;AAEAJ,mBAAalD,IAAb,CAAkBoD,WAAlB;AACA,MAND,MAQA;AACC;AACA;AACAD,wBAAkBxD,KAAKC,yBAAL,CAA+BoD,SAA/B,CAAlB,IAA+D,IAA/D;AACA;AACD;;AAEDE,iBAAarC,IAAb,CAAkB1C,iBAAiBC,SAAjB,CAA2BoF,OAA7C;;AAEA;AACA;AACA,SAAK,IAAIxE,IAAI,CAAb,EAAgBA,IAAIiE,eAApB,EAAqCjE,GAArC,EACA;AACC,SAAImE,kBAAkBnE,CAAlB,KAAwB,IAA5B,EACA;AACC,UAAIW,OAAOuD,aAAaO,KAAb,GAAqB9D,IAAhC;AACAA,WAAKE,yBAAL,CAA+BmD,SAA/B,EAA0ChE,CAA1C;AACA;AACD;AACD,IAnED;;AAqEA;;;;;;;;;;;;;AAaAf,mCAAgCG,SAAhC,CAA0CmF,WAA1C,GAAwD,UAAS/C,cAAT,EAAyBwC,SAAzB,EACxD;AACC,QAAIE,eAAe,EAAnB;AACA,QAAIQ,aAAa,CAAjB;;AAEA,SAAK,IAAI1E,IAAI,CAAb,EAAgBA,IAAIwB,eAAetB,MAAnC,EAA2CF,GAA3C,EACA;AACC,SAAIW,OAAOa,eAAexB,CAAf,CAAX;AACAkE,kBAAaQ,YAAb,IAA6B/D,KAAKC,yBAAL,CAA+BoD,SAA/B,CAA7B;AACA;;AAED;AACA;AACAE,iBAAarC,IAAb,CAAkB,UAAS8C,CAAT,EAAWC,CAAX,EAAa;AAAC,YAAOD,IAAIC,CAAX;AAAc,KAA9C;;AAEA,QAAIF,aAAa,CAAb,IAAkB,CAAtB,EACA;AACC;AACA,YAAOR,aAAaW,KAAKC,KAAL,CAAWJ,aAAa,CAAxB,CAAb,CAAP;AACA,KAJD,MAKK,IAAIA,cAAc,CAAlB,EACL;AACC,YAAQ,CAACR,aAAa,CAAb,IAAkBA,aAAa,CAAb,CAAnB,IAAsC,GAA9C;AACA,KAHI,MAKL;AACC,SAAIa,cAAcL,aAAa,CAA/B;AACA,SAAIM,aAAad,aAAaa,cAAc,CAA3B,IAAgCb,aAAa,CAAb,CAAjD;AACA,SAAIe,cAAcf,aAAaQ,aAAa,CAA1B,IACdR,aAAaa,WAAb,CADJ;;AAGA,YAAO,CAACb,aAAaa,cAAc,CAA3B,IAAgCE,WAAhC,GAA8Cf,aAAaa,WAAb,IAClDC,UADG,KAEFA,aAAaC,WAFX,CAAP;AAGA;AACD,IAnCD,CAkDC;;AAED;;;;;AAKA9F,oBAAiBC,SAAjB,CAA2BmF,WAA3B,GAAyC,CAAzC;;AAEA;;;;;AAKApF,oBAAiBC,SAAjB,CAA2BuB,IAA3B,GAAkC,KAAlC;;AAEA;;;;;AAKAxB,oBAAiBC,SAAjB,CAA2BoF,OAA3B,GAAqC,UAASG,CAAT,EAAYC,CAAZ,EACrC;AACC,QAAID,KAAK,IAAL,IAAaC,KAAK,IAAtB,EACA;AACC,SAAIA,EAAEL,WAAF,GAAgBI,EAAEJ,WAAtB,EACA;AACC,aAAO,CAAC,CAAR;AACA,MAHD,MAIK,IAAIK,EAAEL,WAAF,GAAgBI,EAAEJ,WAAtB,EACL;AACC,aAAO,CAAP;AACA,MAHI,MAKL;AACC,aAAO,CAAP;AACA;AACD,KAdD,MAgBA;AACC,YAAO,CAAP;AACA;AACD,IArBD;;AAuBAW,cAAWjG,+BAAX,GAA6C,OAAOA,+BAAP,KAA2C,WAA3C,GAAyDA,+BAAzD,GAA2FkG,SAAxI","file":"mxMedianHybridCrossingReduction.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMedianHybridCrossingReduction\n * \n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weighings as well heuristic to straighten edges as\n * far as possible.\n * \n * Constructor: mxMedianHybridCrossingReduction\n *\n * Creates a coordinate assignment.\n * \n * Arguments:\n * \n * intraCellSpacing - the minimum buffer between cells on the same rank\n * interRankCellSpacing - the minimum distance between cells on adjacent ranks\n * orientation - the position of the root node(s) relative to the graph\n * initialX - the leftmost coordinate node placement starts at\n */\nfunction mxMedianHybridCrossingReduction(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxMedianHybridCrossingReduction.\n */\nmxMedianHybridCrossingReduction.prototype = new mxHierarchicalLayoutStage();\nmxMedianHybridCrossingReduction.prototype.constructor = mxMedianHybridCrossingReduction;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxMedianHybridCrossingReduction.prototype.layout = null;\n\n/**\n * Variable: maxIterations\n * \n * The maximum number of iterations to perform whilst reducing edge\n * crossings. Default is 24.\n */\nmxMedianHybridCrossingReduction.prototype.maxIterations = 24;\n\n/**\n * Variable: nestedBestRanks\n * \n * Stores each rank as a collection of cells in the best order found for\n * each layer so far\n */\nmxMedianHybridCrossingReduction.prototype.nestedBestRanks = null;\n\n/**\n * Variable: currentBestCrossings\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.currentBestCrossings = 0;\n\n/**\n * Variable: iterationsWithoutImprovement\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.iterationsWithoutImprovement = 0;\n\n/**\n * Variable: maxNoImprovementIterations\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.maxNoImprovementIterations = 2;\n\n/**\n * Function: execute\n * \n * Performs a vertex ordering within ranks as described by Gansner et al\n * 1993\n */\nmxMedianHybridCrossingReduction.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\n\t// Stores initial ordering as being the best one found so far\n\tthis.nestedBestRanks = [];\n\t\n\tfor (var i = 0; i < model.ranks.length; i++)\n\t{\n\t\tthis.nestedBestRanks[i] = model.ranks[i].slice();\n\t}\n\n\tvar iterationsWithoutImprovement = 0;\n\tvar currentBestCrossings = this.calculateCrossings(model);\n\n\tfor (var i = 0; i < this.maxIterations &&\n\t\titerationsWithoutImprovement < this.maxNoImprovementIterations; i++)\n\t{\n\t\tthis.weightedMedian(i, model);\n\t\tthis.transpose(i, model);\n\t\tvar candidateCrossings = this.calculateCrossings(model);\n\n\t\tif (candidateCrossings < currentBestCrossings)\n\t\t{\n\t\t\tcurrentBestCrossings = candidateCrossings;\n\t\t\titerationsWithoutImprovement = 0;\n\n\t\t\t// Store the current rankings as the best ones\n\t\t\tfor (var j = 0; j < this.nestedBestRanks.length; j++)\n\t\t\t{\n\t\t\t\tvar rank = model.ranks[j];\n\n\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\tthis.nestedBestRanks[j][cell.getGeneralPurposeVariable(j)] = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Increase count of iterations where we haven't improved the\n\t\t\t// layout\n\t\t\titerationsWithoutImprovement++;\n\n\t\t\t// Restore the best values to the cells\n\t\t\tfor (var j = 0; j < this.nestedBestRanks.length; j++)\n\t\t\t{\n\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\tcell.setGeneralPurposeVariable(j, k);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (currentBestCrossings == 0)\n\t\t{\n\t\t\t// Do nothing further\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Store the best rankings but in the model\n\tvar ranks = [];\n\tvar rankList = [];\n\n\tfor (var i = 0; i < model.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tranks[i] = rankList[i];\n\t}\n\n\tfor (var i = 0; i < this.nestedBestRanks.length; i++)\n\t{\n\t\tfor (var j = 0; j < this.nestedBestRanks[i].length; j++)\n\t\t{\n\t\t\trankList[i].push(this.nestedBestRanks[i][j]);\n\t\t}\n\t}\n\n\tmodel.ranks = ranks;\n};\n\n\n/**\n * Function: calculateCrossings\n * \n * Calculates the total number of edge crossing in the current graph.\n * Returns the current number of edge crossings in the hierarchy graph\n * model in the current candidate layout\n * \n * Parameters:\n * \n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.calculateCrossings = function(model)\n{\n\tvar numRanks = model.ranks.length;\n\tvar totalCrossings = 0;\n\n\tfor (var i = 1; i < numRanks; i++)\n\t{\n\t\ttotalCrossings += this.calculateRankCrossing(i, model);\n\t}\n\t\n\treturn totalCrossings;\n};\n\n/**\n * Function: calculateRankCrossing\n * \n * Calculates the number of edges crossings between the specified rank and\n * the rank below it. Returns the number of edges crossings with the rank\n * beneath\n * \n * Parameters:\n * \n * i -  the topmost rank of the pair ( higher rank value )\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.calculateRankCrossing = function(i, model)\n{\n\tvar totalCrossings = 0;\n\tvar rank = model.ranks[i];\n\tvar previousRank = model.ranks[i - 1];\n\n\tvar tmpIndices = [];\n\n\t// Iterate over the top rank and fill in the connection information\n\tfor (var j = 0; j < rank.length; j++)\n\t{\n\t\tvar node = rank[j];\n\t\tvar rankPosition = node.getGeneralPurposeVariable(i);\n\t\tvar connectedCells = node.getPreviousLayerConnectedCells(i);\n\t\tvar nodeIndices = [];\n\n\t\tfor (var k = 0; k < connectedCells.length; k++)\n\t\t{\n\t\t\tvar connectedNode = connectedCells[k];\n\t\t\tvar otherCellRankPosition = connectedNode.getGeneralPurposeVariable(i - 1);\n\t\t\tnodeIndices.push(otherCellRankPosition);\n\t\t}\n\t\t\n\t\tnodeIndices.sort(function(x, y) { return x - y; });\n\t\ttmpIndices[rankPosition] = nodeIndices;\n\t}\n\t\n\tvar indices = [];\n\n\tfor (var j = 0; j < tmpIndices.length; j++)\n\t{\n\t\tindices = indices.concat(tmpIndices[j]);\n\t}\n\n\tvar firstIndex = 1;\n\t\n\twhile (firstIndex < previousRank.length)\n\t{\n\t\tfirstIndex <<= 1;\n\t}\n\n\tvar treeSize = 2 * firstIndex - 1;\n\tfirstIndex -= 1;\n\n\tvar tree = [];\n\t\n\tfor (var j = 0; j < treeSize; ++j)\n\t{\n\t\ttree[j] = 0;\n\t}\n\n\tfor (var j = 0; j < indices.length; j++)\n\t{\n\t\tvar index = indices[j];\n\t    var treeIndex = index + firstIndex;\n\t    ++tree[treeIndex];\n\t    \n\t    while (treeIndex > 0)\n\t    {\n\t    \tif (treeIndex % 2)\n\t    \t{\n\t    \t\ttotalCrossings += tree[treeIndex + 1];\n\t    \t}\n\t      \n\t    \ttreeIndex = (treeIndex - 1) >> 1;\n\t    \t++tree[treeIndex];\n\t    }\n\t}\n\n\treturn totalCrossings;\n};\n\n/**\n * Function: transpose\n * \n * Takes each possible adjacent cell pair on each rank and checks if\n * swapping them around reduces the number of crossing\n * \n * Parameters:\n * \n * mainLoopIteration - the iteration number of the main loop\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.transpose = function(mainLoopIteration, model)\n{\n\tvar improved = true;\n\n\t// Track the number of iterations in case of looping\n\tvar count = 0;\n\tvar maxCount = 10;\n\twhile (improved && count++ < maxCount)\n\t{\n\t\t// On certain iterations allow allow swapping of cell pairs with\n\t\t// equal edge crossings switched or not switched. This help to\n\t\t// nudge a stuck layout into a lower crossing total.\n\t\tvar nudge = mainLoopIteration % 2 == 1 && count % 2 == 1;\n\t\timproved = false;\n\t\t\n\t\tfor (var i = 0; i < model.ranks.length; i++)\n\t\t{\n\t\t\tvar rank = model.ranks[i];\n\t\t\tvar orderedCells = [];\n\t\t\t\n\t\t\tfor (var j = 0; j < rank.length; j++)\n\t\t\t{\n\t\t\t\tvar cell = rank[j];\n\t\t\t\tvar tempRank = cell.getGeneralPurposeVariable(i);\n\t\t\t\t\n\t\t\t\t// FIXME: Workaround to avoid negative tempRanks\n\t\t\t\tif (tempRank < 0)\n\t\t\t\t{\n\t\t\t\t\ttempRank = j;\n\t\t\t\t}\n\t\t\t\torderedCells[tempRank] = cell;\n\t\t\t}\n\t\t\t\n\t\t\tvar leftCellAboveConnections = null;\n\t\t\tvar leftCellBelowConnections = null;\n\t\t\tvar rightCellAboveConnections = null;\n\t\t\tvar rightCellBelowConnections = null;\n\t\t\t\n\t\t\tvar leftAbovePositions = null;\n\t\t\tvar leftBelowPositions = null;\n\t\t\tvar rightAbovePositions = null;\n\t\t\tvar rightBelowPositions = null;\n\t\t\t\n\t\t\tvar leftCell = null;\n\t\t\tvar rightCell = null;\n\n\t\t\tfor (var j = 0; j < (rank.length - 1); j++)\n\t\t\t{\n\t\t\t\t// For each intra-rank adjacent pair of cells\n\t\t\t\t// see if swapping them around would reduce the\n\t\t\t\t// number of edges crossing they cause in total\n\t\t\t\t// On every cell pair except the first on each rank, we\n\t\t\t\t// can save processing using the previous values for the\n\t\t\t\t// right cell on the new left cell\n\t\t\t\tif (j == 0)\n\t\t\t\t{\n\t\t\t\t\tleftCell = orderedCells[j];\n\t\t\t\t\tleftCellAboveConnections = leftCell\n\t\t\t\t\t\t\t.getNextLayerConnectedCells(i);\n\t\t\t\t\tleftCellBelowConnections = leftCell\n\t\t\t\t\t\t\t.getPreviousLayerConnectedCells(i);\n\t\t\t\t\tleftAbovePositions = [];\n\t\t\t\t\tleftBelowPositions = [];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < leftCellAboveConnections.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tleftAbovePositions[k] = leftCellAboveConnections[k].getGeneralPurposeVariable(i + 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < leftCellBelowConnections.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tleftBelowPositions[k] = leftCellBelowConnections[k].getGeneralPurposeVariable(i - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleftCellAboveConnections = rightCellAboveConnections;\n\t\t\t\t\tleftCellBelowConnections = rightCellBelowConnections;\n\t\t\t\t\tleftAbovePositions = rightAbovePositions;\n\t\t\t\t\tleftBelowPositions = rightBelowPositions;\n\t\t\t\t\tleftCell = rightCell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\trightCell = orderedCells[j + 1];\n\t\t\t\trightCellAboveConnections = rightCell\n\t\t\t\t\t\t.getNextLayerConnectedCells(i);\n\t\t\t\trightCellBelowConnections = rightCell\n\t\t\t\t\t\t.getPreviousLayerConnectedCells(i);\n\n\t\t\t\trightAbovePositions = [];\n\t\t\t\trightBelowPositions = [];\n\n\t\t\t\tfor (var k = 0; k < rightCellAboveConnections.length; k++)\n\t\t\t\t{\n\t\t\t\t\trightAbovePositions[k] = rightCellAboveConnections[k].getGeneralPurposeVariable(i + 1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < rightCellBelowConnections.length; k++)\n\t\t\t\t{\n\t\t\t\t\trightBelowPositions[k] = rightCellBelowConnections[k].getGeneralPurposeVariable(i - 1);\n\t\t\t\t}\n\n\t\t\t\tvar totalCurrentCrossings = 0;\n\t\t\t\tvar totalSwitchedCrossings = 0;\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < leftAbovePositions.length; k++)\n\t\t\t\t{\n\t\t\t\t\tfor (var ik = 0; ik < rightAbovePositions.length; ik++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (leftAbovePositions[k] > rightAbovePositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalCurrentCrossings++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (leftAbovePositions[k] < rightAbovePositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalSwitchedCrossings++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < leftBelowPositions.length; k++)\n\t\t\t\t{\n\t\t\t\t\tfor (var ik = 0; ik < rightBelowPositions.length; ik++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (leftBelowPositions[k] > rightBelowPositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalCurrentCrossings++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (leftBelowPositions[k] < rightBelowPositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalSwitchedCrossings++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((totalSwitchedCrossings < totalCurrentCrossings) ||\n\t\t\t\t\t(totalSwitchedCrossings == totalCurrentCrossings &&\n\t\t\t\t\tnudge))\n\t\t\t\t{\n\t\t\t\t\tvar temp = leftCell.getGeneralPurposeVariable(i);\n\t\t\t\t\tleftCell.setGeneralPurposeVariable(i, rightCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(i));\n\t\t\t\t\trightCell.setGeneralPurposeVariable(i, temp);\n\n\t\t\t\t\t// With this pair exchanged we have to switch all of\n\t\t\t\t\t// values for the left cell to the right cell so the\n\t\t\t\t\t// next iteration for this rank uses it as the left\n\t\t\t\t\t// cell again\n\t\t\t\t\trightCellAboveConnections = leftCellAboveConnections;\n\t\t\t\t\trightCellBelowConnections = leftCellBelowConnections;\n\t\t\t\t\trightAbovePositions = leftAbovePositions;\n\t\t\t\t\trightBelowPositions = leftBelowPositions;\n\t\t\t\t\trightCell = leftCell;\n\t\t\t\t\t\n\t\t\t\t\tif (!nudge)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Don't count nudges as improvement or we'll end\n\t\t\t\t\t\t// up stuck in two combinations and not finishing\n\t\t\t\t\t\t// as early as we should\n\t\t\t\t\t\timproved = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: weightedMedian\n * \n * Sweeps up or down the layout attempting to minimise the median placement\n * of connected cells on adjacent ranks\n * \n * Parameters:\n * \n * iteration - the iteration number of the main loop\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.weightedMedian = function(iteration, model)\n{\n\t// Reverse sweep direction each time through this method\n\tvar downwardSweep = (iteration % 2 == 0);\n\tif (downwardSweep)\n\t{\n\t\tfor (var j = model.maxRank - 1; j >= 0; j--)\n\t\t{\n\t\t\tthis.medianRank(j, downwardSweep);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var j = 1; j < model.maxRank; j++)\n\t\t{\n\t\t\tthis.medianRank(j, downwardSweep);\n\t\t}\n\t}\n};\n\n/**\n * Function: medianRank\n * \n * Attempts to minimise the median placement of connected cells on this rank\n * and one of the adjacent ranks\n * \n * Parameters:\n * \n * rankValue - the layer number of this rank\n * downwardSweep - whether or not this is a downward sweep through the graph\n */\nmxMedianHybridCrossingReduction.prototype.medianRank = function(rankValue, downwardSweep)\n{\n\tvar numCellsForRank = this.nestedBestRanks[rankValue].length;\n\tvar medianValues = [];\n\tvar reservedPositions = [];\n\n\tfor (var i = 0; i < numCellsForRank; i++)\n\t{\n\t\tvar cell = this.nestedBestRanks[rankValue][i];\n\t\tvar sorterEntry = new MedianCellSorter();\n\t\tsorterEntry.cell = cell;\n\n\t\t// Flip whether or not equal medians are flipped on up and down\n\t\t// sweeps\n\t\t// TODO re-implement some kind of nudge\n\t\t// medianValues[i].nudge = !downwardSweep;\n\t\tvar nextLevelConnectedCells;\n\t\t\n\t\tif (downwardSweep)\n\t\t{\n\t\t\tnextLevelConnectedCells = cell\n\t\t\t\t\t.getNextLayerConnectedCells(rankValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLevelConnectedCells = cell\n\t\t\t\t\t.getPreviousLayerConnectedCells(rankValue);\n\t\t}\n\t\t\n\t\tvar nextRankValue;\n\t\t\n\t\tif (downwardSweep)\n\t\t{\n\t\t\tnextRankValue = rankValue + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextRankValue = rankValue - 1;\n\t\t}\n\n\t\tif (nextLevelConnectedCells != null\n\t\t\t\t&& nextLevelConnectedCells.length != 0)\n\t\t{\n\t\t\tsorterEntry.medianValue = this.medianValue(\n\t\t\t\t\tnextLevelConnectedCells, nextRankValue);\n\t\t\tmedianValues.push(sorterEntry);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Nodes with no adjacent vertices are flagged in the reserved array\n\t\t\t// to indicate they should be left in their current position.\n\t\t\treservedPositions[cell.getGeneralPurposeVariable(rankValue)] = true;\n\t\t}\n\t}\n\t\n\tmedianValues.sort(MedianCellSorter.prototype.compare);\n\t\n\t// Set the new position of each node within the rank using\n\t// its temp variable\n\tfor (var i = 0; i < numCellsForRank; i++)\n\t{\n\t\tif (reservedPositions[i] == null)\n\t\t{\n\t\t\tvar cell = medianValues.shift().cell;\n\t\t\tcell.setGeneralPurposeVariable(rankValue, i);\n\t\t}\n\t}\n};\n\n/**\n * Function: medianValue\n * \n * Calculates the median rank order positioning for the specified cell using\n * the connected cells on the specified rank. Returns the median rank\n * ordering value of the connected cells\n * \n * Parameters:\n * \n * connectedCells - the cells on the specified rank connected to the\n * specified cell\n * rankValue - the rank that the connected cell lie upon\n */\nmxMedianHybridCrossingReduction.prototype.medianValue = function(connectedCells, rankValue)\n{\n\tvar medianValues = [];\n\tvar arrayCount = 0;\n\t\n\tfor (var i = 0; i < connectedCells.length; i++)\n\t{\n\t\tvar cell = connectedCells[i];\n\t\tmedianValues[arrayCount++] = cell.getGeneralPurposeVariable(rankValue);\n\t}\n\n\t// Sort() sorts lexicographically by default (i.e. 11 before 9) so force\n\t// numerical order sort\n\tmedianValues.sort(function(a,b){return a - b;});\n\t\n\tif (arrayCount % 2 == 1)\n\t{\n\t\t// For odd numbers of adjacent vertices return the median\n\t\treturn medianValues[Math.floor(arrayCount / 2)];\n\t}\n\telse if (arrayCount == 2)\n\t{\n\t\treturn ((medianValues[0] + medianValues[1]) / 2.0);\n\t}\n\telse\n\t{\n\t\tvar medianPoint = arrayCount / 2;\n\t\tvar leftMedian = medianValues[medianPoint - 1] - medianValues[0];\n\t\tvar rightMedian = medianValues[arrayCount - 1]\n\t\t\t\t- medianValues[medianPoint];\n\n\t\treturn (medianValues[medianPoint - 1] * rightMedian + medianValues[medianPoint]\n\t\t\t\t* leftMedian)\n\t\t\t\t/ (leftMedian + rightMedian);\n\t}\n};\n\n/**\n * Class: MedianCellSorter\n * \n * A utility class used to track cells whilst sorting occurs on the median\n * values. Does not violate (x.compareTo(y)==0) == (x.equals(y))\n *\n * Constructor: MedianCellSorter\n * \n * Constructs a new median cell sorter.\n */\nfunction MedianCellSorter()\n{\n\t// empty\n};\n\n/**\n * Variable: medianValue\n * \n * The weighted value of the cell stored.\n */\nMedianCellSorter.prototype.medianValue = 0;\n\n/**\n * Variable: cell\n * \n * The cell whose median value is being calculated\n */\nMedianCellSorter.prototype.cell = false;\n\n/**\n * Function: compare\n * \n * Compares two MedianCellSorters.\n */\nMedianCellSorter.prototype.compare = function(a, b)\n{\n\tif (a != null && b != null)\n\t{\n\t\tif (b.medianValue > a.medianValue)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse if (b.medianValue < a.medianValue)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n__mxOutput.mxMedianHybridCrossingReduction = typeof mxMedianHybridCrossingReduction !== 'undefined' ? mxMedianHybridCrossingReduction : undefined;\n"]}