{"version":3,"sources":["../../../../../../../../src/mxgraph/javascript/dist/js/layout/hierarchical/stage/mxMinimumCycleRemover.js"],"names":["mxMinimumCycleRemover","layout","prototype","mxHierarchicalLayoutStage","constructor","execute","parent","model","getModel","seenNodes","Object","unseenNodesArray","vertexMapper","getValues","unseenNodes","i","length","id","rootsArray","roots","modelRoots","get","visit","node","connectingEdge","layer","seen","isAncestor","invert","mxUtils","remove","connectsAsSource","connectsAsTarget","push","seenNodesCopy","clone","__mxOutput","undefined"],"mappings":"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","file":"mxMinimumCycleRemover.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMinimumCycleRemover\n * \n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n * \n * Constructor: mxMinimumCycleRemover\n *\n * Creates a cycle remover for the given internal model.\n */\nfunction mxMinimumCycleRemover(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxMinimumCycleRemover.prototype = new mxHierarchicalLayoutStage();\nmxMinimumCycleRemover.prototype.constructor = mxMinimumCycleRemover;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxMinimumCycleRemover.prototype.layout = null;\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxMinimumCycleRemover.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\tvar seenNodes = new Object();\n\tvar unseenNodesArray = model.vertexMapper.getValues();\n\tvar unseenNodes = new Object();\n\t\n\tfor (var i = 0; i < unseenNodesArray.length; i++)\n\t{\n\t\tunseenNodes[unseenNodesArray[i].id] = unseenNodesArray[i];\n\t}\n\t\n\t// Perform a dfs through the internal model. If a cycle is found,\n\t// reverse it.\n\tvar rootsArray = null;\n\t\n\tif (model.roots != null)\n\t{\n\t\tvar modelRoots = model.roots;\n\t\trootsArray = [];\n\t\t\n\t\tfor (var i = 0; i < modelRoots.length; i++)\n\t\t{\n\t\t\trootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n\t\t}\n\t}\n\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\tif (node.isAncestor(parent))\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t}\n\t\t\n\t\tseenNodes[node.id] = node;\n\t\tdelete unseenNodes[node.id];\n\t}, rootsArray, true, null);\n\n\t// If there are any nodes that should be nodes that the dfs can miss\n\t// these need to be processed with the dfs and the roots assigned\n\t// correctly to form a correct internal model\n\tvar seenNodesCopy = mxUtils.clone(seenNodes, null, true);\n\n\t// Pick a random cell and dfs from it\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\tif (node.isAncestor(parent))\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t}\n\t\t\n\t\tseenNodes[node.id] = node;\n\t\tdelete unseenNodes[node.id];\n\t}, unseenNodes, true, seenNodesCopy);\n};\n\n__mxOutput.mxMinimumCycleRemover = typeof mxMinimumCycleRemover !== 'undefined' ? mxMinimumCycleRemover : undefined;\n"]}