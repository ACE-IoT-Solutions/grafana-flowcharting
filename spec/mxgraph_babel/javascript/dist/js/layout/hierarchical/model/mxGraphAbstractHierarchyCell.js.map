{"version":3,"sources":["../../../../../../../../src/mxgraph/javascript/dist/js/layout/hierarchical/model/mxGraphAbstractHierarchyCell.js"],"names":["mxGraphAbstractHierarchyCell","x","y","temp","prototype","maxRank","minRank","width","height","nextLayerConnectedCells","previousLayerConnectedCells","getNextLayerConnectedCells","layer","getPreviousLayerConnectedCells","isEdge","isVertex","getGeneralPurposeVariable","setGeneralPurposeVariable","value","setX","getX","setY","__mxOutput","undefined"],"mappings":"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","file":"mxGraphAbstractHierarchyCell.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphAbstractHierarchyCell\n * \n * An abstraction of an internal hierarchy node or edge\n * \n * Constructor: mxGraphAbstractHierarchyCell\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxGraphAbstractHierarchyCell()\n{\n\tthis.x = [];\n\tthis.y = [];\n\tthis.temp = [];\n};\n\n/**\n * Variable: maxRank\n * \n * The maximum rank this cell occupies. Default is -1.\n */\nmxGraphAbstractHierarchyCell.prototype.maxRank = -1;\n\n/**\n * Variable: minRank\n * \n * The minimum rank this cell occupies. Default is -1.\n */\nmxGraphAbstractHierarchyCell.prototype.minRank = -1;\n\n/**\n * Variable: x\n * \n * The x position of this cell for each layer it occupies\n */\nmxGraphAbstractHierarchyCell.prototype.x = null;\n\n/**\n * Variable: y\n * \n * The y position of this cell for each layer it occupies\n */\nmxGraphAbstractHierarchyCell.prototype.y = null;\n\n/**\n * Variable: width\n * \n * The width of this cell\n */\nmxGraphAbstractHierarchyCell.prototype.width = 0;\n\n/**\n * Variable: height\n * \n * The height of this cell\n */\nmxGraphAbstractHierarchyCell.prototype.height = 0;\n\n/**\n * Variable: nextLayerConnectedCells\n * \n * A cached version of the cells this cell connects to on the next layer up\n */\nmxGraphAbstractHierarchyCell.prototype.nextLayerConnectedCells = null;\n\n/**\n * Variable: previousLayerConnectedCells\n * \n * A cached version of the cells this cell connects to on the next layer down\n */\nmxGraphAbstractHierarchyCell.prototype.previousLayerConnectedCells = null;\n\n/**\n * Variable: temp\n * \n * Temporary variable for general use. Generally, try to avoid\n * carrying information between stages. Currently, the longest\n * path layering sets temp to the rank position in fixRanks()\n * and the crossing reduction uses this. This meant temp couldn't\n * be used for hashing the nodes in the model dfs and so hashCode\n * was created\n */\nmxGraphAbstractHierarchyCell.prototype.temp = null;\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphAbstractHierarchyCell.prototype.getNextLayerConnectedCells = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphAbstractHierarchyCell.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: isEdge\n * \n * Returns whether or not this cell is an edge\n */\nmxGraphAbstractHierarchyCell.prototype.isEdge = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isVertex\n * \n * Returns whether or not this cell is a node\n */\nmxGraphAbstractHierarchyCell.prototype.isVertex = function()\n{\n\treturn false;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\treturn null;\n};\n\n/**\n * Function: setX\n * \n * Set the value of x for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setX = function(layer, value)\n{\n\tif (this.isVertex())\n\t{\n\t\tthis.x[0] = value;\n\t}\n\telse if (this.isEdge())\n\t{\n\t\tthis.x[layer - this.minRank - 1] = value;\n\t}\n};\n\n/**\n * Function: getX\n * \n * Gets the value of x on the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.getX = function(layer)\n{\n\tif (this.isVertex())\n\t{\n\t\treturn this.x[0];\n\t}\n\telse if (this.isEdge())\n\t{\n\t\treturn this.x[layer - this.minRank - 1];\n\t}\n\n\treturn 0.0;\n};\n\n/**\n * Function: setY\n * \n * Set the value of y for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setY = function(layer, value)\n{\n\tif (this.isVertex())\n\t{\n\t\tthis.y[0] = value;\n\t}\n\telse if (this.isEdge())\n\t{\n\t\tthis.y[layer -this. minRank - 1] = value;\n\t}\n};\n\n__mxOutput.mxGraphAbstractHierarchyCell = typeof mxGraphAbstractHierarchyCell !== 'undefined' ? mxGraphAbstractHierarchyCell : undefined;\n"]}