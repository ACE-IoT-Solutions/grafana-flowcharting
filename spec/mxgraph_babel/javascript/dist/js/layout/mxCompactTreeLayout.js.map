{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/layout/mxCompactTreeLayout.js"],"names":["mxCompactTreeLayout","graph","horizontal","invert","mxGraphLayout","call","prototype","constructor","resizeParent","maintainParentLocation","groupPadding","groupPaddingTop","groupPaddingRight","groupPaddingBottom","groupPaddingLeft","parentsChanged","moveTree","visited","levelDistance","nodeDistance","resetEdges","prefHozEdgeSep","prefVertEdgeOff","minEdgeJetty","channelBuffer","edgeRouting","sortEdges","alignRanks","maxRankHeight","root","node","isVertexIgnored","vertex","apply","arguments","getConnections","length","isHorizontal","execute","parent","model","getModel","getEdges","getParent","roots","findTreeRoots","i","Object","parentX","parentY","isVertex","geo","getCellGeometry","x","y","beginUpdate","dfs","findRankHeights","setCellHeights","layout","x0","gridSize","y0","g","getVertexBounds","bounds","horizontalLayout","verticalLayout","dx","dy","Math","abs","moveNode","adjustParents","localEdgeProcessing","clone","setGeometry","endUpdate","child","next","sortOutgoingEdges","source","edges","lookup","mxDictionary","sort","e1","e2","end1","getTerminal","p1","get","mxCellPath","create","split","PATH_SEPARATOR","put","end2","p2","compare","rank","height","cell","id","createNode","prev","out","view","getView","edge","isEdgeIgnored","setEdgePoints","setEdgeStyleEnabled","state","getState","target","getVisibleTerminal","tmp","getGeometry","attachParent","join","layoutLeaf","offsetX","offsetY","siblingOffset","s","y2","width","y1","contour","upperHead","createLine","lowerHead","dist","upperTail","lowerTail","h","sum","d","merge","total","upper","lower","offset","b","bridge","a1","a2","b1","b2","t","line1","x1","line2","x2","r","isVertexMovable","setVertexLocation","mxRectangle","min","max","line","push","arrangeGroups","mxUtils","sortCells","processNodeOutgoing","parentCell","childCount","sortedCells","sortingCriterion","WeightedCellSorter","availableWidth","requiredWidth","edgeSpacing","currentXOffset","currentYOffset","maxYOffset","parentBounds","j","childCell","childBounds","getEdgesBetween","newPoints","mxPoint","__mxOutput","undefined"],"mappings":"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","file":"mxCompactTreeLayout.js","sourcesContent":["/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxCompactTreeLayout\n * \n * Extends <mxGraphLayout> to implement a compact tree (Moen) algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n * \n * Example:\n * \n * (code)\n * var layout = new mxCompactTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompactTreeLayout\n * \n * Constructs a new compact tree layout for the specified graph\n * and orientation.\n */\nfunction mxCompactTreeLayout(graph, horizontal, invert)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.invert = (invert != null) ? invert : false;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCompactTreeLayout.prototype = new mxGraphLayout();\nmxCompactTreeLayout.prototype.constructor = mxCompactTreeLayout;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the layout. Default is true.\n */\nmxCompactTreeLayout.prototype.horizontal = null;\t \n\n/**\n * Variable: invert\n *\n * Specifies if edge directions should be inverted. Default is false.\n */\nmxCompactTreeLayout.prototype.invert = null;\t \n\n/**\n * Variable: resizeParent\n * \n * If the parents should be resized to match the width/height of the\n * children. Default is true.\n */\nmxCompactTreeLayout.prototype.resizeParent = true;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxCompactTreeLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: groupPadding\n * \n * Padding added to resized parents. Default is 10.\n */\nmxCompactTreeLayout.prototype.groupPadding = 10;\n\n/**\n * Variable: groupPaddingTop\n * \n * Top padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingTop = 0;\n\n/**\n * Variable: groupPaddingRight\n * \n * Right padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingRight = 0;\n\n/**\n * Variable: groupPaddingBottom\n * \n * Bottom padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingBottom = 0;\n\n/**\n * Variable: groupPaddingLeft\n * \n * Left padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingLeft = 0;\n\n/**\n * Variable: parentsChanged\n *\n * A set of the parents that need updating based on children\n * process as part of the layout.\n */\nmxCompactTreeLayout.prototype.parentsChanged = null;\n\n/**\n * Variable: moveTree\n * \n * Specifies if the tree should be moved to the top, left corner\n * if it is inside a top-level layer. Default is false.\n */\nmxCompactTreeLayout.prototype.moveTree = false;\n\n/**\n * Variable: visited\n * \n * Specifies if the tree should be moved to the top, left corner\n * if it is inside a top-level layer. Default is false.\n */\nmxCompactTreeLayout.prototype.visited = null;\n\n/**\n * Variable: levelDistance\n *\n * Holds the levelDistance. Default is 10.\n */\nmxCompactTreeLayout.prototype.levelDistance = 10;\n\n/**\n * Variable: nodeDistance\n *\n * Holds the nodeDistance. Default is 20.\n */\nmxCompactTreeLayout.prototype.nodeDistance = 20;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxCompactTreeLayout.prototype.resetEdges = true;\n\n/**\n * Variable: prefHozEdgeSep\n * \n * The preferred horizontal distance between edges exiting a vertex.\n */\nmxCompactTreeLayout.prototype.prefHozEdgeSep = 5;\n\n/**\n * Variable: prefVertEdgeOff\n * \n * The preferred vertical offset between edges exiting a vertex.\n */\nmxCompactTreeLayout.prototype.prefVertEdgeOff = 4;\n\n/**\n * Variable: minEdgeJetty\n * \n * The minimum distance for an edge jetty from a vertex.\n */\nmxCompactTreeLayout.prototype.minEdgeJetty = 8;\n\n/**\n * Variable: channelBuffer\n * \n * The size of the vertical buffer in the center of inter-rank channels\n * where edge control points should not be placed.\n */\nmxCompactTreeLayout.prototype.channelBuffer = 4;\n\n/**\n * Variable: edgeRouting\n * \n * Whether or not to apply the internal tree edge routing.\n */\nmxCompactTreeLayout.prototype.edgeRouting = true;\n\n/**\n * Variable: sortEdges\n * \n * Specifies if edges should be sorted according to the order of their\n * opposite terminal cell in the model.\n */\nmxCompactTreeLayout.prototype.sortEdges = false;\n\n/**\n * Variable: alignRanks\n * \n * Whether or not the tops of cells in each rank should be aligned\n * across the rank\n */\nmxCompactTreeLayout.prototype.alignRanks = false;\n\n/**\n * Variable: maxRankHeight\n * \n * An array of the maximum height of cells (relative to the layout direction)\n * per rank\n */\nmxCompactTreeLayout.prototype.maxRankHeight = null;\n\n/**\n * Variable: root\n * \n * The cell to use as the root of the tree\n */\nmxCompactTreeLayout.prototype.root = null;\n\n/**\n * Variable: node\n * \n * The internal node representation of the root cell. Do not set directly\n * , this value is only exposed to assist with post-processing functionality\n */\nmxCompactTreeLayout.prototype.node = null;\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxCompactTreeLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxCompactTreeLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * If the parent has any connected edges, then it is used as the root of\n * the tree. Else, <mxGraph.findTreeRoots> will be used to find a suitable\n * root node within the set of children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be laid out.\n * root - Optional <mxCell> that will be used as the root of the tree.\n * Overrides <root> if specified.\n */\nmxCompactTreeLayout.prototype.execute = function(parent, root)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.getModel();\n\n\tif (root == null)\n\t{\n\t\t// Takes the parent as the root if it has outgoing edges\n\t\tif (this.graph.getEdges(parent, model.getParent(parent),\n\t\t\tthis.invert, !this.invert, false).length > 0)\n\t\t{\n\t\t\tthis.root = parent;\n\t\t}\n\t\t\n\t\t// Tries to find a suitable root in the parent's\n\t\t// children\n\t\telse\n\t\t{\n\t\t\tvar roots = this.graph.findTreeRoots(parent, true, this.invert);\n\t\t\t\n\t\t\tif (roots.length > 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < roots.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (!this.isVertexIgnored(roots[i]) &&\n\t\t\t\t\t\tthis.graph.getEdges(roots[i], null,\n\t\t\t\t\t\t\tthis.invert, !this.invert, false).length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.root = roots[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.root = root;\n\t}\n\t\n\tif (this.root != null)\n\t{\n\t\tif (this.resizeParent)\n\t\t{\n\t\t\tthis.parentsChanged = new Object();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.parentsChanged = null;\n\t\t}\n\n\t\t//  Maintaining parent location\n\t\tthis.parentX = null;\n\t\tthis.parentY = null;\n\t\t\n\t\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tthis.parentX = geo.x;\n\t\t\t\tthis.parentY = geo.y;\n\t\t\t}\n\t\t}\n\t\t\n\t\tmodel.beginUpdate();\n\t\t\n\t\ttry\n\t\t{\n\t\t\tthis.visited = new Object();\n\t\t\tthis.node = this.dfs(this.root, parent);\n\t\t\t\n\t\t\tif (this.alignRanks)\n\t\t\t{\n\t\t\t\tthis.maxRankHeight = [];\n\t\t\t\tthis.findRankHeights(this.node, 0);\n\t\t\t\tthis.setCellHeights(this.node, 0);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.node != null)\n\t\t\t{\n\t\t\t\tthis.layout(this.node);\n\t\t\t\tvar x0 = this.graph.gridSize;\n\t\t\t\tvar y0 = x0;\n\t\t\t\t\n\t\t\t\tif (!this.moveTree)\n\t\t\t\t{\n\t\t\t\t\tvar g = this.getVertexBounds(this.root);\n\t\t\t\t\t\n\t\t\t\t\tif (g != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx0 = g.x;\n\t\t\t\t\t\ty0 = g.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar bounds = null;\n\t\t\t\t\n\t\t\t\tif (this.isHorizontal())\n\t\t\t\t{\n\t\t\t\t\tbounds = this.horizontalLayout(this.node, x0, y0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbounds = this.verticalLayout(this.node, null, x0, y0);\n\t\t\t\t}\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tvar dx = 0;\n\t\t\t\t\tvar dy = 0;\n\n\t\t\t\t\tif (bounds.x < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx = Math.abs(x0 - bounds.x);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bounds.y < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy = Math.abs(y0 - bounds.y);\t\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dx != 0 || dy != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.moveNode(this.node, dx, dy);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.resizeParent)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.adjustParents();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.edgeRouting)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Iterate through all edges setting their positions\n\t\t\t\t\t\tthis.localEdgeProcessing(this.node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Maintaining parent location\n\t\t\t\tif (this.parentX != null && this.parentY != null)\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\t\t\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\tgeo.x = this.parentX;\n\t\t\t\t\t\tgeo.y = this.parentY;\n\t\t\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: moveNode\n * \n * Moves the specified node and all of its children by the given amount.\n */\nmxCompactTreeLayout.prototype.moveNode = function(node, dx, dy)\n{\n\tnode.x += dx;\n\tnode.y += dy;\n\tthis.apply(node);\n\t\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.moveNode(child, dx, dy);\n\t\tchild = child.next;\n\t}\n};\n\n\n/**\n * Function: sortOutgoingEdges\n * \n * Called if <sortEdges> is true to sort the array of outgoing edges in place.\n */\nmxCompactTreeLayout.prototype.sortOutgoingEdges = function(source, edges)\n{\n\tvar lookup = new mxDictionary();\n\t\n\tedges.sort(function(e1, e2)\n\t{\n\t\tvar end1 = e1.getTerminal(e1.getTerminal(false) == source);\n\t\tvar p1 = lookup.get(end1);\n\t\t\n\t\tif (p1 == null)\n\t\t{\n\t\t\tp1 = mxCellPath.create(end1).split(mxCellPath.PATH_SEPARATOR);\n\t\t\tlookup.put(end1, p1);\n\t\t}\n\n\t\tvar end2 = e2.getTerminal(e2.getTerminal(false) == source);\n\t\tvar p2 = lookup.get(end2);\n\t\t\n\t\tif (p2 == null)\n\t\t{\n\t\t\tp2 = mxCellPath.create(end2).split(mxCellPath.PATH_SEPARATOR);\n\t\t\tlookup.put(end2, p2);\n\t\t}\n\n\t\treturn mxCellPath.compare(p1, p2);\n\t});\n};\n\n/**\n * Function: findRankHeights\n * \n * Stores the maximum height (relative to the layout\n * direction) of cells in each rank\n */\nmxCompactTreeLayout.prototype.findRankHeights = function(node, rank)\n{\n\tif (this.maxRankHeight[rank] == null || this.maxRankHeight[rank] < node.height)\n\t{\n\t\tthis.maxRankHeight[rank] = node.height;\n\t}\n\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.findRankHeights(child, rank + 1);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: setCellHeights\n * \n * Set the cells heights (relative to the layout\n * direction) when the tops of each rank are to be aligned\n */\nmxCompactTreeLayout.prototype.setCellHeights = function(node, rank)\n{\n\tif (this.maxRankHeight[rank] != null && this.maxRankHeight[rank] > node.height)\n\t{\n\t\tnode.height = this.maxRankHeight[rank];\n\t}\n\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.setCellHeights(child, rank + 1);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: dfs\n * \n * Does a depth first search starting at the specified cell.\n * Makes sure the specified parent is never left by the\n * algorithm.\n */\nmxCompactTreeLayout.prototype.dfs = function(cell, parent)\n{\n\tvar id = mxCellPath.create(cell);\n\tvar node = null;\n\t\n\tif (cell != null && this.visited[id] == null && !this.isVertexIgnored(cell))\n\t{\n\t\tthis.visited[id] = cell;\n\t\tnode = this.createNode(cell);\n\n\t\tvar model = this.graph.getModel();\n\t\tvar prev = null;\n\t\tvar out = this.graph.getEdges(cell, parent, this.invert, !this.invert, false, true);\n\t\tvar view = this.graph.getView();\n\t\t\n\t\tif (this.sortEdges)\n\t\t{\n\t\t\tthis.sortOutgoingEdges(cell, out);\n\t\t}\n\n\t\tfor (var i = 0; i < out.length; i++)\n\t\t{\n\t\t\tvar edge = out[i];\n\t\t\t\n\t\t\tif (!this.isEdgeIgnored(edge))\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.setEdgePoints(edge, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.edgeRouting)\n\t\t\t\t{\n\t\t\t\t\tthis.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\tthis.setEdgePoints(edge, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Checks if terminal in same swimlane\n\t\t\t\tvar state = view.getState(edge);\n\t\t\t\tvar target = (state != null) ? state.getVisibleTerminal(this.invert) : view.getVisibleTerminal(edge, this.invert);\n\t\t\t\tvar tmp = this.dfs(target, parent);\n\t\t\t\t\n\t\t\t\tif (tmp != null && model.getGeometry(target) != null)\n\t\t\t\t{\n\t\t\t\t\tif (prev == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.child = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tprev.next = tmp;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tprev = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: layout\n * \n * Starts the actual compact tree layout algorithm\n * at the given node.\n */\nmxCompactTreeLayout.prototype.layout = function(node)\n{\n\tif (node != null)\n\t{\n\t\tvar child = node.child;\n\t\t\n\t\twhile (child != null)\n\t\t{\n\t\t\tthis.layout(child);\n\t\t\tchild = child.next;\n\t\t}\n\t\t\n\t\tif (node.child != null)\n\t\t{\n\t\t\tthis.attachParent(node, this.join(node));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.layoutLeaf(node);\n\t\t}\n\t}\n};\n\n/**\n * Function: horizontalLayout\n */\nmxCompactTreeLayout.prototype.horizontalLayout = function(node, x0, y0, bounds)\n{\n\tnode.x += x0 + node.offsetX;\n\tnode.y += y0 + node.offsetY;\n\tbounds = this.apply(node, bounds);\n\tvar child = node.child;\n\t\n\tif (child != null)\n\t{\n\t\tbounds = this.horizontalLayout(child, node.x, node.y, bounds);\n\t\tvar siblingOffset = node.y + child.offsetY;\n\t\tvar s = child.next;\n\t\t\n\t\twhile (s != null)\n\t\t{\n\t\t\tbounds = this.horizontalLayout(s, node.x + child.offsetX, siblingOffset, bounds);\n\t\t\tsiblingOffset += s.offsetY;\n\t\t\ts = s.next;\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\t\n/**\n * Function: verticalLayout\n */\nmxCompactTreeLayout.prototype.verticalLayout = function(node, parent, x0, y0, bounds)\n{\n\tnode.x += x0 + node.offsetY;\n\tnode.y += y0 + node.offsetX;\n\tbounds = this.apply(node, bounds);\n\tvar child = node.child;\n\t\n\tif (child != null)\n\t{\n\t\tbounds = this.verticalLayout(child, node, node.x, node.y, bounds);\n\t\tvar siblingOffset = node.x + child.offsetY;\n\t\tvar s = child.next;\n\t\t\n\t\twhile (s != null)\n\t\t{\n\t\t\tbounds = this.verticalLayout(s, node, siblingOffset, node.y + child.offsetX, bounds);\n\t\t\tsiblingOffset += s.offsetY;\n\t\t\ts = s.next;\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: attachParent\n */\nmxCompactTreeLayout.prototype.attachParent = function(node, height)\n{\n\tvar x = this.nodeDistance + this.levelDistance;\n\tvar y2 = (height - node.width) / 2 - this.nodeDistance;\n\tvar y1 = y2 + node.width + 2 * this.nodeDistance - height;\n\t\n\tnode.child.offsetX = x + node.height;\n\tnode.child.offsetY = y1;\n\t\n\tnode.contour.upperHead = this.createLine(node.height, 0,\n\t\tthis.createLine(x, y1, node.contour.upperHead));\n\tnode.contour.lowerHead = this.createLine(node.height, 0,\n\t\tthis.createLine(x, y2, node.contour.lowerHead));\n};\n\n/**\n * Function: layoutLeaf\n */\nmxCompactTreeLayout.prototype.layoutLeaf = function(node)\n{\n\tvar dist = 2 * this.nodeDistance;\n\t\n\tnode.contour.upperTail = this.createLine(\n\t\tnode.height + dist, 0);\n\tnode.contour.upperHead = node.contour.upperTail;\n\tnode.contour.lowerTail = this.createLine(\n\t\t0, -node.width - dist);\n\tnode.contour.lowerHead = this.createLine(\n\t\tnode.height + dist, 0, node.contour.lowerTail);\n};\n\n/**\n * Function: join\n */\nmxCompactTreeLayout.prototype.join = function(node)\n{\n\tvar dist = 2 * this.nodeDistance;\n\t\n\tvar child = node.child;\n\tnode.contour = child.contour;\n\tvar h = child.width + dist;\n\tvar sum = h;\n\tchild = child.next;\n\t\n\twhile (child != null)\n\t{\n\t\tvar d = this.merge(node.contour, child.contour);\n\t\tchild.offsetY = d + h;\n\t\tchild.offsetX = 0;\n\t\th = child.width + dist;\n\t\tsum += d + h;\n\t\tchild = child.next;\n\t}\n\t\n\treturn sum;\n};\n\n/**\n * Function: merge\n */\nmxCompactTreeLayout.prototype.merge = function(p1, p2)\n{\n\tvar x = 0;\n\tvar y = 0;\n\tvar total = 0;\n\t\n\tvar upper = p1.lowerHead;\n\tvar lower = p2.upperHead;\n\t\n\twhile (lower != null && upper != null)\n\t{\n\t\tvar d = this.offset(x, y, lower.dx, lower.dy,\n\t\t\tupper.dx, upper.dy);\n\t\ty += d;\n\t\ttotal += d;\n\t\t\n\t\tif (x + lower.dx <= upper.dx)\n\t\t{\n\t\t\tx += lower.dx;\n\t\t\ty += lower.dy;\n\t\t\tlower = lower.next;\n\t\t}\n\t\telse\n\t\t{\t\t\t\t\n\t\t\tx -= upper.dx;\n\t\t\ty -= upper.dy;\n\t\t\tupper = upper.next;\n\t\t}\n\t}\n\t\n\tif (lower != null)\n\t{\n\t\tvar b = this.bridge(p1.upperTail, 0, 0, lower, x, y);\n\t\tp1.upperTail = (b.next != null) ? p2.upperTail : b;\n\t\tp1.lowerTail = p2.lowerTail;\n\t}\n\telse\n\t{\n\t\tvar b = this.bridge(p2.lowerTail, x, y, upper, 0, 0);\n\t\t\n\t\tif (b.next == null)\n\t\t{\n\t\t\tp1.lowerTail = b;\n\t\t}\n\t}\n\t\n\tp1.lowerHead = p2.lowerHead;\n\t\n\treturn total;\n};\n\n/**\n * Function: offset\n */\nmxCompactTreeLayout.prototype.offset = function(p1, p2, a1, a2, b1, b2)\n{\n\tvar d = 0;\n\t\n\tif (b1 <= p1 || p1 + a1 <= 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tvar t = b1 * a2 - a1 * b2;\n\t\n\tif (t > 0)\n\t{\n\t\tif (p1 < 0)\n\t\t{\n\t\t\tvar s = p1 * a2;\n\t\t\td = s / a1 - p2;\n\t\t}\n\t\telse if (p1 > 0)\n\t\t{\n\t\t\tvar s = p1 * b2;\n\t\t\td = s / b1 - p2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\td = -p2;\n\t\t}\n\t}\n\telse if (b1 < p1 + a1)\n\t{\n\t\tvar s = (b1 - p1) * a2;\n\t\td = b2 - (p2 + s / a1);\n\t}\n\telse if (b1 > p1 + a1)\n\t{\n\t\tvar s = (a1 + p1) * b2;\n\t\td = s / b1 - (p2 + a2);\n\t}\n\telse\n\t{\n\t\td = b2 - (p2 + a2);\n\t}\n\n\tif (d > 0)\n\t{\n\t\treturn d;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n/**\n * Function: bridge\n */\nmxCompactTreeLayout.prototype.bridge = function(line1, x1, y1, line2, x2, y2)\n{\n\tvar dx = x2 + line2.dx - x1;\n\tvar dy = 0;\n\tvar s = 0;\n\t\n\tif (line2.dx == 0)\n\t{\n\t\tdy = line2.dy;\n\t}\n\telse\n\t{\n\t\ts = dx * line2.dy;\n\t\tdy = s / line2.dx;\n\t}\n\t\n\tvar r = this.createLine(dx, dy, line2.next);\n\tline1.next = this.createLine(0, y2 + line2.dy - dy - y1, r);\n\t\n\treturn r;\n};\n\n/**\n * Function: createNode\n */\nmxCompactTreeLayout.prototype.createNode = function(cell)\n{\n\tvar node = new Object();\n\tnode.cell = cell;\n\tnode.x = 0;\n\tnode.y = 0;\n\tnode.width = 0;\n\tnode.height = 0;\n\t\n\tvar geo = this.getVertexBounds(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tif (this.isHorizontal())\n\t\t{\n\t\t\tnode.width = geo.height;\n\t\t\tnode.height = geo.width;\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.width = geo.width;\n\t\t\tnode.height = geo.height;\n\t\t}\n\t}\n\t\n\tnode.offsetX = 0;\n\tnode.offsetY = 0;\n\tnode.contour = new Object();\n\t\n\treturn node;\n};\n\n/**\n * Function: apply\n */\nmxCompactTreeLayout.prototype.apply = function(node, bounds)\n{\n\tvar model = this.graph.getModel();\n\tvar cell = node.cell;\n\tvar g = model.getGeometry(cell);\n\n\tif (cell != null && g != null)\n\t{\n\t\tif (this.isVertexMovable(cell))\n\t\t{\n\t\t\tg = this.setVertexLocation(cell, node.x, node.y);\n\t\t\t\n\t\t\tif (this.resizeParent)\n\t\t\t{\n\t\t\t\tvar parent = model.getParent(cell);\n\t\t\t\tvar id = mxCellPath.create(parent);\n\t\t\t\t\n\t\t\t\t// Implements set semantic\n\t\t\t\tif (this.parentsChanged[id] == null)\n\t\t\t\t{\n\t\t\t\t\tthis.parentsChanged[id] = parent;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (bounds == null)\n\t\t{\n\t\t\tbounds = new mxRectangle(g.x, g.y, g.width, g.height);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds = new mxRectangle(Math.min(bounds.x, g.x),\n\t\t\t\tMath.min(bounds.y, g.y),\n\t\t\t\tMath.max(bounds.x + bounds.width, g.x + g.width),\n\t\t\t\tMath.max(bounds.y + bounds.height, g.y + g.height));\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: createLine\n */\nmxCompactTreeLayout.prototype.createLine = function(dx, dy, next)\n{\n\tvar line = new Object();\n\tline.dx = dx;\n\tline.dy = dy;\n\tline.next = next;\n\t\n\treturn line;\n};\n\n/**\n * Function: adjustParents\n * \n * Adjust parent cells whose child geometries have changed. The default \n * implementation adjusts the group to just fit around the children with \n * a padding.\n */\nmxCompactTreeLayout.prototype.adjustParents = function()\n{\n\tvar tmp = [];\n\t\n\tfor (var id in this.parentsChanged)\n\t{\n\t\ttmp.push(this.parentsChanged[id]);\n\t}\n\t\n\tthis.arrangeGroups(mxUtils.sortCells(tmp, true), this.groupPadding, this.groupPaddingTop,\n\t\tthis.groupPaddingRight, this.groupPaddingBottom, this.groupPaddingLeft);\n};\n\n/**\n * Function: localEdgeProcessing\n *\n * Moves the specified node and all of its children by the given amount.\n */\nmxCompactTreeLayout.prototype.localEdgeProcessing = function(node)\n{\n\tthis.processNodeOutgoing(node);\n\tvar child = node.child;\n\n\twhile (child != null)\n\t{\n\t\tthis.localEdgeProcessing(child);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: localEdgeProcessing\n *\n * Separates the x position of edges as they connect to vertices\n */\nmxCompactTreeLayout.prototype.processNodeOutgoing = function(node)\n{\n\tvar child = node.child;\n\tvar parentCell = node.cell;\n\n\tvar childCount = 0;\n\tvar sortedCells = [];\n\n\twhile (child != null)\n\t{\n\t\tchildCount++;\n\n\t\tvar sortingCriterion = child.x;\n\n\t\tif (this.horizontal)\n\t\t{\n\t\t\tsortingCriterion = child.y;\n\t\t}\n\n\t\tsortedCells.push(new WeightedCellSorter(child, sortingCriterion));\n\t\tchild = child.next;\n\t}\n\n\tsortedCells.sort(WeightedCellSorter.prototype.compare);\n\n\tvar availableWidth = node.width;\n\n\tvar requiredWidth = (childCount + 1) * this.prefHozEdgeSep;\n\n\t// Add a buffer on the edges of the vertex if the edge count allows\n\tif (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep))\n\t{\n\t\tavailableWidth -= 2 * this.prefHozEdgeSep;\n\t}\n\n\tvar edgeSpacing = availableWidth / childCount;\n\n\tvar currentXOffset = edgeSpacing / 2.0;\n\n\tif (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep))\n\t{\n\t\tcurrentXOffset += this.prefHozEdgeSep;\n\t}\n\n\tvar currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n\tvar maxYOffset = 0;\n\n\tvar parentBounds = this.getVertexBounds(parentCell);\n\tchild = node.child;\n\n\tfor (var j = 0; j < sortedCells.length; j++)\n\t{\n\t\tvar childCell = sortedCells[j].cell.cell;\n\t\tvar childBounds = this.getVertexBounds(childCell);\n\n\t\tvar edges = this.graph.getEdgesBetween(parentCell,\n\t\t\t\tchildCell, false);\n\t\t\n\t\tvar newPoints = [];\n\t\tvar x = 0;\n\t\tvar y = 0;\n\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tif (this.horizontal)\n\t\t\t{\n\t\t\t\t// Use opposite co-ords, calculation was done for \n\t\t\t\t// \n\t\t\t\tx = parentBounds.x + parentBounds.width;\n\t\t\t\ty = parentBounds.y + currentXOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tx = parentBounds.x + parentBounds.width\n\t\t\t\t\t\t+ currentYOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\ty = childBounds.y + childBounds.height / 2.0;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tthis.setEdgePoints(edges[i], newPoints);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = parentBounds.x + currentXOffset;\n\t\t\t\ty = parentBounds.y + parentBounds.height;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\ty = parentBounds.y + parentBounds.height\n\t\t\t\t\t\t+ currentYOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tx = childBounds.x + childBounds.width / 2.0;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tthis.setEdgePoints(edges[i], newPoints);\n\t\t\t}\n\t\t}\n\n\t\tif (j < childCount / 2)\n\t\t{\n\t\t\tcurrentYOffset += this.prefVertEdgeOff;\n\t\t}\n\t\telse if (j > childCount / 2)\n\t\t{\n\t\t\tcurrentYOffset -= this.prefVertEdgeOff;\n\t\t}\n\t\t// Ignore the case if equals, this means the second of 2\n\t\t// jettys with the same y (even number of edges)\n\n\t\t//\t\t\t\t\t\t\t\tpos[k * 2] = currentX;\n\t\tcurrentXOffset += edgeSpacing;\n\t\t//\t\t\t\t\t\t\t\tpos[k * 2 + 1] = currentYOffset;\n\n\t\tmaxYOffset = Math.max(maxYOffset, currentYOffset);\n\t}\n};\n__mxOutput.mxCompactTreeLayout = typeof mxCompactTreeLayout !== 'undefined' ? mxCompactTreeLayout : undefined;\n"]}