{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/layout/mxCompositeLayout.js"],"names":["mxCompositeLayout","graph","layouts","master","mxGraphLayout","call","prototype","constructor","moveCell","cell","x","y","move","apply","arguments","execute","parent","model","getModel","beginUpdate","i","length","endUpdate","__mxOutput","undefined"],"mappings":";;;;;AAAA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,WAASA,iBAAT,CAA2BC,KAA3B,EAAkCC,OAAlC,EAA2CC,MAA3C,EACA;AACCC,kBAAcC,IAAd,CAAmB,IAAnB,EAAyBJ,KAAzB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,G;;;AAAA;;AAED;;;AAGAH,wBAAkBM,SAAlB,GAA8B,IAAIF,aAAJ,EAA9B;AACAJ,wBAAkBM,SAAlB,CAA4BC,WAA5B,GAA0CP,iBAA1C;;AAEA;;;;;AAKAA,wBAAkBM,SAAlB,CAA4BJ,OAA5B,GAAsC,IAAtC;;AAEA;;;;;;AAMAF,wBAAkBM,SAAlB,CAA4BH,MAA5B,GAAqC,IAArC;;AAEA;;;;;;AAMAH,wBAAkBM,SAAlB,CAA4BE,QAA5B,GAAuC,UAASC,IAAT,EAAeC,CAAf,EAAkBC,CAAlB,EACvC;AACC,YAAI,KAAKR,MAAL,IAAe,IAAnB,EACA;AACC,eAAKA,MAAL,CAAYS,IAAZ,CAAiBC,KAAjB,CAAuB,KAAKV,MAA5B,EAAoCW,SAApC;AACA,SAHD,MAKA;AACC,eAAKZ,OAAL,CAAa,CAAb,EAAgBU,IAAhB,CAAqBC,KAArB,CAA2B,KAAKX,OAAL,CAAa,CAAb,CAA3B,EAA4CY,SAA5C;AACA;AACD,OAVD;;AAYA;;;;;;AAMAd,wBAAkBM,SAAlB,CAA4BS,OAA5B,GAAsC,UAASC,MAAT,EACtC;AACC,YAAIC,QAAQ,KAAKhB,KAAL,CAAWiB,QAAX,EAAZ;;AAEAD,cAAME,WAAN;AACA,YACA;AACC,eAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKlB,OAAL,CAAamB,MAAjC,EAAyCD,GAAzC,EACA;AACC,iBAAKlB,OAAL,CAAakB,CAAb,EAAgBL,OAAhB,CAAwBF,KAAxB,CAA8B,KAAKX,OAAL,CAAakB,CAAb,CAA9B,EAA+CN,SAA/C;AACA;AACD,SAND,SAQA;AACCG,gBAAMK,SAAN;AACA;AACD,OAhBD;;AAkBAC,iBAAWvB,iBAAX,GAA+B,OAAOA,iBAAP,KAA6B,WAA7B,GAA2CA,iBAA3C,GAA+DwB,SAA9F","file":"mxCompositeLayout.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCompositeLayout\n * \n * Allows to compose multiple layouts into a single layout. The master layout\n * is the layout that handles move operations if another layout than the first\n * element in <layouts> should be used. The <master> layout is not executed as\n * the code assumes that it is part of <layouts>.\n * \n * Example:\n * (code)\n * var first = new mxFastOrganicLayout(graph);\n * var second = new mxParallelEdgeLayout(graph);\n * var layout = new mxCompositeLayout(graph, [first, second], first);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompositeLayout\n *\n * Constructs a new layout using the given layouts. The graph instance is\n * required for creating the transaction that contains all layouts.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * layouts - Array of <mxGraphLayouts>.\n * master - Optional layout that handles moves. If no layout is given then\n * the first layout of the above array is used to handle moves.\n */\nfunction mxCompositeLayout(graph, layouts, master)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.layouts = layouts;\n\tthis.master = master;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCompositeLayout.prototype = new mxGraphLayout();\nmxCompositeLayout.prototype.constructor = mxCompositeLayout;\n\t\n/**\n * Variable: layouts\n * \n * Holds the array of <mxGraphLayouts> that this layout contains.\n */\nmxCompositeLayout.prototype.layouts = null;\n\n/**\n * Variable: layouts\n * \n * Reference to the <mxGraphLayouts> that handles moves. If this is null\n * then the first layout in <layouts> is used.\n */\nmxCompositeLayout.prototype.master = null;\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell> by calling move on <master> or the first\n * layout in <layouts>.\n */\nmxCompositeLayout.prototype.moveCell = function(cell, x, y)\n{\n\tif (this.master != null)\n\t{\n\t\tthis.master.move.apply(this.master, arguments);\n\t}\n\telse\n\t{\n\t\tthis.layouts[0].move.apply(this.layouts[0], arguments);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute> by executing all <layouts> in a\n * single transaction.\n */\nmxCompositeLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < this.layouts.length; i++)\n\t\t{\n\t\t\tthis.layouts[i].execute.apply(this.layouts[i], arguments);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n__mxOutput.mxCompositeLayout = typeof mxCompositeLayout !== 'undefined' ? mxCompositeLayout : undefined;\n"]}