{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/layout/mxStackLayout.js"],"names":["mxStackLayout","graph","horizontal","spacing","x0","y0","border","mxGraphLayout","call","prototype","constructor","marginTop","marginLeft","marginRight","marginBottom","keepFirstLocation","fill","resizeParent","resizeParentMax","resizeLast","wrap","borderCollapse","isHorizontal","moveCell","cell","x","y","model","getModel","parent","getParent","i","last","childCount","getChildCount","value","pstate","getView","getState","view","scale","child","getChildAt","bounds","getGeometry","tmp","width","height","idx","getIndex","Math","max","add","getParentSize","pgeo","container","isLayer","currentRoot","offsetWidth","offsetHeight","mxRectangle","execute","fillValue","isSwimlane","style","getCellStyle","start","mxUtils","getNumber","mxConstants","STYLE_STARTSIZE","DEFAULT_STARTSIZE","horz","getValue","STYLE_HORIZONTAL","min","beginUpdate","lastValue","lastChild","isVertexIgnored","isVertexMovable","geo","clone","sw","childStyle","STYLE_STROKEWIDTH","floor","setChildGeometry","isCellCollapsed","updateParentGeometry","endUpdate","geo2","getCellGeometry","setGeometry","pgeo2","__mxOutput","undefined"],"mappings":"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","file":"mxStackLayout.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStackLayout\n * \n * Extends <mxGraphLayout> to create a horizontal or vertical stack of the\n * child vertices. The children do not need to be connected for this layout\n * to work.\n * \n * Example:\n * \n * (code)\n * var layout = new mxStackLayout(graph, true);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxStackLayout\n * \n * Constructs a new stack layout layout for the specified graph,\n * spacing, orientation and offset.\n */\nfunction mxStackLayout(graph, horizontal, spacing, x0, y0, border)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.spacing = (spacing != null) ? spacing : 0;\n\tthis.x0 = (x0 != null) ? x0 : 0;\n\tthis.y0 = (y0 != null) ? y0 : 0;\n\tthis.border = (border != null) ? border : 0;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxStackLayout.prototype = new mxGraphLayout();\nmxStackLayout.prototype.constructor = mxStackLayout;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the layout. Default is true.\n */\nmxStackLayout.prototype.horizontal = null;\n\n/**\n * Variable: spacing\n *\n * Specifies the spacing between the cells. Default is 0.\n */\nmxStackLayout.prototype.spacing = null;\n\n/**\n * Variable: x0\n *\n * Specifies the horizontal origin of the layout. Default is 0.\n */\nmxStackLayout.prototype.x0 = null;\n\n/**\n * Variable: y0\n *\n * Specifies the vertical origin of the layout. Default is 0.\n */\nmxStackLayout.prototype.y0 = null;\n\n/**\n * Variable: border\n *\n * Border to be added if fill is true. Default is 0.\n */\nmxStackLayout.prototype.border = 0;\n\n/**\n * Variable: marginTop\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginTop = 0;\n\n/**\n * Variable: marginLeft\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginLeft = 0;\n\n/**\n * Variable: marginRight\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginRight = 0;\n\n/**\n * Variable: marginBottom\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginBottom = 0;\n\n/**\n * Variable: keepFirstLocation\n * \n * Boolean indicating if the location of the first cell should be\n * kept, that is, it will not be moved to x0 or y0.\n */\nmxStackLayout.prototype.keepFirstLocation = false;\n\n/**\n * Variable: fill\n * \n * Boolean indicating if dimension should be changed to fill out the parent\n * cell. Default is false.\n */\nmxStackLayout.prototype.fill = false;\n\t\n/**\n * Variable: resizeParent\n * \n * If the parent should be resized to match the width/height of the\n * stack. Default is false.\n */\nmxStackLayout.prototype.resizeParent = false;\n\n/**\n * Variable: resizeParentMax\n * \n * Use maximum of existing value and new value for resize of parent.\n * Default is false.\n */\nmxStackLayout.prototype.resizeParentMax = false;\n\n/**\n * Variable: resizeLast\n * \n * If the last element should be resized to fill out the parent. Default is\n * false. If <resizeParent> is true then this is ignored.\n */\nmxStackLayout.prototype.resizeLast = false;\n\n/**\n * Variable: wrap\n * \n * Value at which a new column or row should be created. Default is null.\n */\nmxStackLayout.prototype.wrap = null;\n\n/**\n * Variable: borderCollapse\n * \n * If the strokeWidth should be ignored. Default is true.\n */\nmxStackLayout.prototype.borderCollapse = true;\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxStackLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell>.\n */\nmxStackLayout.prototype.moveCell = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(cell);\n\tvar horizontal = this.isHorizontal();\n\t\n\tif (cell != null && parent != null)\n\t{\n\t\tvar i = 0;\n\t\tvar last = 0;\n\t\tvar childCount = model.getChildCount(parent);\n\t\tvar value = (horizontal) ? x : y;\n\t\tvar pstate = this.graph.getView().getState(parent);\n\n\t\tif (pstate != null)\n\t\t{\n\t\t\tvalue -= (horizontal) ? pstate.x : pstate.y;\n\t\t}\n\t\t\n\t\tvalue /= this.graph.view.scale;\n\t\t\n\t\tfor (i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (child != cell)\n\t\t\t{\n\t\t\t\tvar bounds = model.getGeometry(child);\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = (horizontal) ?\n\t\t\t\t\t\tbounds.x + bounds.width / 2 :\n\t\t\t\t\t\tbounds.y + bounds.height / 2;\n\t\t\t\t\t\n\t\t\t\t\tif (last <= value && tmp > value)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tlast = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Changes child order in parent\n\t\tvar idx = parent.getIndex(cell);\n\t\tidx = Math.max(0, i - ((i > idx) ? 1 : 0));\n\n\t\tmodel.add(parent, cell, idx);\n\t}\n};\n\n/**\n * Function: getParentSize\n * \n * Returns the size for the parent container or the size of the graph\n * container if the parent is a layer or the root of the model.\n */\nmxStackLayout.prototype.getParentSize = function(parent)\n{\n\tvar model = this.graph.getModel();\t\t\t\n\tvar pgeo = model.getGeometry(parent);\n\t\n\t// Handles special case where the parent is either a layer with no\n\t// geometry or the current root of the view in which case the size\n\t// of the graph's container will be used.\n\tif (this.graph.container != null && ((pgeo == null &&\n\t\tmodel.isLayer(parent)) || parent == this.graph.getView().currentRoot))\n\t{\n\t\tvar width = this.graph.container.offsetWidth - 1;\n\t\tvar height = this.graph.container.offsetHeight - 1;\n\t\tpgeo = new mxRectangle(0, 0, width, height);\n\t}\n\t\n\treturn pgeo;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.execute = function(parent)\n{\n\tif (parent != null)\n\t{\n\t\tvar pgeo = this.getParentSize(parent);\n\t\tvar horizontal = this.isHorizontal();\n\t\tvar model = this.graph.getModel();\t\n\t\tvar fillValue = null;\n\t\t\n\t\tif (pgeo != null)\n\t\t{\n\t\t\tfillValue = (horizontal) ? pgeo.height - this.marginTop - this.marginBottom :\n\t\t\t\tpgeo.width - this.marginLeft - this.marginRight;\n\t\t}\n\t\t\n\t\tfillValue -= 2 * this.border;\n\t\tvar x0 = this.x0 + this.border + this.marginLeft;\n\t\tvar y0 = this.y0 + this.border + this.marginTop;\n\t\t\n\t\t// Handles swimlane start size\n\t\tif (this.graph.isSwimlane(parent))\n\t\t{\n\t\t\t// Uses computed style to get latest \n\t\t\tvar style = this.graph.getCellStyle(parent);\n\t\t\tvar start = mxUtils.getNumber(style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE);\n\t\t\tvar horz = mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true) == 1;\n\n\t\t\tif (pgeo != null)\n\t\t\t{\n\t\t\t\tif (horz)\n\t\t\t\t{\n\t\t\t\t\tstart = Math.min(start, pgeo.height);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstart = Math.min(start, pgeo.width);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (horizontal == horz)\n\t\t\t{\n\t\t\t\tfillValue -= start;\n\t\t\t}\n\n\t\t\tif (horz)\n\t\t\t{\n\t\t\t\ty0 += start;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx0 += start;\n\t\t\t}\n\t\t}\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar tmp = 0;\n\t\t\tvar last = null;\n\t\t\tvar lastValue = 0;\n\t\t\tvar lastChild = null;\n\t\t\tvar childCount = model.getChildCount(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\t\t\n\t\t\t\tif (!this.isVertexIgnored(child) && this.isVertexMovable(child))\n\t\t\t\t{\n\t\t\t\t\tvar geo = model.getGeometry(child);\n\t\t\t\t\t\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.wrap != null && last != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ((horizontal && last.x + last.width +\n\t\t\t\t\t\t\t\tgeo.width + 2 * this.spacing > this.wrap) ||\n\t\t\t\t\t\t\t\t(!horizontal && last.y + last.height +\n\t\t\t\t\t\t\t\tgeo.height + 2 * this.spacing > this.wrap))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlast = null;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ty0 += tmp + this.spacing;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tx0 += tmp + this.spacing;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\ttmp = 0;\n\t\t\t\t\t\t\t}\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\ttmp = Math.max(tmp, (horizontal) ? geo.height : geo.width);\n\t\t\t\t\t\tvar sw = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!this.borderCollapse)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar childStyle = this.graph.getCellStyle(child);\n\t\t\t\t\t\t\tsw = mxUtils.getNumber(childStyle, mxConstants.STYLE_STROKEWIDTH, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (last != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x = lastValue + this.spacing + Math.floor(sw / 2);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y = lastValue + this.spacing + Math.floor(sw / 2);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (!this.keepFirstLocation)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y = y0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.y = y0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.fill && fillValue != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.height = fillValue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.width = fillValue;\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.setChildGeometry(child, geo);\n\t\t\t\t\t\tlastChild = child;\n\t\t\t\t\t\tlast = geo;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlastValue = last.x + last.width + Math.floor(sw / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlastValue = last.y + last.height + Math.floor(sw / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.resizeParent && pgeo != null && last != null && !this.graph.isCellCollapsed(parent))\n\t\t\t{\n\t\t\t\tthis.updateParentGeometry(parent, pgeo, last);\n\t\t\t}\n\t\t\telse if (this.resizeLast && pgeo != null && last != null && lastChild != null)\n\t\t\t{\n\t\t\t\tif (horizontal)\n\t\t\t\t{\n\t\t\t\t\tlast.width = pgeo.width - last.x - this.spacing - this.marginRight - this.marginLeft;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlast.height = pgeo.height - last.y - this.spacing - this.marginBottom;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.setChildGeometry(lastChild, last);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.setChildGeometry = function(child, geo)\n{\n\tvar geo2 = this.graph.getCellGeometry(child);\n\t\n\tif (geo2 == null || geo.x != geo2.x || geo.y != geo2.y ||\n\t\tgeo.width != geo2.width || geo.height != geo2.height)\n\t{\n\t\tthis.graph.getModel().setGeometry(child, geo);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.updateParentGeometry = function(parent, pgeo, last)\n{\n\tvar horizontal = this.isHorizontal();\n\tvar model = this.graph.getModel();\t\n\n\tvar pgeo2 = pgeo.clone();\n\t\n\tif (horizontal)\n\t{\n\t\tvar tmp = last.x + last.width + this.marginRight + this.border;\n\t\t\n\t\tif (this.resizeParentMax)\n\t\t{\n\t\t\tpgeo2.width = Math.max(pgeo2.width, tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpgeo2.width = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar tmp = last.y + last.height + this.marginBottom + this.border;\n\t\t\n\t\tif (this.resizeParentMax)\n\t\t{\n\t\t\tpgeo2.height = Math.max(pgeo2.height, tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpgeo2.height = tmp;\n\t\t}\n\t}\n\t\n\tif (pgeo.x != pgeo2.x || pgeo.y != pgeo2.y ||\n\t\tpgeo.width != pgeo2.width || pgeo.height != pgeo2.height)\n\t{\n\t\tmodel.setGeometry(parent, pgeo2);\n\t}\n};\n\n__mxOutput.mxStackLayout = typeof mxStackLayout !== 'undefined' ? mxStackLayout : undefined;\n"]}