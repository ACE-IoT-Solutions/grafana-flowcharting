{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/layout/mxCircleLayout.js"],"names":["mxCircleLayout","graph","radius","mxGraphLayout","call","prototype","constructor","moveCircle","x0","y0","resetEdges","disableEdgeStyle","execute","parent","model","getModel","beginUpdate","max","top","left","vertices","childCount","getChildCount","i","cell","getChildAt","isVertexIgnored","push","bounds","getVertexBounds","y","Math","min","x","width","height","isEdgeIgnored","resetEdge","setEdgeStyleEnabled","r","getRadius","length","circle","endUpdate","count","PI","vertexCount","phi","isVertexMovable","setVertexLocation","round","sin","cos","__mxOutput","undefined"],"mappings":";;;;;AAAA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,UAASA,cAAT,CAAwBC,KAAxB,EAA+BC,MAA/B,EACA;AACCC,gBAAcC,IAAd,CAAmB,IAAnB,EAAyBH,KAAzB;AACA,OAAKC,MAAL,GAAeA,UAAU,IAAX,GAAmBA,MAAnB,GAA4B,GAA1C;AACA,E;;;AAAA;;AAED;;;AAGAF,kBAAeK,SAAf,GAA2B,IAAIF,aAAJ,EAA3B;AACAH,kBAAeK,SAAf,CAAyBC,WAAzB,GAAuCN,cAAvC;;AAEA;;;;;AAKAA,kBAAeK,SAAf,CAAyBH,MAAzB,GAAkC,IAAlC;;AAEA;;;;;;AAMAF,kBAAeK,SAAf,CAAyBE,UAAzB,GAAsC,KAAtC;;AAEA;;;;;;AAMAP,kBAAeK,SAAf,CAAyBG,EAAzB,GAA8B,CAA9B;;AAEA;;;;;;AAMAR,kBAAeK,SAAf,CAAyBI,EAAzB,GAA8B,CAA9B;;AAEA;;;;;;AAMAT,kBAAeK,SAAf,CAAyBK,UAAzB,GAAsC,IAAtC;;AAEA;;;;;;AAMAV,kBAAeK,SAAf,CAAyBM,gBAAzB,GAA4C,IAA5C;;AAEA;;;;;AAKAX,kBAAeK,SAAf,CAAyBO,OAAzB,GAAmC,UAASC,MAAT,EACnC;AACC,QAAIC,QAAQ,KAAKb,KAAL,CAAWc,QAAX,EAAZ;;AAEA;AACA;AACA;AACAD,UAAME,WAAN;AACA,QACA;AACC;AACA;AACA,SAAIC,MAAM,CAAV;AACA,SAAIC,MAAM,IAAV;AACA,SAAIC,OAAO,IAAX;AACA,SAAIC,WAAW,EAAf;AACA,SAAIC,aAAaP,MAAMQ,aAAN,CAAoBT,MAApB,CAAjB;;AAEA,UAAK,IAAIU,IAAI,CAAb,EAAgBA,IAAIF,UAApB,EAAgCE,GAAhC,EACA;AACC,UAAIC,OAAOV,MAAMW,UAAN,CAAiBZ,MAAjB,EAAyBU,CAAzB,CAAX;;AAEA,UAAI,CAAC,KAAKG,eAAL,CAAqBF,IAArB,CAAL,EACA;AACCJ,gBAASO,IAAT,CAAcH,IAAd;AACA,WAAII,SAAS,KAAKC,eAAL,CAAqBL,IAArB,CAAb;;AAEA,WAAIN,OAAO,IAAX,EACA;AACCA,cAAMU,OAAOE,CAAb;AACA,QAHD,MAKA;AACCZ,cAAMa,KAAKC,GAAL,CAASd,GAAT,EAAcU,OAAOE,CAArB,CAAN;AACA;;AAED,WAAIX,QAAQ,IAAZ,EACA;AACCA,eAAOS,OAAOK,CAAd;AACA,QAHD,MAKA;AACCd,eAAOY,KAAKC,GAAL,CAASb,IAAT,EAAeS,OAAOK,CAAtB,CAAP;AACA;;AAEDhB,aAAMc,KAAKd,GAAL,CAASA,GAAT,EAAcc,KAAKd,GAAL,CAASW,OAAOM,KAAhB,EAAuBN,OAAOO,MAA9B,CAAd,CAAN;AACA,OAxBD,MAyBK,IAAI,CAAC,KAAKC,aAAL,CAAmBZ,IAAnB,CAAL,EACL;AACC;AACA,WAAI,KAAKd,UAAT,EACA;AACC,aAAKT,KAAL,CAAWoC,SAAX,CAAqBb,IAArB;AACA;;AAEE,WAAI,KAAKb,gBAAT,EACA;AACE,aAAK2B,mBAAL,CAAyBd,IAAzB,EAA+B,KAA/B;AACD;AACJ;AACD;;AAED,SAAIe,IAAI,KAAKC,SAAL,CAAepB,SAASqB,MAAxB,EAAgCxB,GAAhC,CAAR;;AAEA;AACA,SAAI,KAAKV,UAAT,EACA;AACCY,aAAO,KAAKX,EAAZ;AACAU,YAAM,KAAKT,EAAX;AACA;;AAED,UAAKiC,MAAL,CAAYtB,QAAZ,EAAsBmB,CAAtB,EAAyBpB,IAAzB,EAA+BD,GAA/B;AACA,KAhED,SAkEA;AACCJ,WAAM6B,SAAN;AACA;AACD,IA7ED;;AA+EA;;;;;;AAMA3C,kBAAeK,SAAf,CAAyBmC,SAAzB,GAAqC,UAASI,KAAT,EAAgB3B,GAAhB,EACrC;AACC,WAAOc,KAAKd,GAAL,CAAS2B,QAAQ3B,GAAR,GAAcc,KAAKc,EAA5B,EAAgC,KAAK3C,MAArC,CAAP;AACA,IAHD;;AAKA;;;;;;;AAOAF,kBAAeK,SAAf,CAAyBqC,MAAzB,GAAkC,UAAStB,QAAT,EAAmBmB,CAAnB,EAAsBpB,IAAtB,EAA4BD,GAA5B,EAClC;AACC,QAAI4B,cAAc1B,SAASqB,MAA3B;AACA,QAAIM,MAAM,IAAIhB,KAAKc,EAAT,GAAcC,WAAxB;;AAEA,SAAK,IAAIvB,IAAI,CAAb,EAAgBA,IAAIuB,WAApB,EAAiCvB,GAAjC,EACA;AACC,SAAI,KAAKyB,eAAL,CAAqB5B,SAASG,CAAT,CAArB,CAAJ,EACA;AACC,WAAK0B,iBAAL,CAAuB7B,SAASG,CAAT,CAAvB,EACCQ,KAAKmB,KAAL,CAAW/B,OAAOoB,CAAP,GAAWA,IAAIR,KAAKoB,GAAL,CAAS5B,IAAIwB,GAAb,CAA1B,CADD,EAEChB,KAAKmB,KAAL,CAAWhC,MAAMqB,CAAN,GAAUA,IAAIR,KAAKqB,GAAL,CAAS7B,IAAIwB,GAAb,CAAzB,CAFD;AAGA;AACD;AACD,IAdD;;AAgBAM,cAAWrD,cAAX,GAA4B,OAAOA,cAAP,KAA0B,WAA1B,GAAwCA,cAAxC,GAAyDsD,SAArF","file":"mxCircleLayout.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCircleLayout\n * \n * Extends <mxGraphLayout> to implement a circluar layout for a given radius.\n * The vertices do not need to be connected for this layout to work and all\n * connections between vertices are not taken into account.\n * \n * Example:\n * \n * (code)\n * var layout = new mxCircleLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCircleLayout\n *\n * Constructs a new circular layout for the specified radius.\n *\n * Arguments:\n * \n * graph - <mxGraph> that contains the cells.\n * radius - Optional radius as an int. Default is 100.\n */\nfunction mxCircleLayout(graph, radius)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.radius = (radius != null) ? radius : 100;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCircleLayout.prototype = new mxGraphLayout();\nmxCircleLayout.prototype.constructor = mxCircleLayout;\n\n/**\n * Variable: radius\n * \n * Integer specifying the size of the radius. Default is 100.\n */\nmxCircleLayout.prototype.radius = null;\n\n/**\n * Variable: moveCircle\n * \n * Boolean specifying if the circle should be moved to the top,\n * left corner specified by <x0> and <y0>. Default is false.\n */\nmxCircleLayout.prototype.moveCircle = false;\n\n/**\n * Variable: x0\n * \n * Integer specifying the left coordinate of the circle.\n * Default is 0.\n */\nmxCircleLayout.prototype.x0 = 0;\n\n/**\n * Variable: y0\n * \n * Integer specifying the top coordinate of the circle.\n * Default is 0.\n */\nmxCircleLayout.prototype.y0 = 0;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxCircleLayout.prototype.resetEdges = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxCircleLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxCircleLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\n\t// Moves the vertices to build a circle. Makes sure the\n\t// radius is large enough for the vertices to not\n\t// overlap\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\t// Gets all vertices inside the parent and finds\n\t\t// the maximum dimension of the largest vertex\n\t\tvar max = 0;\n\t\tvar top = null;\n\t\tvar left = null;\n\t\tvar vertices = [];\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (!this.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\tvertices.push(cell);\n\t\t\t\tvar bounds = this.getVertexBounds(cell);\n\t\t\t\t\n\t\t\t\tif (top == null)\n\t\t\t\t{\n\t\t\t\t\ttop = bounds.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttop = Math.min(top, bounds.y);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (left == null)\n\t\t\t\t{\n\t\t\t\t\tleft = bounds.x;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleft = Math.min(left, bounds.x);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmax = Math.max(max, Math.max(bounds.width, bounds.height));\n\t\t\t}\n\t\t\telse if (!this.isEdgeIgnored(cell))\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.resetEdge(cell);\n\t\t\t\t}\n\n\t\t\t    if (this.disableEdgeStyle)\n\t\t\t    {\n\t\t\t    \t\tthis.setEdgeStyleEnabled(cell, false);\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar r = this.getRadius(vertices.length, max);\n\n\t\t// Moves the circle to the specified origin\n\t\tif (this.moveCircle)\n\t\t{\n\t\t\tleft = this.x0;\n\t\t\ttop = this.y0;\n\t\t}\n\t\t\n\t\tthis.circle(vertices, r, left, top);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: getRadius\n * \n * Returns the radius to be used for the given vertex count. Max is the maximum\n * width or height of all vertices in the layout.\n */\nmxCircleLayout.prototype.getRadius = function(count, max)\n{\n\treturn Math.max(count * max / Math.PI, this.radius);\n};\n\n/**\n * Function: circle\n * \n * Executes the circular layout for the specified array\n * of vertices and the given radius. This is called from\n * <execute>.\n */\nmxCircleLayout.prototype.circle = function(vertices, r, left, top)\n{\n\tvar vertexCount = vertices.length;\n\tvar phi = 2 * Math.PI / vertexCount;\n\t\n\tfor (var i = 0; i < vertexCount; i++)\n\t{\n\t\tif (this.isVertexMovable(vertices[i]))\n\t\t{\n\t\t\tthis.setVertexLocation(vertices[i],\n\t\t\t\tMath.round(left + r + r * Math.sin(i * phi)),\n\t\t\t\tMath.round(top + r + r * Math.cos(i * phi)));\n\t\t}\n\t}\n};\n\n__mxOutput.mxCircleLayout = typeof mxCircleLayout !== 'undefined' ? mxCircleLayout : undefined;\n"]}