{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/layout/mxPartitionLayout.js"],"names":["mxPartitionLayout","graph","horizontal","spacing","border","mxGraphLayout","call","prototype","constructor","resizeVertices","isHorizontal","moveCell","cell","x","y","model","getModel","parent","getParent","i","last","childCount","getChildCount","child","getChildAt","bounds","getVertexBounds","tmp","width","idx","getIndex","Math","max","add","execute","pgeo","getGeometry","container","isLayer","getView","currentRoot","offsetWidth","height","offsetHeight","mxRectangle","children","isVertexIgnored","isVertexMovable","push","n","length","x0","y0","other","size","isSwimlane","getStartSize","value","beginUpdate","geo","clone","setGeometry","endUpdate","__mxOutput","undefined"],"mappings":"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","file":"mxPartitionLayout.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPartitionLayout\n * \n * Extends <mxGraphLayout> for partitioning the parent cell vertically or\n * horizontally by filling the complete area with the child cells. A horizontal\n * layout partitions the height of the given parent whereas a a non-horizontal\n * layout partitions the width. If the parent is a layer (that is, a child of\n * the root node), then the current graph size is partitioned. The children do\n * not need to be connected for this layout to work.\n * \n * Example:\n * \n * (code)\n * var layout = new mxPartitionLayout(graph, true, 10, 20);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxPartitionLayout\n * \n * Constructs a new stack layout layout for the specified graph,\n * spacing, orientation and offset.\n */\nfunction mxPartitionLayout(graph, horizontal, spacing, border)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.spacing = spacing || 0;\n\tthis.border = border || 0;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxPartitionLayout.prototype = new mxGraphLayout();\nmxPartitionLayout.prototype.constructor = mxPartitionLayout;\n\n/**\n * Variable: horizontal\n * \n * Boolean indicating the direction in which the space is partitioned.\n * Default is true.\n */\nmxPartitionLayout.prototype.horizontal = null;\n\n/**\n * Variable: spacing\n * \n * Integer that specifies the absolute spacing in pixels between the\n * children. Default is 0.\n */\nmxPartitionLayout.prototype.spacing = null;\n\n/**\n * Variable: border\n * \n * Integer that specifies the absolute inset in pixels for the parent that\n * contains the children. Default is 0.\n */\nmxPartitionLayout.prototype.border = null;\n\n/**\n * Variable: resizeVertices\n * \n * Boolean that specifies if vertices should be resized. Default is true.\n */\nmxPartitionLayout.prototype.resizeVertices = true;\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxPartitionLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell>.\n */\nmxPartitionLayout.prototype.moveCell = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(cell);\n\t\n\tif (cell != null &&\n\t\tparent != null)\n\t{\n\t\tvar i = 0;\n\t\tvar last = 0;\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\t// Finds index of the closest swimlane\n\t\t// TODO: Take into account the orientation\n\t\tfor (i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\tvar bounds = this.getVertexBounds(child);\n\t\t\t\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tvar tmp = bounds.x + bounds.width / 2;\n\t\t\t\t\n\t\t\t\tif (last < x && tmp > x)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlast = tmp;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Changes child order in parent\n\t\tvar idx = parent.getIndex(cell);\n\t\tidx = Math.max(0, i - ((i > idx) ? 1 : 0));\n\t\t\n\t\tmodel.add(parent, cell, idx);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>. All children where <isVertexIgnored>\n * returns false and <isVertexMovable> returns true are modified.\n */\nmxPartitionLayout.prototype.execute = function(parent)\n{\n\tvar horizontal = this.isHorizontal();\n\tvar model = this.graph.getModel();\n\tvar pgeo = model.getGeometry(parent);\n\t\n\t// Handles special case where the parent is either a layer with no\n\t// geometry or the current root of the view in which case the size\n\t// of the graph's container will be used.\n\tif (this.graph.container != null &&\n\t\t((pgeo == null &&\n\t\tmodel.isLayer(parent)) ||\n\t\tparent == this.graph.getView().currentRoot))\n\t{\n\t\tvar width = this.graph.container.offsetWidth - 1;\n\t\tvar height = this.graph.container.offsetHeight - 1;\n\t\tpgeo = new mxRectangle(0, 0, width, height);\n\t}\n\n\tif (pgeo != null)\n\t{\n\t\tvar children = [];\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (!this.isVertexIgnored(child) &&\n\t\t\t\tthis.isVertexMovable(child))\n\t\t\t{\n\t\t\t\tchildren.push(child);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar n = children.length;\n\n\t\tif (n > 0)\n\t\t{\n\t\t\tvar x0 = this.border;\n\t\t\tvar y0 = this.border;\n\t\t\tvar other = (horizontal) ? pgeo.height : pgeo.width;\n\t\t\tother -= 2 * this.border;\n\n\t\t\tvar size = (this.graph.isSwimlane(parent)) ?\n\t\t\t\tthis.graph.getStartSize(parent) :\n\t\t\t\tnew mxRectangle();\n\n\t\t\tother -= (horizontal) ? size.height : size.width;\n\t\t\tx0 = x0 + size.width;\n\t\t\ty0 = y0 + size.height;\n\n\t\t\tvar tmp = this.border + (n - 1) * this.spacing;\n\t\t\tvar value = (horizontal) ?\n\t\t\t\t((pgeo.width - x0 - tmp) / n) :\n\t\t\t\t((pgeo.height - y0 - tmp) / n);\n\t\t\t\n\t\t\t// Avoids negative values, that is values where the sum of the\n\t\t\t// spacing plus the border is larger then the available space\n\t\t\tif (value > 0)\n\t\t\t{\n\t\t\t\tmodel.beginUpdate();\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < n; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\tvar geo = model.getGeometry(child);\n\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t\t\tgeo.y = y0;\n\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (this.resizeVertices)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.width = value;\n\t\t\t\t\t\t\t\t\tgeo.height = other;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tx0 += value + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (this.resizeVertices)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.height = value;\n\t\t\t\t\t\t\t\t\tgeo.width = other;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\ty0 += value + this.spacing;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmodel.setGeometry(child, geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally\n\t\t\t\t{\n\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxPartitionLayout = typeof mxPartitionLayout !== 'undefined' ? mxPartitionLayout : undefined;\n"]}