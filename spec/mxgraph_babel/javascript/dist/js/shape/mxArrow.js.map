{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/shape/mxArrow.js"],"names":["mxArrow","points","fill","stroke","strokewidth","arrowWidth","spacing","endSize","mxShape","call","mxConstants","ARROW_WIDTH","ARROW_SPACING","ARROW_SIZE","mxUtils","extend","prototype","augmentBoundingBox","bbox","apply","arguments","w","Math","max","grow","scale","paintEdgeShape","c","pts","width","arrow","p0","pe","length","dx","x","dy","y","dist","sqrt","nx","ny","basex","basey","floorx","floory","p0x","p0y","p1x","p1y","p2x","p2y","p3x","p3y","p5x","p5y","begin","moveTo","lineTo","close","fillAndStroke","__mxOutput","undefined"],"mappings":";;;;;AAAA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,UAASA,OAAT,CAAiBC,MAAjB,EAAyBC,IAAzB,EAA+BC,MAA/B,EAAuCC,WAAvC,EAAoDC,UAApD,EAAgEC,OAAhE,EAAyEC,OAAzE,EACA;AACCC,UAAQC,IAAR,CAAa,IAAb;AACA,OAAKR,MAAL,GAAcA,MAAd;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACA,OAAKC,MAAL,GAAcA,MAAd;AACA,OAAKC,WAAL,GAAoBA,eAAe,IAAhB,GAAwBA,WAAxB,GAAsC,CAAzD;AACA,OAAKC,UAAL,GAAmBA,cAAc,IAAf,GAAuBA,UAAvB,GAAoCK,YAAYC,WAAlE;AACA,OAAKL,OAAL,GAAgBA,WAAW,IAAZ,GAAoBA,OAApB,GAA8BI,YAAYE,aAAzD;AACA,OAAKL,OAAL,GAAgBA,WAAW,IAAZ,GAAoBA,OAApB,GAA8BG,YAAYG,UAAzD;AACA,E;;;AAAA;;AAED;;;AAGAC,WAAQC,MAAR,CAAef,OAAf,EAAwBQ,OAAxB;;AAEA;;;;;AAKAR,WAAQgB,SAAR,CAAkBC,kBAAlB,GAAuC,UAASC,IAAT,EACvC;AACCV,YAAQQ,SAAR,CAAkBC,kBAAlB,CAAqCE,KAArC,CAA2C,IAA3C,EAAiDC,SAAjD;;AAEA,QAAIC,IAAIC,KAAKC,GAAL,CAAS,KAAKlB,UAAd,EAA0B,KAAKE,OAA/B,CAAR;AACAW,SAAKM,IAAL,CAAU,CAACH,IAAI,CAAJ,GAAQ,KAAKjB,WAAd,IAA6B,KAAKqB,KAA5C;AACA,IAND;;AAQA;;;;;AAKAzB,WAAQgB,SAAR,CAAkBU,cAAlB,GAAmC,UAASC,CAAT,EAAYC,GAAZ,EACnC;AACC;AACA,QAAItB,UAAWI,YAAYE,aAA3B;AACA,QAAIiB,QAAQnB,YAAYC,WAAxB;AACA,QAAImB,QAAQpB,YAAYG,UAAxB;;AAEA;AACA,QAAIkB,KAAKH,IAAI,CAAJ,CAAT;AACA,QAAII,KAAKJ,IAAIA,IAAIK,MAAJ,GAAa,CAAjB,CAAT;AACA,QAAIC,KAAKF,GAAGG,CAAH,GAAOJ,GAAGI,CAAnB;AACA,QAAIC,KAAKJ,GAAGK,CAAH,GAAON,GAAGM,CAAnB;AACA,QAAIC,OAAOhB,KAAKiB,IAAL,CAAUL,KAAKA,EAAL,GAAUE,KAAKA,EAAzB,CAAX;AACA,QAAIH,SAASK,OAAO,IAAIhC,OAAX,GAAqBwB,KAAlC;;AAEA;AACA,QAAIU,KAAKN,KAAKI,IAAd;AACA,QAAIG,KAAKL,KAAKE,IAAd;AACA,QAAII,QAAQT,SAASO,EAArB;AACA,QAAIG,QAAQV,SAASQ,EAArB;AACA,QAAIG,SAASf,QAAQY,EAAR,GAAW,CAAxB;AACA,QAAII,SAAS,CAAChB,KAAD,GAASW,EAAT,GAAY,CAAzB;;AAEA;AACA,QAAIM,MAAMf,GAAGI,CAAH,GAAOS,SAAS,CAAhB,GAAoBtC,UAAUkC,EAAxC;AACA,QAAIO,MAAMhB,GAAGM,CAAH,GAAOQ,SAAS,CAAhB,GAAoBvC,UAAUmC,EAAxC;AACA,QAAIO,MAAMF,MAAMF,MAAhB;AACA,QAAIK,MAAMF,MAAMF,MAAhB;AACA,QAAIK,MAAMF,MAAMN,KAAhB;AACA,QAAIS,MAAMF,MAAMN,KAAhB;AACA,QAAIS,MAAMF,MAAMN,MAAhB;AACA,QAAIS,MAAMF,MAAMN,MAAhB;AACA;AACA,QAAIS,MAAMF,MAAM,IAAIR,MAApB;AACA,QAAIW,MAAMF,MAAM,IAAIR,MAApB;;AAEAlB,MAAE6B,KAAF;AACA7B,MAAE8B,MAAF,CAASX,GAAT,EAAcC,GAAd;AACApB,MAAE+B,MAAF,CAASV,GAAT,EAAcC,GAAd;AACAtB,MAAE+B,MAAF,CAASR,GAAT,EAAcC,GAAd;AACAxB,MAAE+B,MAAF,CAASN,GAAT,EAAcC,GAAd;AACA1B,MAAE+B,MAAF,CAAS1B,GAAGG,CAAH,GAAO7B,UAAUkC,EAA1B,EAA8BR,GAAGK,CAAH,GAAO/B,UAAUmC,EAA/C;AACAd,MAAE+B,MAAF,CAASJ,GAAT,EAAcC,GAAd;AACA5B,MAAE+B,MAAF,CAASJ,MAAMV,MAAf,EAAuBW,MAAMV,MAA7B;AACAlB,MAAEgC,KAAF;;AAEAhC,MAAEiC,aAAF;AACA,IA/CD;;AAiDAC,cAAW7D,OAAX,GAAqB,OAAOA,OAAP,KAAmB,WAAnB,GAAiCA,OAAjC,GAA2C8D,SAAhE","file":"mxArrow.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxArrow\n *\n * Extends <mxShape> to implement an arrow shape. (The shape\n * is used to represent edges, not vertices.)\n * This shape is registered under <mxConstants.SHAPE_ARROW>\n * in <mxCellRenderer>.\n * \n * Constructor: mxArrow\n *\n * Constructs a new arrow shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n * arrowWidth - Optional integer that defines the arrow width. Default is\n * <mxConstants.ARROW_WIDTH>. This is stored in <arrowWidth>.\n * spacing - Optional integer that defines the spacing between the arrow shape\n * and its endpoints. Default is <mxConstants.ARROW_SPACING>. This is stored in\n * <spacing>.\n * endSize - Optional integer that defines the size of the arrowhead. Default\n * is <mxConstants.ARROW_SIZE>. This is stored in <endSize>.\n */\nfunction mxArrow(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.arrowWidth = (arrowWidth != null) ? arrowWidth : mxConstants.ARROW_WIDTH;\n\tthis.spacing = (spacing != null) ? spacing : mxConstants.ARROW_SPACING;\n\tthis.endSize = (endSize != null) ? endSize : mxConstants.ARROW_SIZE;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxArrow, mxShape);\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the edge width and markers.\n */\nmxArrow.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\tvar w = Math.max(this.arrowWidth, this.endSize);\n\tbbox.grow((w / 2 + this.strokewidth) * this.scale);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrow.prototype.paintEdgeShape = function(c, pts)\n{\n\t// Geometry of arrow\n\tvar spacing =  mxConstants.ARROW_SPACING;\n\tvar width = mxConstants.ARROW_WIDTH;\n\tvar arrow = mxConstants.ARROW_SIZE;\n\n\t// Base vector (between end points)\n\tvar p0 = pts[0];\n\tvar pe = pts[pts.length - 1];\n\tvar dx = pe.x - p0.x;\n\tvar dy = pe.y - p0.y;\n\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\tvar length = dist - 2 * spacing - arrow;\n\t\n\t// Computes the norm and the inverse norm\n\tvar nx = dx / dist;\n\tvar ny = dy / dist;\n\tvar basex = length * nx;\n\tvar basey = length * ny;\n\tvar floorx = width * ny/3;\n\tvar floory = -width * nx/3;\n\t\n\t// Computes points\n\tvar p0x = p0.x - floorx / 2 + spacing * nx;\n\tvar p0y = p0.y - floory / 2 + spacing * ny;\n\tvar p1x = p0x + floorx;\n\tvar p1y = p0y + floory;\n\tvar p2x = p1x + basex;\n\tvar p2y = p1y + basey;\n\tvar p3x = p2x + floorx;\n\tvar p3y = p2y + floory;\n\t// p4 not necessary\n\tvar p5x = p3x - 3 * floorx;\n\tvar p5y = p3y - 3 * floory;\n\t\n\tc.begin();\n\tc.moveTo(p0x, p0y);\n\tc.lineTo(p1x, p1y);\n\tc.lineTo(p2x, p2y);\n\tc.lineTo(p3x, p3y);\n\tc.lineTo(pe.x - spacing * nx, pe.y - spacing * ny);\n\tc.lineTo(p5x, p5y);\n\tc.lineTo(p5x + floorx, p5y + floory);\n\tc.close();\n\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxArrow = typeof mxArrow !== 'undefined' ? mxArrow : undefined;\n"]}