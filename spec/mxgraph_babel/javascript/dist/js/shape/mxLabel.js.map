{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/shape/mxLabel.js"],"names":["mxLabel","bounds","fill","stroke","strokewidth","mxRectangleShape","call","mxUtils","extend","prototype","imageSize","mxConstants","DEFAULT_IMAGESIZE","spacing","indicatorSize","indicatorSpacing","init","container","mxShape","apply","arguments","indicatorShape","indicator","dialect","node","redraw","indicatorColor","indicatorStrokeColor","gradient","indicatorGradientColor","direction","indicatorDirection","isHtmlAllowed","paintForeground","c","x","y","w","h","paintImage","paintIndicator","image","getImageBounds","width","height","align","getValue","style","STYLE_IMAGE_ALIGN","ALIGN_LEFT","valign","STYLE_IMAGE_VERTICAL_ALIGN","ALIGN_MIDDLE","getNumber","STYLE_IMAGE_WIDTH","STYLE_IMAGE_HEIGHT","STYLE_SPACING","ALIGN_CENTER","ALIGN_RIGHT","ALIGN_TOP","ALIGN_BOTTOM","mxRectangle","getIndicatorBounds","paint","indicatorImage","STYLE_INDICATOR_WIDTH","STYLE_INDICATOR_HEIGHT","redrawHtmlShape","hasChildNodes","removeChild","lastChild","document","createElement","position","setAttribute","left","Math","round","top","src","appendChild","__mxOutput","undefined"],"mappings":"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","file":"mxLabel.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLabel\n *\n * Extends <mxShape> to implement an image shape with a label.\n * This shape is registered under <mxConstants.SHAPE_LABEL> in\n * <mxCellRenderer>.\n * \n * Constructor: mxLabel\n *\n * Constructs a new label shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxLabel(bounds, fill, stroke, strokewidth)\n{\n\tmxRectangleShape.call(this, bounds, fill, stroke, strokewidth);\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxLabel, mxRectangleShape);\n\n/**\n * Variable: imageSize\n *\n * Default width and height for the image. Default is\n * <mxConstants.DEFAULT_IMAGESIZE>.\n */\nmxLabel.prototype.imageSize = mxConstants.DEFAULT_IMAGESIZE;\n\n/**\n * Variable: spacing\n *\n * Default value for image spacing. Default is 2.\n */\nmxLabel.prototype.spacing = 2;\n\n/**\n * Variable: indicatorSize\n *\n * Default width and height for the indicicator. Default is 10.\n */\nmxLabel.prototype.indicatorSize = 10;\n\n/**\n * Variable: indicatorSpacing\n *\n * Default spacing between image and indicator. Default is 2.\n */\nmxLabel.prototype.indicatorSpacing = 2;\n\n/**\n * Function: init\n *\n * Initializes the shape and the <indicator>.\n */\nmxLabel.prototype.init = function(container)\n{\n\tmxShape.prototype.init.apply(this, arguments);\n\n\tif (this.indicatorShape != null)\n\t{\n\t\tthis.indicator = new this.indicatorShape();\n\t\tthis.indicator.dialect = this.dialect;\n\t\tthis.indicator.init(this.node);\n\t}\n};\n\n/**\n * Function: redraw\n *\n * Reconfigures this shape. This will update the colors of the indicator\n * and reconfigure it if required.\n */\nmxLabel.prototype.redraw = function()\n{\n\tif (this.indicator != null)\n\t{\n\t\tthis.indicator.fill = this.indicatorColor;\n\t\tthis.indicator.stroke = this.indicatorStrokeColor;\n\t\tthis.indicator.gradient = this.indicatorGradientColor;\n\t\tthis.indicator.direction = this.indicatorDirection;\n\t}\n\t\n\tmxShape.prototype.redraw.apply(this, arguments);\n};\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true for non-rounded, non-rotated shapes with no glass gradient and\n * no indicator shape.\n */\nmxLabel.prototype.isHtmlAllowed = function()\n{\n\treturn mxRectangleShape.prototype.isHtmlAllowed.apply(this, arguments) &&\n\t\tthis.indicatorColor == null && this.indicatorShape == null;\n};\n\n/**\n * Function: paintForeground\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tthis.paintImage(c, x, y, w, h);\n\tthis.paintIndicator(c, x, y, w, h);\n\t\n\tmxRectangleShape.prototype.paintForeground.apply(this, arguments);\n};\n\n/**\n * Function: paintImage\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintImage = function(c, x, y, w, h)\n{\n\tif (this.image != null)\n\t{\n\t\tvar bounds = this.getImageBounds(x, y, w, h);\n\t\tc.image(bounds.x, bounds.y, bounds.width, bounds.height, this.image, false, false, false);\n\t}\n};\n\n/**\n * Function: getImageBounds\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.getImageBounds = function(x, y, w, h)\n{\n\tvar align = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_ALIGN, mxConstants.ALIGN_LEFT);\n\tvar valign = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE);\n\tvar width = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_WIDTH, mxConstants.DEFAULT_IMAGESIZE);\n\tvar height = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_HEIGHT, mxConstants.DEFAULT_IMAGESIZE);\n\tvar spacing = mxUtils.getNumber(this.style, mxConstants.STYLE_SPACING, this.spacing) + 5;\n\n\tif (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tx += (w - width) / 2;\n\t}\n\telse if (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tx += w - width - spacing;\n\t}\n\telse // default is left\n\t{\n\t\tx += spacing;\n\t}\n\n\tif (valign == mxConstants.ALIGN_TOP)\n\t{\n\t\ty += spacing;\n\t}\n\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\ty += h - height - spacing;\n\t}\n\telse // default is middle\n\t{\n\t\ty += (h - height) / 2;\n\t}\n\t\n\treturn new mxRectangle(x, y, width, height);\n};\n\n/**\n * Function: paintIndicator\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintIndicator = function(c, x, y, w, h)\n{\n\tif (this.indicator != null)\n\t{\n\t\tthis.indicator.bounds = this.getIndicatorBounds(x, y, w, h);\n\t\tthis.indicator.paint(c);\n\t}\n\telse if (this.indicatorImage != null)\n\t{\n\t\tvar bounds = this.getIndicatorBounds(x, y, w, h);\n\t\tc.image(bounds.x, bounds.y, bounds.width, bounds.height, this.indicatorImage, false, false, false);\n\t}\n};\n\n/**\n * Function: getIndicatorBounds\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.getIndicatorBounds = function(x, y, w, h)\n{\n\tvar align = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_ALIGN, mxConstants.ALIGN_LEFT);\n\tvar valign = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE);\n\tvar width = mxUtils.getNumber(this.style, mxConstants.STYLE_INDICATOR_WIDTH, this.indicatorSize);\n\tvar height = mxUtils.getNumber(this.style, mxConstants.STYLE_INDICATOR_HEIGHT, this.indicatorSize);\n\tvar spacing = this.spacing + 5;\t\t\n\t\n\tif (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tx += w - width - spacing;\n\t}\n\telse if (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tx += (w - width) / 2;\n\t}\n\telse // default is left\n\t{\n\t\tx += spacing;\n\t}\n\t\n\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\ty += h - height - spacing;\n\t}\n\telse if (valign == mxConstants.ALIGN_TOP)\n\t{\n\t\ty += spacing;\n\t}\n\telse // default is middle\n\t{\n\t\ty += (h - height) / 2;\n\t}\n\t\n\treturn new mxRectangle(x, y, width, height);\n};\n/**\n * Function: redrawHtmlShape\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.redrawHtmlShape = function()\n{\n\tmxRectangleShape.prototype.redrawHtmlShape.apply(this, arguments);\n\t\n\t// Removes all children\n\twhile(this.node.hasChildNodes())\n\t{\n\t\tthis.node.removeChild(this.node.lastChild);\n\t}\n\t\n\tif (this.image != null)\n\t{\n\t\tvar node = document.createElement('img');\n\t\tnode.style.position = 'relative';\n\t\tnode.setAttribute('border', '0');\n\t\t\n\t\tvar bounds = this.getImageBounds(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);\n\t\tbounds.x -= this.bounds.x;\n\t\tbounds.y -= this.bounds.y;\n\n\t\tnode.style.left = Math.round(bounds.x) + 'px';\n\t\tnode.style.top = Math.round(bounds.y) + 'px';\n\t\tnode.style.width = Math.round(bounds.width) + 'px';\n\t\tnode.style.height = Math.round(bounds.height) + 'px';\n\t\t\n\t\tnode.src = this.image;\n\t\t\n\t\tthis.node.appendChild(node);\n\t}\n};\n\n__mxOutput.mxLabel = typeof mxLabel !== 'undefined' ? mxLabel : undefined;\n"]}