{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/shape/mxMarker.js"],"names":["mxMarker","markers","addMarker","type","funct","createMarker","canvas","shape","pe","unitX","unitY","size","source","sw","filled","createArrow","widthFactor","endOffsetX","endOffsetY","pt","clone","x","y","f","mxConstants","ARROW_CLASSIC","ARROW_CLASSIC_THIN","begin","moveTo","lineTo","close","fillAndStroke","stroke","createOpenArrow","a","ellipse","diamond","swFactor","ARROW_DIAMOND","tk","__mxOutput","undefined"],"mappings":"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","file":"mxMarker.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxMarker =\n{\n\t/**\n\t * Class: mxMarker\n\t * \n\t * A static class that implements all markers for VML and SVG using a\n\t * registry. NOTE: The signatures in this class will change.\n\t * \n\t * Variable: markers\n\t * \n\t * Maps from markers names to functions to paint the markers.\n\t */\n\tmarkers: [],\n\t\n\t/**\n\t * Function: addMarker\n\t * \n\t * Adds a factory method that updates a given endpoint and returns a\n\t * function to paint the marker onto the given canvas.\n\t */\n\taddMarker: function(type, funct)\n\t{\n\t\tmxMarker.markers[type] = funct;\n\t},\n\t\n\t/**\n\t * Function: createMarker\n\t * \n\t * Returns a function to paint the given marker.\n\t */\n\tcreateMarker: function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\tvar funct = mxMarker.markers[type];\n\t\t\n\t\treturn (funct != null) ? funct(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) : null;\n\t}\n\n};\n\n/**\n * Adds the classic and block marker factory method.\n */\n(function()\n{\n\tfunction createArrow(widthFactor)\n\t{\n\t\twidthFactor = (widthFactor != null) ? widthFactor : 2;\n\t\t\n\t\treturn function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t\t{\n\t\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t\t// 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n\t\t\t// only half the strokewidth is processed ).\n\t\t\tvar endOffsetX = unitX * sw * 1.118;\n\t\t\tvar endOffsetY = unitY * sw * 1.118;\n\t\t\t\n\t\t\tunitX = unitX * (size + sw);\n\t\t\tunitY = unitY * (size + sw);\n\t\n\t\t\tvar pt = pe.clone();\n\t\t\tpt.x -= endOffsetX;\n\t\t\tpt.y -= endOffsetY;\n\t\t\t\n\t\t\tvar f = (type != mxConstants.ARROW_CLASSIC && type != mxConstants.ARROW_CLASSIC_THIN) ? 1 : 3 / 4;\n\t\t\tpe.x += -unitX * f - endOffsetX;\n\t\t\tpe.y += -unitY * f - endOffsetY;\n\t\t\t\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tcanvas.begin();\n\t\t\t\tcanvas.moveTo(pt.x, pt.y);\n\t\t\t\tcanvas.lineTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n\t\t\t\n\t\t\t\tif (type == mxConstants.ARROW_CLASSIC || type == mxConstants.ARROW_CLASSIC_THIN)\n\t\t\t\t{\n\t\t\t\t\tcanvas.lineTo(pt.x - unitX * 3 / 4, pt.y - unitY * 3 / 4);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tcanvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n\t\t\t\tcanvas.close();\n\t\n\t\t\t\tif (filled)\n\t\t\t\t{\n\t\t\t\t\tcanvas.fillAndStroke();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcanvas.stroke();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\t\n\tmxMarker.addMarker('classic', createArrow(2));\n\tmxMarker.addMarker('classicThin', createArrow(3));\n\tmxMarker.addMarker('block', createArrow(2));\n\tmxMarker.addMarker('blockThin', createArrow(3));\n\t\n\tfunction createOpenArrow(widthFactor)\n\t{\n\t\twidthFactor = (widthFactor != null) ? widthFactor : 2;\n\t\t\n\t\treturn function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t\t{\n\t\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t\t// 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n\t\t\t// only half the strokewidth is processed ).\n\t\t\tvar endOffsetX = unitX * sw * 1.118;\n\t\t\tvar endOffsetY = unitY * sw * 1.118;\n\t\t\t\n\t\t\tunitX = unitX * (size + sw);\n\t\t\tunitY = unitY * (size + sw);\n\t\t\t\n\t\t\tvar pt = pe.clone();\n\t\t\tpt.x -= endOffsetX;\n\t\t\tpt.y -= endOffsetY;\n\t\t\t\n\t\t\tpe.x += -endOffsetX * 2;\n\t\t\tpe.y += -endOffsetY * 2;\n\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tcanvas.begin();\n\t\t\t\tcanvas.moveTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n\t\t\t\tcanvas.lineTo(pt.x, pt.y);\n\t\t\t\tcanvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n\t\t\t\tcanvas.stroke();\n\t\t\t};\n\t\t}\n\t};\n\t\n\tmxMarker.addMarker('open', createOpenArrow(2));\n\tmxMarker.addMarker('openThin', createOpenArrow(3));\n\t\n\tmxMarker.addMarker('oval', function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\tvar a = size / 2;\n\t\t\n\t\tvar pt = pe.clone();\n\t\tpe.x -= unitX * a;\n\t\tpe.y -= unitY * a;\n\n\t\treturn function()\n\t\t{\n\t\t\tcanvas.ellipse(pt.x - a, pt.y - a, size, size);\n\t\t\t\t\t\t\n\t\t\tif (filled)\n\t\t\t{\n\t\t\t\tcanvas.fillAndStroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.stroke();\n\t\t\t}\n\t\t};\n\t});\n\n\tfunction diamond(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t// 45 degrees, 1/sin(45) = 1.4142 / 2 = 0.7071 ( / 2 allows for\n\t\t// only half the strokewidth is processed ). Or 0.9862 for thin diamond.\n\t\t// Note these values and the tk variable below are dependent, update\n\t\t// both together (saves trig hard coding it).\n\t\tvar swFactor = (type == mxConstants.ARROW_DIAMOND) ?  0.7071 : 0.9862;\n\t\tvar endOffsetX = unitX * sw * swFactor;\n\t\tvar endOffsetY = unitY * sw * swFactor;\n\t\t\n\t\tunitX = unitX * (size + sw);\n\t\tunitY = unitY * (size + sw);\n\t\t\n\t\tvar pt = pe.clone();\n\t\tpt.x -= endOffsetX;\n\t\tpt.y -= endOffsetY;\n\t\t\n\t\tpe.x += -unitX - endOffsetX;\n\t\tpe.y += -unitY - endOffsetY;\n\t\t\n\t\t// thickness factor for diamond\n\t\tvar tk = ((type == mxConstants.ARROW_DIAMOND) ?  2 : 3.4);\n\t\t\n\t\treturn function()\n\t\t{\n\t\t\tcanvas.begin();\n\t\t\tcanvas.moveTo(pt.x, pt.y);\n\t\t\tcanvas.lineTo(pt.x - unitX / 2 - unitY / tk, pt.y + unitX / tk - unitY / 2);\n\t\t\tcanvas.lineTo(pt.x - unitX, pt.y - unitY);\n\t\t\tcanvas.lineTo(pt.x - unitX / 2 + unitY / tk, pt.y - unitY / 2 - unitX / tk);\n\t\t\tcanvas.close();\n\t\t\t\n\t\t\tif (filled)\n\t\t\t{\n\t\t\t\tcanvas.fillAndStroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.stroke();\n\t\t\t}\n\t\t};\n\t};\n\n\tmxMarker.addMarker('diamond', diamond);\n\tmxMarker.addMarker('diamondThin', diamond);\n})();\n\n__mxOutput.mxMarker = typeof mxMarker !== 'undefined' ? mxMarker : undefined;\n"]}