{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/shape/mxCylinder.js"],"names":["mxCylinder","bounds","fill","stroke","strokewidth","mxShape","call","mxUtils","extend","prototype","maxHeight","svgStrokeTolerance","paintVertexShape","c","x","y","w","h","translate","begin","redrawPath","fillAndStroke","outline","style","getValue","mxConstants","STYLE_BACKGROUND_OUTLINE","setShadow","getCylinderSize","Math","min","round","isForeground","dy","moveTo","curveTo","lineTo","close","__mxOutput","undefined"],"mappings":"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","file":"mxCylinder.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCylinder\n *\n * Extends <mxShape> to implement an cylinder shape. If a\n * custom shape with one filled area and an overlay path is\n * needed, then this shape's <redrawPath> should be overridden.\n * This shape is registered under <mxConstants.SHAPE_CYLINDER>\n * in <mxCellRenderer>.\n * \n * Constructor: mxCylinder\n *\n * Constructs a new cylinder shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxCylinder(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxCylinder, mxShape);\n\n/**\n * Variable: maxHeight\n *\n * Defines the maximum height of the top and bottom part\n * of the cylinder shape.\n */\nmxCylinder.prototype.maxHeight = 40;\n\n/**\n * Variable: svgStrokeTolerance\n *\n * Sets stroke tolerance to 0 for SVG.\n */\nmxCylinder.prototype.svgStrokeTolerance = 0;\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxCylinder.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.translate(x, y);\n\tc.begin();\n\tthis.redrawPath(c, x, y, w, h, false);\n\tc.fillAndStroke();\n\t\n\tif (!this.outline || this.style == null || mxUtils.getValue(\n\t\tthis.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0)\n\t{\n\t\tc.setShadow(false);\n\t\tc.begin();\n\t\tthis.redrawPath(c, x, y, w, h, true);\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCylinder.prototype.getCylinderSize = function(x, y, w, h)\n{\n\treturn Math.min(this.maxHeight, Math.round(h / 5));\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCylinder.prototype.redrawPath = function(c, x, y, w, h, isForeground)\n{\n\tvar dy = this.getCylinderSize(x, y, w, h);\n\t\n\tif ((isForeground && this.fill != null) || (!isForeground && this.fill == null))\n\t{\n\t\tc.moveTo(0, dy);\n\t\tc.curveTo(0, 2 * dy, w, 2 * dy, w, dy);\n\t\t\n\t\t// Needs separate shapes for correct hit-detection\n\t\tif (!isForeground)\n\t\t{\n\t\t\tc.stroke();\n\t\t\tc.begin();\n\t\t}\n\t}\n\t\n\tif (!isForeground)\n\t{\n\t\tc.moveTo(0, dy);\n\t\tc.curveTo(0, -dy / 3, w, -dy / 3, w, dy);\n\t\tc.lineTo(w, h - dy);\n\t\tc.curveTo(w, h + dy / 3, 0, h + dy / 3, 0, h - dy);\n\t\tc.close();\n\t}\n};\n\n__mxOutput.mxCylinder = typeof mxCylinder !== 'undefined' ? mxCylinder : undefined;\n"]}