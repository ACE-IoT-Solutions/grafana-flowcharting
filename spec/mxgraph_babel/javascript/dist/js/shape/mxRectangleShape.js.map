{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/shape/mxRectangleShape.js"],"names":["mxRectangleShape","bounds","fill","stroke","strokewidth","mxShape","call","mxUtils","extend","prototype","isHtmlAllowed","events","style","getValue","mxConstants","STYLE_POINTER_EVENTS","isRounded","glass","rotation","NONE","paintBackground","c","x","y","w","h","pointerEvents","r","STYLE_ABSOLUTE_ARCSIZE","Math","min","STYLE_ARCSIZE","LINE_ARCSIZE","f","RECTANGLE_ROUNDING_FACTOR","roundrect","rect","fillAndStroke","isRoundable","paintForeground","outline","paintGlassEffect","getArcSize","__mxOutput","undefined"],"mappings":"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","file":"mxRectangleShape.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRectangleShape\n *\n * Extends <mxShape> to implement a rectangle shape.\n * This shape is registered under <mxConstants.SHAPE_RECTANGLE>\n * in <mxCellRenderer>.\n * \n * Constructor: mxRectangleShape\n *\n * Constructs a new rectangle shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxRectangleShape(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxRectangleShape, mxShape);\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true for non-rounded, non-rotated shapes with no glass gradient.\n */\nmxRectangleShape.prototype.isHtmlAllowed = function()\n{\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\t\t\n\t}\n\t\n\treturn !this.isRounded && !this.glass && this.rotation == 0 && (events ||\n\t\t(this.fill != null && this.fill != mxConstants.NONE));\n};\n\n/**\n * Function: paintBackground\n * \n * Generic background painting implementation.\n */\nmxRectangleShape.prototype.paintBackground = function(c, x, y, w, h)\n{\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\t\t\n\t}\n\t\n\tif (events || (this.fill != null && this.fill != mxConstants.NONE) ||\n\t\t(this.stroke != null && this.stroke != mxConstants.NONE))\n\t{\n\t\tif (!events && (this.fill == null || this.fill == mxConstants.NONE))\n\t\t{\n\t\t\tc.pointerEvents = false;\n\t\t}\n\t\t\n\t\tif (this.isRounded)\n\t\t{\n\t\t\tvar r = 0;\n\t\t\t\n\t\t\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t\t\t{\n\t\t\t\tr = Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE,\n\t\t\t\t\tmxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\t\t\t\tr = Math.min(w * f, h * f);\n\t\t\t}\n\t\t\t\n\t\t\tc.roundrect(x, y, w, h, r, r);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.rect(x, y, w, h);\n\t\t}\n\t\t\t\n\t\tc.fillAndStroke();\n\t}\n};\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxRectangleShape.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn true;\n};\n\n/**\n * Function: paintForeground\n * \n * Generic background painting implementation.\n */\nmxRectangleShape.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tif (this.glass && !this.outline && this.fill != null && this.fill != mxConstants.NONE)\n\t{\n\t\tthis.paintGlassEffect(c, x, y, w, h, this.getArcSize(w + this.strokewidth, h + this.strokewidth));\n\t}\n};\n\n__mxOutput.mxRectangleShape = typeof mxRectangleShape !== 'undefined' ? mxRectangleShape : undefined;\n"]}