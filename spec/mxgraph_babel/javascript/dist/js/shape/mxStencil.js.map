{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/shape/mxStencil.js"],"names":["mxStencil","desc","parseDescription","parseConstraints","defaultLocalized","allowEval","prototype","constraints","aspect","w0","h0","bgNode","fgNode","strokewidth","getElementsByTagName","Number","getAttribute","sw","conns","tmp","mxUtils","getChildNodes","length","i","push","parseConstraint","node","x","y","perimeter","name","mxConnectionConstraint","mxPoint","evaluateTextAttribute","attribute","shape","result","evaluateAttribute","loc","mxResources","get","text","getTextContent","funct","eval","drawShape","canvas","w","h","direction","getValue","style","mxConstants","STYLE_DIRECTION","computeAspect","minScale","Math","min","width","height","getNumber","STYLE_STROKEWIDTH","setStrokeWidth","drawChildren","outline","STYLE_BACKGROUND_OUTLINE","disableShadow","paint","firstChild","nodeType","NODETYPE_ELEMENT","drawNode","nextSibling","x0","y0","sx","sy","inverse","DIRECTION_NORTH","DIRECTION_SOUTH","delta","mxRectangle","nodeName","save","restore","begin","childNode","close","moveTo","lineTo","quadTo","curveTo","arcTo","rect","arcsize","RECTANGLE_ROUNDING_FACTOR","factor","r","roundrect","ellipse","src","image","str","rotation","dr","flipH","STYLE_FLIPH","flipV","STYLE_FLIPV","stencil","mxStencilRegistry","getStencil","fillAndStroke","fill","stroke","s","setDashed","value","split","pat","join","setDashPattern","setStrokeColor","setLineCap","setLineJoin","setMiterLimit","setFillColor","setAlpha","setFontColor","setFontStyle","setFontFamily","setFontSize","setShadow","__mxOutput","undefined"],"mappings":"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","file":"mxStencil.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStencil\n *\n * Implements a generic shape which is based on a XML node as a description.\n * \n * shape:\n * \n * The outer element is *shape*, that has attributes:\n * \n * - \"name\", string, required. The stencil name that uniquely identifies the shape.\n * - \"w\" and \"h\" are optional decimal view bounds. This defines your co-ordinate\n * system for the graphics operations in the shape. The default is 100,100.\n * - \"aspect\", optional string. Either \"variable\", the default, or \"fixed\". Fixed\n * means always render the shape with the aspect ratio defined by the ratio w/h.\n * Variable causes the ratio to match that of the geometry of the current vertex.\n * - \"strokewidth\", optional string. Either an integer or the string \"inherit\".\n * \"inherit\" indicates that the strokeWidth of the cell is only changed on scaling,\n * not on resizing. Default is \"1\".\n * If numeric values are used, the strokeWidth of the cell is changed on both\n * scaling and resizing and the value defines the multiple that is applied to\n * the width.\n * \n * connections:\n * \n * If you want to define specific fixed connection points on the shape use the\n * *connections* element. Each *constraint* element within connections defines\n * a fixed connection point on the shape. Constraints have attributes:\n * \n * - \"perimeter\", required. 1 or 0. 0 sets the connection point where specified\n * by x,y. 1 Causes the position of the connection point to be extrapolated from\n * the center of the shape, through x,y to the point of intersection with the\n * perimeter of the shape.\n * - \"x\" and \"y\" are the position of the fixed point relative to the bounds of\n * the shape. They can be automatically adjusted if perimeter=1. So, (0,0) is top\n * left, (0.5,0.5) the center, (1,0.5) the center of the right hand edge of the\n * bounds, etc. Values may be less than 0 or greater than 1 to be positioned\n * outside of the shape.\n * - \"name\", optional string. A unique identifier for the port on the shape.\n * \n * background and foreground:\n * \n * The path of the graphics drawing is split into two elements, *foreground* and\n * *background*. The split is to define which part any shadow applied to the shape\n * is derived from (the background). This, generally, means the background is the\n * line tracing of the outside of the shape, but not always.\n * \n * Any stroke, fill or fillstroke of a background must be the first element of the\n * foreground element, they must not be used within *background*. If the background\n * is empty, this is not required.\n * \n * Because the background cannot have any fill or stroke, it can contain only one\n * *path*, *rect*, *roundrect* or *ellipse* element (or none). It can also not\n * include *image*, *text* or *include-shape*.\n * \n * Note that the state, styling and drawing in mxGraph stencils is very close in\n * design to that of HTML 5 canvas. Tutorials on this subject, if you're not\n * familiar with the topic, will give a good high-level introduction to the\n * concepts used.\n * \n * State:\n * \n * Rendering within the foreground and background elements has the concept of\n * state. There are two types of operations other than state save/load, styling\n * and drawing. The styling operations change the current state, so you can save\n * the current state with <save/> and pull the last saved state from the state\n * stack using <restore/>.\n * \n * Styling:\n * \n * The elements that change colors within the current state all take a hash\n * prefixed hex color code (\"#FFEA80\").\n * \n * - *strokecolor*, this sets the color that drawing paths will be rendered in\n * when a stroke or fillstroke command is issued.\n * - *fillcolor*, this sets the color that the inside of closed paths will be\n * rendered in when a fill or fillstroke command is issued.\n * - *fontcolor*, this sets the color that fonts are rendered in when text is drawn.\n * \n * *alpha* defines the degree of transparency used between 1.0 for fully opaque\n * and 0.0 for fully transparent.\n * \n * *strokewidth* defines the integer thickness of drawing elements rendered by\n * stroking. Use fixed=\"1\" to apply the value as-is, without scaling.\n * \n * *dashed* is \"1\" for dashing enabled and \"0\" for disabled.\n * \n * When *dashed* is enabled the current dash pattern, defined by *dashpattern*,\n * is used on strokes. dashpattern is a sequence of space separated \"on, off\"\n * lengths that define what distance to paint the stroke for, then what distance\n * to paint nothing for, repeat... The default is \"3 3\". You could define a more\n * complex pattern with \"5 3 2 6\", for example. Generally, it makes sense to have\n * an even number of elements in the dashpattern, but that's not required.\n * \n * *linejoin*, *linecap* and *miterlimit* are best explained by the Mozilla page\n * on Canvas styling (about halfway down). The values are all the same except we\n * use \"flat\" for linecap, instead of Canvas' \"butt\".\n * \n * For font styling there are.\n * \n * - *fontsize*, an integer,\n * - *fontstyle*, an ORed bit pattern of bold (1), italic (2) and underline (4),\n * i.e bold underline is \"5\".\n * - *fontfamily*, is a string defining the typeface to be used.\n * \n * Drawing:\n * \n * Most drawing is contained within a *path* element. Again, the graphic\n * primitives are very similar to that of HTML 5 canvas.\n * \n * - *move* to attributes required decimals (x,y).\n * - *line* to attributes required decimals (x,y).\n * - *quad* to required decimals (x2,y2) via control point required decimals\n * (x1,y1).\n * - *curve* to required decimals (x3,y3), via control points required decimals\n * (x1,y1) and (x2,y2).\n * - *arc*, this doesn't follow the HTML Canvas signatures, instead it's a copy\n * of the SVG arc command. The SVG specification documentation gives the best\n * description of its behaviors. The attributes are named identically, they are\n * decimals and all required.\n * - *close* ends the current subpath and causes an automatic straight line to\n * be drawn from the current point to the initial point of the current subpath.\n * \n * Complex drawing:\n * \n * In addition to the graphics primitive operations there are non-primitive\n * operations. These provide an easy method to draw some basic shapes.\n * \n * - *rect*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals\n * - *roundrect*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals. Also\n * \"arcsize\" an optional decimal attribute defining how large, the corner curves\n * are.\n * - *ellipse*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals.\n * \n * Note that these 3 shapes and all paths must be followed by either a fill,\n * stroke, or fillstroke.\n * \n * Text:\n * \n * *text* elements have the following attributes.\n * \n * - \"str\", the text string to display, required.\n * - \"x\" and \"y\", the decimal location (x,y) of the text element, required.\n * - \"align\", the horizontal alignment of the text element, either \"left\",\n * \"center\" or \"right\". Optional, default is \"left\".\n * - \"valign\", the vertical alignment of the text element, either \"top\", \"middle\"\n * or \"bottom\". Optional, default is \"top\".\n * - \"localized\", 0 or 1, if 1 then the \"str\" actually contains a key to use to\n * fetch the value out of mxResources. Optional, default is\n * <mxStencil.defaultLocalized>.\n * - \"vertical\", 0 or 1, if 1 the label is rendered vertically (rotated by 90\n * degrees). Optional, default is 0.\n * - \"rotation\", angle in degrees (0 to 360). The angle to rotate the text by.\n * Optional, default is 0.\n * - \"align-shape\", 0 or 1, if 0 ignore the rotation of the shape when setting\n * the text rotation. Optional, default is 1.\n * \n * If <allowEval> is true, then the text content of the this element can define\n * a function which is invoked with the shape as the only argument and returns\n * the value for the text element (ignored if the str attribute is not null).\n * \n * Images:\n * \n * *image* elements can either be external URLs, or data URIs, where supported\n * (not in IE 7-). Attributes are:\n * \n * - \"src\", required string. Either a data URI or URL.\n * - \"x\", \"y\", required decimals. The (x,y) position of the image.\n * - \"w\", \"h\", required decimals. The width and height of the image.\n * - \"flipH\" and \"flipV\", optional 0 or 1. Whether to flip the image along the\n * horizontal/vertical axis. Default is 0 for both.\n * \n * If <allowEval> is true, then the text content of the this element can define\n * a function which is invoked with the shape as the only argument and returns\n * the value for the image source (ignored if the src attribute is not null).\n * \n * Sub-shapes:\n * \n * *include-shape* allow stencils to be rendered within the current stencil by\n * referencing the sub-stencil by name. Attributes are:\n * \n * - \"name\", required string. The unique shape name of the stencil.\n * - \"x\", \"y\", \"w\", \"h\", required decimals. The (x,y) position of the sub-shape\n * and its width and height.\n * \n * Constructor: mxStencil\n * \n * Constructs a new generic shape by setting <desc> to the given XML node and\n * invoking <parseDescription> and <parseConstraints>.\n * \n * Parameters:\n * \n * desc - XML node that contains the stencil description.\n */\nfunction mxStencil(desc)\n{\n\tthis.desc = desc;\n\tthis.parseDescription();\n\tthis.parseConstraints();\n};\n\n/**\n * Variable: defaultLocalized\n * \n * Static global variable that specifies the default value for the localized\n * attribute of the text element. Default is false.\n */\nmxStencil.defaultLocalized = false;\n\n/**\n * Function: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content and images. Default is false. Set this to true\n * if stencils can not contain user input.\n */\nmxStencil.allowEval = false;\n\n/**\n * Variable: desc\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.desc = null;\n\n/**\n * Variable: constraints\n * \n * Holds an array of <mxConnectionConstraints> as defined in the shape.\n */\nmxStencil.prototype.constraints = null;\n\n/**\n * Variable: aspect\n *\n * Holds the aspect of the shape. Default is 'auto'.\n */\nmxStencil.prototype.aspect = null;\n\n/**\n * Variable: w0\n *\n * Holds the width of the shape. Default is 100.\n */\nmxStencil.prototype.w0 = null;\n\n/**\n * Variable: h0\n *\n * Holds the height of the shape. Default is 100.\n */\nmxStencil.prototype.h0 = null;\n\n/**\n * Variable: bgNodes\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.bgNode = null;\n\n/**\n * Variable: fgNodes\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.fgNode = null;\n\n/**\n * Variable: strokewidth\n *\n * Holds the strokewidth direction from the description.\n */\nmxStencil.prototype.strokewidth = null;\n\n/**\n * Function: parseDescription\n *\n * Reads <w0>, <h0>, <aspect>, <bgNodes> and <fgNodes> from <desc>.\n */\nmxStencil.prototype.parseDescription = function()\n{\n\t// LATER: Preprocess nodes for faster painting\n\tthis.fgNode = this.desc.getElementsByTagName('foreground')[0];\n\tthis.bgNode = this.desc.getElementsByTagName('background')[0];\n\tthis.w0 = Number(this.desc.getAttribute('w') || 100);\n\tthis.h0 = Number(this.desc.getAttribute('h') || 100);\n\t\n\t// Possible values for aspect are: variable and fixed where\n\t// variable means fill the available space and fixed means\n\t// use w0 and h0 to compute the aspect.\n\tvar aspect = this.desc.getAttribute('aspect');\n\tthis.aspect = (aspect != null) ? aspect : 'variable';\n\t\n\t// Possible values for strokewidth are all numbers and \"inherit\"\n\t// where the inherit means take the value from the style (ie. the\n\t// user-defined stroke-width). Note that the strokewidth is scaled\n\t// by the minimum scaling that is used to draw the shape (sx, sy).\n\tvar sw = this.desc.getAttribute('strokewidth');\n\tthis.strokewidth = (sw != null) ? sw : '1';\n};\n\n/**\n * Function: parseConstraints\n *\n * Reads the constraints from <desc> into <constraints> using\n * <parseConstraint>.\n */\nmxStencil.prototype.parseConstraints = function()\n{\n\tvar conns = this.desc.getElementsByTagName('connections')[0];\n\t\n\tif (conns != null)\n\t{\n\t\tvar tmp = mxUtils.getChildNodes(conns);\n\t\t\n\t\tif (tmp != null && tmp.length > 0)\n\t\t{\n\t\t\tthis.constraints = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < tmp.length; i++)\n\t\t\t{\n\t\t\t\tthis.constraints.push(this.parseConstraint(tmp[i]));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: parseConstraint\n *\n * Parses the given XML node and returns its <mxConnectionConstraint>.\n */\nmxStencil.prototype.parseConstraint = function(node)\n{\n\tvar x = Number(node.getAttribute('x'));\n\tvar y = Number(node.getAttribute('y'));\n\tvar perimeter = node.getAttribute('perimeter') == '1';\n\tvar name = node.getAttribute('name');\n\t\n\treturn new mxConnectionConstraint(new mxPoint(x, y), perimeter, name);\n};\n\n/**\n * Function: evaluateTextAttribute\n * \n * Gets the given attribute as a text. The return value from <evaluateAttribute>\n * is used as a key to <mxResources.get> if the localized attribute in the text\n * node is 1 or if <defaultLocalized> is true.\n */\nmxStencil.prototype.evaluateTextAttribute = function(node, attribute, shape)\n{\n\tvar result = this.evaluateAttribute(node, attribute, shape);\n\tvar loc = node.getAttribute('localized');\n\t\n\tif ((mxStencil.defaultLocalized && loc == null) || loc == '1')\n\t{\n\t\tresult = mxResources.get(result);\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: evaluateAttribute\n *\n * Gets the attribute for the given name from the given node. If the attribute\n * does not exist then the text content of the node is evaluated and if it is\n * a function it is invoked with <shape> as the only argument and the return\n * value is used as the attribute value to be returned.\n */\nmxStencil.prototype.evaluateAttribute = function(node, attribute, shape)\n{\n\tvar result = node.getAttribute(attribute);\n\t\n\tif (result == null)\n\t{\n\t\tvar text = mxUtils.getTextContent(node);\n\t\t\n\t\tif (text != null && mxStencil.allowEval)\n\t\t{\n\t\t\tvar funct = mxUtils.eval(text);\n\t\t\t\n\t\t\tif (typeof(funct) == 'function')\n\t\t\t{\n\t\t\t\tresult = funct(shape);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: drawShape\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawShape = function(canvas, shape, x, y, w, h)\n{\n\t// TODO: Internal structure (array of special structs?), relative and absolute\n\t// coordinates (eg. note shape, process vs star, actor etc.), text rendering\n\t// and non-proportional scaling, how to implement pluggable edge shapes\n\t// (start, segment, end blocks), pluggable markers, how to implement\n\t// swimlanes (title area) with this API, add icon, horizontal/vertical\n\t// label, indicator for all shapes, rotation\n\tvar direction = mxUtils.getValue(shape.style, mxConstants.STYLE_DIRECTION, null);\n\tvar aspect = this.computeAspect(shape.style, x, y, w, h, direction);\n\tvar minScale = Math.min(aspect.width, aspect.height);\n\tvar sw = (this.strokewidth == 'inherit') ?\n\t\t\tNumber(mxUtils.getNumber(shape.style, mxConstants.STYLE_STROKEWIDTH, 1)) :\n\t\t\tNumber(this.strokewidth) * minScale;\n\tcanvas.setStrokeWidth(sw);\n\n\tthis.drawChildren(canvas, shape, x, y, w, h, this.bgNode, aspect, false, true);\n\tthis.drawChildren(canvas, shape, x, y, w, h, this.fgNode, aspect, true,\n\t\t!shape.outline || shape.style == null || mxUtils.getValue(\n\t\tshape.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0);\n};\n\n/**\n * Function: drawChildren\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawChildren = function(canvas, shape, x, y, w, h, node, aspect, disableShadow, paint)\n{\n\tif (node != null && w > 0 && h > 0)\n\t{\n\t\tvar tmp = node.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t{\n\t\t\t\tthis.drawNode(canvas, shape, tmp, aspect, disableShadow, paint);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\t}\n};\n\n/**\n * Function: computeAspect\n *\n * Returns a rectangle that contains the offset in x and y and the horizontal\n * and vertical scale in width and height used to draw this shape inside the\n * given <mxRectangle>.\n * \n * Parameters:\n * \n * shape - <mxShape> to be drawn.\n * bounds - <mxRectangle> that should contain the stencil.\n * direction - Optional direction of the shape to be darwn.\n */\nmxStencil.prototype.computeAspect = function(shape, x, y, w, h, direction)\n{\n\tvar x0 = x;\n\tvar y0 = y;\n\tvar sx = w / this.w0;\n\tvar sy = h / this.h0;\n\t\n\tvar inverse = (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH);\n\n\tif (inverse)\n\t{\n\t\tsy = w / this.h0;\n\t\tsx = h / this.w0;\n\t\t\n\t\tvar delta = (w - h) / 2;\n\n\t\tx0 += delta;\n\t\ty0 -= delta;\n\t}\n\n\tif (this.aspect == 'fixed')\n\t{\n\t\tsy = Math.min(sx, sy);\n\t\tsx = sy;\n\t\t\n\t\t// Centers the shape inside the available space\n\t\tif (inverse)\n\t\t{\n\t\t\tx0 += (h - this.w0 * sx) / 2;\n\t\t\ty0 += (w - this.h0 * sy) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx0 += (w - this.w0 * sx) / 2;\n\t\t\ty0 += (h - this.h0 * sy) / 2;\n\t\t}\n\t}\n\n\treturn new mxRectangle(x0, y0, sx, sy);\n};\n\n/**\n * Function: drawNode\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawNode = function(canvas, shape, node, aspect, disableShadow, paint)\n{\n\tvar name = node.nodeName;\n\tvar x0 = aspect.x;\n\tvar y0 = aspect.y;\n\tvar sx = aspect.width;\n\tvar sy = aspect.height;\n\tvar minScale = Math.min(sx, sy);\n\t\n\tif (name == 'save')\n\t{\n\t\tcanvas.save();\n\t}\n\telse if (name == 'restore')\n\t{\n\t\tcanvas.restore();\n\t}\n\telse if (paint)\n\t{\n\t\tif (name == 'path')\n\t\t{\n\t\t\tcanvas.begin();\n\t\n\t\t\t// Renders the elements inside the given path\n\t\t\tvar childNode = node.firstChild;\n\t\t\t\n\t\t\twhile (childNode != null)\n\t\t\t{\n\t\t\t\tif (childNode.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\tthis.drawNode(canvas, shape, childNode, aspect, disableShadow, paint);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tchildNode = childNode.nextSibling;\n\t\t\t}\n\t\t}\n\t\telse if (name == 'close')\n\t\t{\n\t\t\tcanvas.close();\n\t\t}\n\t\telse if (name == 'move')\n\t\t{\n\t\t\tcanvas.moveTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'line')\n\t\t{\n\t\t\tcanvas.lineTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'quad')\n\t\t{\n\t\t\tcanvas.quadTo(x0 + Number(node.getAttribute('x1')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y1')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x2')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y2')) * sy);\n\t\t}\n\t\telse if (name == 'curve')\n\t\t{\n\t\t\tcanvas.curveTo(x0 + Number(node.getAttribute('x1')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y1')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x2')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y2')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x3')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y3')) * sy);\n\t\t}\n\t\telse if (name == 'arc')\n\t\t{\n\t\t\tcanvas.arcTo(Number(node.getAttribute('rx')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('ry')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('x-axis-rotation')),\n\t\t\t\t\tNumber(node.getAttribute('large-arc-flag')),\n\t\t\t\t\tNumber(node.getAttribute('sweep-flag')),\n\t\t\t\t\tx0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'rect')\n\t\t{\n\t\t\tcanvas.rect(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('h')) * sy);\n\t\t}\n\t\telse if (name == 'roundrect')\n\t\t{\n\t\t\tvar arcsize = Number(node.getAttribute('arcsize'));\n\t\n\t\t\tif (arcsize == 0)\n\t\t\t{\n\t\t\t\tarcsize = mxConstants.RECTANGLE_ROUNDING_FACTOR * 100;\n\t\t\t}\n\t\t\t\n\t\t\tvar w = Number(node.getAttribute('w')) * sx;\n\t\t\tvar h = Number(node.getAttribute('h')) * sy;\n\t\t\tvar factor = Number(arcsize) / 100;\n\t\t\tvar r = Math.min(w * factor, h * factor);\n\t\t\t\n\t\t\tcanvas.roundrect(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tw, h, r, r);\n\t\t}\n\t\telse if (name == 'ellipse')\n\t\t{\n\t\t\tcanvas.ellipse(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\tNumber(node.getAttribute('h')) * sy);\n\t\t}\n\t\telse if (name == 'image')\n\t\t{\n\t\t\tif (!shape.outline)\n\t\t\t{\n\t\t\t\tvar src = this.evaluateAttribute(node, 'src', shape);\n\t\t\t\t\n\t\t\t\tcanvas.image(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('h')) * sy,\n\t\t\t\t\tsrc, false, node.getAttribute('flipH') == '1',\n\t\t\t\t\tnode.getAttribute('flipV') == '1');\n\t\t\t}\n\t\t}\n\t\telse if (name == 'text')\n\t\t{\n\t\t\tif (!shape.outline)\n\t\t\t{\n\t\t\t\tvar str = this.evaluateTextAttribute(node, 'str', shape);\n\t\t\t\tvar rotation = node.getAttribute('vertical') == '1' ? -90 : 0;\n\t\t\t\t\n\t\t\t\tif (node.getAttribute('align-shape') == '0')\n\t\t\t\t{\n\t\t\t\t\tvar dr = shape.rotation;\n\t\t\n\t\t\t\t\t// Depends on flipping\n\t\t\t\t\tvar flipH = mxUtils.getValue(shape.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tvar flipV = mxUtils.getValue(shape.style, mxConstants.STYLE_FLIPV, 0) == 1;\n\t\t\t\t\t\n\t\t\t\t\tif (flipH && flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\trotation -= dr;\n\t\t\t\t\t}\n\t\t\t\t\telse if (flipH || flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\trotation += dr;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\trotation -= dr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\trotation -= node.getAttribute('rotation');\n\t\t\n\t\t\t\tcanvas.text(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\t\t0, 0, str, node.getAttribute('align') || 'left',\n\t\t\t\t\t\tnode.getAttribute('valign') || 'top', false, '',\n\t\t\t\t\t\tnull, false, rotation);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'include-shape')\n\t\t{\n\t\t\tvar stencil = mxStencilRegistry.getStencil(node.getAttribute('name'));\n\t\t\t\n\t\t\tif (stencil != null)\n\t\t\t{\n\t\t\t\tvar x = x0 + Number(node.getAttribute('x')) * sx;\n\t\t\t\tvar y = y0 + Number(node.getAttribute('y')) * sy;\n\t\t\t\tvar w = Number(node.getAttribute('w')) * sx;\n\t\t\t\tvar h = Number(node.getAttribute('h')) * sy;\n\t\t\t\t\n\t\t\t\tstencil.drawShape(canvas, shape, x, y, w, h);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'fillstroke')\n\t\t{\n\t\t\tcanvas.fillAndStroke();\n\t\t}\n\t\telse if (name == 'fill')\n\t\t{\n\t\t\tcanvas.fill();\n\t\t}\n\t\telse if (name == 'stroke')\n\t\t{\n\t\t\tcanvas.stroke();\n\t\t}\n\t\telse if (name == 'strokewidth')\n\t\t{\n\t\t\tvar s = (node.getAttribute('fixed') == '1') ? 1 : minScale;\n\t\t\tcanvas.setStrokeWidth(Number(node.getAttribute('width')) * s);\n\t\t}\n\t\telse if (name == 'dashed')\n\t\t{\n\t\t\tcanvas.setDashed(node.getAttribute('dashed') == '1');\n\t\t}\n\t\telse if (name == 'dashpattern')\n\t\t{\n\t\t\tvar value = node.getAttribute('pattern');\n\t\t\t\n\t\t\tif (value != null)\n\t\t\t{\n\t\t\t\tvar tmp = value.split(' ');\n\t\t\t\tvar pat = [];\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < tmp.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (tmp[i].length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tpat.push(Number(tmp[i]) * minScale);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvalue = pat.join(' ');\n\t\t\t\tcanvas.setDashPattern(value);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'strokecolor')\n\t\t{\n\t\t\tcanvas.setStrokeColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'linecap')\n\t\t{\n\t\t\tcanvas.setLineCap(node.getAttribute('cap'));\n\t\t}\n\t\telse if (name == 'linejoin')\n\t\t{\n\t\t\tcanvas.setLineJoin(node.getAttribute('join'));\n\t\t}\n\t\telse if (name == 'miterlimit')\n\t\t{\n\t\t\tcanvas.setMiterLimit(Number(node.getAttribute('limit')));\n\t\t}\n\t\telse if (name == 'fillcolor')\n\t\t{\n\t\t\tcanvas.setFillColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'alpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'fontcolor')\n\t\t{\n\t\t\tcanvas.setFontColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'fontstyle')\n\t\t{\n\t\t\tcanvas.setFontStyle(node.getAttribute('style'));\n\t\t}\n\t\telse if (name == 'fontfamily')\n\t\t{\n\t\t\tcanvas.setFontFamily(node.getAttribute('family'));\n\t\t}\n\t\telse if (name == 'fontsize')\n\t\t{\n\t\t\tcanvas.setFontSize(Number(node.getAttribute('size')) * minScale);\n\t\t}\n\t\t\n\t\tif (disableShadow && (name == 'fillstroke' || name == 'fill' || name == 'stroke'))\n\t\t{\n\t\t\tdisableShadow = false;\n\t\t\tcanvas.setShadow(false);\n\t\t}\n\t}\n};\n\n__mxOutput.mxStencil = typeof mxStencil !== 'undefined' ? mxStencil : undefined;\n"]}