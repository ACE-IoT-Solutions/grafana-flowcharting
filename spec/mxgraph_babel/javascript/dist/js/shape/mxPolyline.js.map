{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/shape/mxPolyline.js"],"names":["mxPolyline","points","stroke","strokewidth","mxShape","call","mxUtils","extend","prototype","getRotation","getShapeRotation","isPaintBoundsInverted","paintEdgeShape","c","pts","style","mxConstants","STYLE_CURVED","paintLine","isRounded","paintCurvedLine","rounded","arcSize","getValue","STYLE_ARCSIZE","LINE_ARCSIZE","begin","addPoints","pt","n","length","moveTo","x","y","i","p0","p1","ix","iy","quadTo","__mxOutput","undefined"],"mappings":";;;;;AAAA;;;;AAIA;;;;;;;;;;;;;;;;;;;;AAoBA,WAASA,UAAT,CAAoBC,MAApB,EAA4BC,MAA5B,EAAoCC,WAApC,EACA;AACCC,YAAQC,IAAR,CAAa,IAAb;AACA,SAAKJ,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,WAAL,GAAoBA,eAAe,IAAhB,GAAwBA,WAAxB,GAAsC,CAAzD;AACA,G;;;AAAA;;AAED;;;AAGAG,cAAQC,MAAR,CAAeP,UAAf,EAA2BI,OAA3B;;AAEA;;;;;AAKAJ,iBAAWQ,SAAX,CAAqBC,WAArB,GAAmC,YACnC;AACC,eAAO,CAAP;AACA,OAHD;;AAKA;;;;;AAKAT,iBAAWQ,SAAX,CAAqBE,gBAArB,GAAwC,YACxC;AACC,eAAO,CAAP;AACA,OAHD;;AAKA;;;;;AAKAV,iBAAWQ,SAAX,CAAqBG,qBAArB,GAA6C,YAC7C;AACC,eAAO,KAAP;AACA,OAHD;;AAKA;;;;;AAKAX,iBAAWQ,SAAX,CAAqBI,cAArB,GAAsC,UAASC,CAAT,EAAYC,GAAZ,EACtC;AACC,YAAI,KAAKC,KAAL,IAAc,IAAd,IAAsB,KAAKA,KAAL,CAAWC,YAAYC,YAAvB,KAAwC,CAAlE,EACA;AACC,eAAKC,SAAL,CAAeL,CAAf,EAAkBC,GAAlB,EAAuB,KAAKK,SAA5B;AACA,SAHD,MAKA;AACC,eAAKC,eAAL,CAAqBP,CAArB,EAAwBC,GAAxB;AACA;AACD,OAVD;;AAYA;;;;;AAKAd,iBAAWQ,SAAX,CAAqBU,SAArB,GAAiC,UAASL,CAAT,EAAYC,GAAZ,EAAiBO,OAAjB,EACjC;AACC,YAAIC,UAAUhB,QAAQiB,QAAR,CAAiB,KAAKR,KAAtB,EAA6BC,YAAYQ,aAAzC,EAAwDR,YAAYS,YAApE,IAAoF,CAAlG;AACAZ,UAAEa,KAAF;AACA,aAAKC,SAAL,CAAed,CAAf,EAAkBC,GAAlB,EAAuBO,OAAvB,EAAgCC,OAAhC,EAAyC,KAAzC;AACAT,UAAEX,MAAF;AACA,OAND;;AAQA;;;;;AAKAF,iBAAWQ,SAAX,CAAqBY,eAArB,GAAuC,UAASP,CAAT,EAAYC,GAAZ,EACvC;AACCD,UAAEa,KAAF;;AAEA,YAAIE,KAAKd,IAAI,CAAJ,CAAT;AACA,YAAIe,IAAIf,IAAIgB,MAAZ;;AAEAjB,UAAEkB,MAAF,CAASH,GAAGI,CAAZ,EAAeJ,GAAGK,CAAlB;;AAEA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIL,IAAI,CAAxB,EAA2BK,GAA3B,EACA;AACC,cAAIC,KAAKrB,IAAIoB,CAAJ,CAAT;AACA,cAAIE,KAAKtB,IAAIoB,IAAI,CAAR,CAAT;AACA,cAAIG,KAAK,CAACF,GAAGH,CAAH,GAAOI,GAAGJ,CAAX,IAAgB,CAAzB;AACA,cAAIM,KAAK,CAACH,GAAGF,CAAH,GAAOG,GAAGH,CAAX,IAAgB,CAAzB;;AAEApB,YAAE0B,MAAF,CAASJ,GAAGH,CAAZ,EAAeG,GAAGF,CAAlB,EAAqBI,EAArB,EAAyBC,EAAzB;AACA;;AAED,YAAIH,KAAKrB,IAAIe,IAAI,CAAR,CAAT;AACA,YAAIO,KAAKtB,IAAIe,IAAI,CAAR,CAAT;;AAEAhB,UAAE0B,MAAF,CAASJ,GAAGH,CAAZ,EAAeG,GAAGF,CAAlB,EAAqBG,GAAGJ,CAAxB,EAA2BI,GAAGH,CAA9B;AACApB,UAAEX,MAAF;AACA,OAxBD;;AA0BAsC,iBAAWxC,UAAX,GAAwB,OAAOA,UAAP,KAAsB,WAAtB,GAAoCA,UAApC,GAAiDyC,SAAzE","file":"mxPolyline.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPolyline\n *\n * Extends <mxShape> to implement a polyline (a line with multiple points).\n * This shape is registered under <mxConstants.SHAPE_POLYLINE> in\n * <mxCellRenderer>.\n * \n * Constructor: mxPolyline\n *\n * Constructs a new polyline shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * stroke - String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxPolyline(points, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxPolyline, mxShape);\n\n/**\n * Function: getRotation\n * \n * Returns 0.\n */\nmxPolyline.prototype.getRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns 0.\n */\nmxPolyline.prototype.getShapeRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Returns false.\n */\nmxPolyline.prototype.isPaintBoundsInverted = function()\n{\n\treturn false;\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintEdgeShape = function(c, pts)\n{\n\tif (this.style == null || this.style[mxConstants.STYLE_CURVED] != 1)\n\t{\n\t\tthis.paintLine(c, pts, this.isRounded);\n\t}\n\telse\n\t{\n\t\tthis.paintCurvedLine(c, pts);\n\t}\n};\n\n/**\n * Function: paintLine\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintLine = function(c, pts, rounded)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tc.begin();\n\tthis.addPoints(c, pts, rounded, arcSize, false);\n\tc.stroke();\n};\n\n/**\n * Function: paintLine\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintCurvedLine = function(c, pts)\n{\n\tc.begin();\n\t\n\tvar pt = pts[0];\n\tvar n = pts.length;\n\t\n\tc.moveTo(pt.x, pt.y);\n\t\n\tfor (var i = 1; i < n - 2; i++)\n\t{\n\t\tvar p0 = pts[i];\n\t\tvar p1 = pts[i + 1];\n\t\tvar ix = (p0.x + p1.x) / 2;\n\t\tvar iy = (p0.y + p1.y) / 2;\n\t\t\n\t\tc.quadTo(p0.x, p0.y, ix, iy);\n\t}\n\t\n\tvar p0 = pts[n - 2];\n\tvar p1 = pts[n - 1];\n\t\n\tc.quadTo(p0.x, p0.y, p1.x, p1.y);\n\tc.stroke();\n};\n\n__mxOutput.mxPolyline = typeof mxPolyline !== 'undefined' ? mxPolyline : undefined;\n"]}