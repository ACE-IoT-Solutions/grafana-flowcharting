{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/shape/mxArrowConnector.js"],"names":["mxArrowConnector","points","fill","stroke","strokewidth","arrowWidth","spacing","endSize","mxShape","call","mxConstants","ARROW_WIDTH","arrowSpacing","ARROW_SPACING","startSize","ARROW_SIZE","mxUtils","extend","prototype","useSvgBoundingBox","resetStyles","apply","arguments","state","style","getNumber","STYLE_STARTSIZE","STYLE_ENDSIZE","augmentBoundingBox","bbox","w","getEdgeWidth","isMarkerStart","Math","max","getStartArrowWidth","isMarkerEnd","getEndArrowWidth","grow","scale","paintEdgeShape","c","pts","strokeWidth","outline","STYLE_STROKEWIDTH","startWidth","endWidth","edgeWidth","openEnded","isOpenEnded","markerStart","markerEnd","isRounded","isArrowRounded","pe","length","i0","x","y","dx","dy","dist","sqrt","nx","nx2","nx1","ny","ny2","ny1","orthx","orthy","fns","setLineJoin","setMiterLimit","begin","startNx","startNy","paintMarker","outStartX","outStartY","inEndX","inEndY","moveTo","push","lineTo","dx1","dy1","dist1","i","pos","relativeCcw","tmp1","tmp","dist2","strokeWidthFactor","min","angleFactor","outX","outY","inX","inY","c1x","c1y","c2x","c2y","quadTo","inStartX","inStartY","splice","end","close","fillAndStroke","setShadow","ptX","ptY","size","initialMove","widthArrowRatio","spaceX","spaceY","getValue","STYLE_STARTARROW","NONE","STYLE_ENDARROW","__mxOutput","undefined"],"mappings":"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","file":"mxArrowConnector.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxArrowConnector\n *\n * Extends <mxShape> to implement an new rounded arrow shape with support for\n * waypoints and double arrows. (The shape is used to represent edges, not\n * vertices.) This shape is registered under <mxConstants.SHAPE_ARROW_CONNECTOR>\n * in <mxCellRenderer>.\n * \n * Constructor: mxArrowConnector\n *\n * Constructs a new arrow shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n * arrowWidth - Optional integer that defines the arrow width. Default is\n * <mxConstants.ARROW_WIDTH>. This is stored in <arrowWidth>.\n * spacing - Optional integer that defines the spacing between the arrow shape\n * and its endpoints. Default is <mxConstants.ARROW_SPACING>. This is stored in\n * <spacing>.\n * endSize - Optional integer that defines the size of the arrowhead. Default\n * is <mxConstants.ARROW_SIZE>. This is stored in <endSize>.\n */\nfunction mxArrowConnector(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.arrowWidth = (arrowWidth != null) ? arrowWidth : mxConstants.ARROW_WIDTH;\n\tthis.arrowSpacing = (spacing != null) ? spacing : mxConstants.ARROW_SPACING;\n\tthis.startSize = mxConstants.ARROW_SIZE / 5;\n\tthis.endSize = mxConstants.ARROW_SIZE / 5;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxArrowConnector, mxShape);\n\n/**\n * Variable: useSvgBoundingBox\n * \n * Allows to use the SVG bounding box in SVG. Default is false for performance\n * reasons.\n */\nmxArrowConnector.prototype.useSvgBoundingBox = true;\n\n/**\n * Variable: resetStyles\n * \n * Overrides mxShape to reset spacing.\n */\nmxArrowConnector.prototype.resetStyles = function()\n{\n\tmxShape.prototype.resetStyles.apply(this, arguments);\n\t\n\tthis.arrowSpacing = mxConstants.ARROW_SPACING;\n};\n\n/**\n * Overrides apply to get smooth transition from default start- and endsize.\n */\nmxArrowConnector.prototype.apply = function(state)\n{\n\tmxShape.prototype.apply.apply(this, arguments);\n\n\tif (this.style != null)\n\t{\n\t\tthis.startSize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.ARROW_SIZE / 5) * 3;\n\t\tthis.endSize = mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, mxConstants.ARROW_SIZE / 5) * 3;\n\t}\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the edge width and markers.\n */\nmxArrowConnector.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\tvar w = this.getEdgeWidth();\n\t\n\tif (this.isMarkerStart())\n\t{\n\t\tw = Math.max(w, this.getStartArrowWidth());\n\t}\n\t\n\tif (this.isMarkerEnd())\n\t{\n\t\tw = Math.max(w, this.getEndArrowWidth());\n\t}\n\t\n\tbbox.grow((w / 2 + this.strokewidth) * this.scale);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrowConnector.prototype.paintEdgeShape = function(c, pts)\n{\n\t// Geometry of arrow\n\tvar strokeWidth = this.strokewidth;\n\t\n\tif (this.outline)\n\t{\n\t\tstrokeWidth = Math.max(1, mxUtils.getNumber(this.style, mxConstants.STYLE_STROKEWIDTH, this.strokewidth));\n\t}\n\t\n\tvar startWidth = this.getStartArrowWidth() + strokeWidth;\n\tvar endWidth = this.getEndArrowWidth() + strokeWidth;\n\tvar edgeWidth = this.outline ? this.getEdgeWidth() + strokeWidth : this.getEdgeWidth();\n\tvar openEnded = this.isOpenEnded();\n\tvar markerStart = this.isMarkerStart();\n\tvar markerEnd = this.isMarkerEnd();\n\tvar spacing = (openEnded) ? 0 : this.arrowSpacing + strokeWidth / 2;\n\tvar startSize = this.startSize + strokeWidth;\n\tvar endSize = this.endSize + strokeWidth;\n\tvar isRounded = this.isArrowRounded();\n\t\n\t// Base vector (between first points)\n\tvar pe = pts[pts.length - 1];\n\n\t// Finds first non-overlapping point\n\tvar i0 = 1;\n\t\n\twhile (i0 < pts.length - 1 && pts[i0].x == pts[0].x && pts[i0].y == pts[0].y)\n\t{\n\t\ti0++;\n\t}\n\t\n\tvar dx = pts[i0].x - pts[0].x;\n\tvar dy = pts[i0].y - pts[0].y;\n\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\n\tif (dist == 0)\n\t{\n\t\treturn;\n\t}\n\t\n\t// Computes the norm and the inverse norm\n\tvar nx = dx / dist;\n\tvar nx2, nx1 = nx;\n\tvar ny = dy / dist;\n\tvar ny2, ny1 = ny;\n\tvar orthx = edgeWidth * ny;\n\tvar orthy = -edgeWidth * nx;\n\t\n\t// Stores the inbound function calls in reverse order in fns\n\tvar fns = [];\n\t\n\tif (isRounded)\n\t{\n\t\tc.setLineJoin('round');\n\t}\n\telse if (pts.length > 2)\n\t{\n\t\t// Only mitre if there are waypoints\n\t\tc.setMiterLimit(1.42);\n\t}\n\n\tc.begin();\n\n\tvar startNx = nx;\n\tvar startNy = ny;\n\n\tif (markerStart && !openEnded)\n\t{\n\t\tthis.paintMarker(c, pts[0].x, pts[0].y, nx, ny, startSize, startWidth, edgeWidth, spacing, true);\n\t}\n\telse\n\t{\n\t\tvar outStartX = pts[0].x + orthx / 2 + spacing * nx;\n\t\tvar outStartY = pts[0].y + orthy / 2 + spacing * ny;\n\t\tvar inEndX = pts[0].x - orthx / 2 + spacing * nx;\n\t\tvar inEndY = pts[0].y - orthy / 2 + spacing * ny;\n\t\t\n\t\tif (openEnded)\n\t\t{\n\t\t\tc.moveTo(outStartX, outStartY);\n\t\t\t\n\t\t\tfns.push(function()\n\t\t\t{\n\t\t\t\tc.lineTo(inEndX, inEndY);\n\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(inEndX, inEndY);\n\t\t\tc.lineTo(outStartX, outStartY);\n\t\t}\n\t}\n\t\n\tvar dx1 = 0;\n\tvar dy1 = 0;\n\tvar dist1 = 0;\n\n\tfor (var i = 0; i < pts.length - 2; i++)\n\t{\n\t\t// Work out in which direction the line is bending\n\t\tvar pos = mxUtils.relativeCcw(pts[i].x, pts[i].y, pts[i+1].x, pts[i+1].y, pts[i+2].x, pts[i+2].y);\n\n\t\tdx1 = pts[i+2].x - pts[i+1].x;\n\t\tdy1 = pts[i+2].y - pts[i+1].y;\n\n\t\tdist1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n\t\t\n\t\tif (dist1 != 0)\n\t\t{\n\t\t\tnx1 = dx1 / dist1;\n\t\t\tny1 = dy1 / dist1;\n\t\t\t\n\t\t\tvar tmp1 = nx * nx1 + ny * ny1;\n\t\t\ttmp = Math.max(Math.sqrt((tmp1 + 1) / 2), 0.04);\n\t\t\t\n\t\t\t// Work out the normal orthogonal to the line through the control point and the edge sides intersection\n\t\t\tnx2 = (nx + nx1);\n\t\t\tny2 = (ny + ny1);\n\t\n\t\t\tvar dist2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);\n\t\t\t\n\t\t\tif (dist2 != 0)\n\t\t\t{\n\t\t\t\tnx2 = nx2 / dist2;\n\t\t\t\tny2 = ny2 / dist2;\n\t\t\t\t\n\t\t\t\t// Higher strokewidths require a larger minimum bend, 0.35 covers all but the most extreme cases\n\t\t\t\tvar strokeWidthFactor = Math.max(tmp, Math.min(this.strokewidth / 200 + 0.04, 0.35));\n\t\t\t\tvar angleFactor = (pos != 0 && isRounded) ? Math.max(0.1, strokeWidthFactor) : Math.max(tmp, 0.06);\n\n\t\t\t\tvar outX = pts[i+1].x + ny2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar outY = pts[i+1].y - nx2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar inX = pts[i+1].x - ny2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar inY = pts[i+1].y + nx2 * edgeWidth / 2 / angleFactor;\n\t\t\t\t\n\t\t\t\tif (pos == 0 || !isRounded)\n\t\t\t\t{\n\t\t\t\t\t// If the two segments are aligned, or if we're not drawing curved sections between segments\n\t\t\t\t\t// just draw straight to the intersection point\n\t\t\t\t\tc.lineTo(outX, outY);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(x, y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\telse if (pos == -1)\n\t\t\t\t{\n\t\t\t\t\tvar c1x = inX + ny * edgeWidth;\n\t\t\t\t\tvar c1y = inY - nx * edgeWidth;\n\t\t\t\t\tvar c2x = inX + ny1 * edgeWidth;\n\t\t\t\t\tvar c2y = inY - nx1 * edgeWidth;\n\t\t\t\t\tc.lineTo(c1x, c1y);\n\t\t\t\t\tc.quadTo(outX, outY, c2x, c2y);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(x, y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tc.lineTo(outX, outY);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c1x = outX - ny * edgeWidth;\n\t\t\t\t\t\tvar c1y = outY + nx * edgeWidth;\n\t\t\t\t\t\tvar c2x = outX - ny1 * edgeWidth;\n\t\t\t\t\t\tvar c2y = outY + nx1 * edgeWidth;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.quadTo(x, y, c1x, c1y);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(c2x, c2y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnx = nx1;\n\t\t\t\tny = ny1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\torthx = edgeWidth * ny1;\n\torthy = - edgeWidth * nx1;\n\n\tif (markerEnd && !openEnded)\n\t{\n\t\tthis.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, false);\n\t}\n\telse\n\t{\n\t\tc.lineTo(pe.x - spacing * nx1 + orthx / 2, pe.y - spacing * ny1 + orthy / 2);\n\t\t\n\t\tvar inStartX = pe.x - spacing * nx1 - orthx / 2;\n\t\tvar inStartY = pe.y - spacing * ny1 - orthy / 2;\n\n\t\tif (!openEnded)\n\t\t{\n\t\t\tc.lineTo(inStartX, inStartY);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(inStartX, inStartY);\n\t\t\t\n\t\t\tfns.splice(0, 0, function()\n\t\t\t{\n\t\t\t\tc.moveTo(inStartX, inStartY);\n\t\t\t});\n\t\t}\n\t}\n\t\n\tfor (var i = fns.length - 1; i >= 0; i--)\n\t{\n\t\tfns[i]();\n\t}\n\n\tif (openEnded)\n\t{\n\t\tc.end();\n\t\tc.stroke();\n\t}\n\telse\n\t{\n\t\tc.close();\n\t\tc.fillAndStroke();\n\t}\n\t\n\t// Workaround for shadow on top of base arrow\n\tc.setShadow(false);\n\t\n\t// Need to redraw the markers without the low miter limit\n\tc.setMiterLimit(4);\n\t\n\tif (isRounded)\n\t{\n\t\tc.setLineJoin('flat');\n\t}\n\n\tif (pts.length > 2)\n\t{\n\t\t// Only to repaint markers if no waypoints\n\t\t// Need to redraw the markers without the low miter limit\n\t\tc.setMiterLimit(4);\n\t\tif (markerStart && !openEnded)\n\t\t{\n\t\t\tc.begin();\n\t\t\tthis.paintMarker(c, pts[0].x, pts[0].y, startNx, startNy, startSize, startWidth, edgeWidth, spacing, true);\n\t\t\tc.stroke();\n\t\t\tc.end();\n\t\t}\n\t\t\n\t\tif (markerEnd && !openEnded)\n\t\t{\n\t\t\tc.begin();\n\t\t\tthis.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, true);\n\t\t\tc.stroke();\n\t\t\tc.end();\n\t\t}\n\t}\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrowConnector.prototype.paintMarker = function(c, ptX, ptY, nx, ny, size, arrowWidth, edgeWidth, spacing, initialMove)\n{\n\tvar widthArrowRatio = edgeWidth / arrowWidth;\n\tvar orthx = edgeWidth * ny / 2;\n\tvar orthy = -edgeWidth * nx / 2;\n\n\tvar spaceX = (spacing + size) * nx;\n\tvar spaceY = (spacing + size) * ny;\n\n\tif (initialMove)\n\t{\n\t\tc.moveTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n\t}\n\telse\n\t{\n\t\tc.lineTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n\t}\n\n\tc.lineTo(ptX - orthx / widthArrowRatio + spaceX, ptY - orthy / widthArrowRatio + spaceY);\n\tc.lineTo(ptX + spacing * nx, ptY + spacing * ny);\n\tc.lineTo(ptX + orthx / widthArrowRatio + spaceX, ptY + orthy / widthArrowRatio + spaceY);\n\tc.lineTo(ptX + orthx + spaceX, ptY + orthy + spaceY);\n}\n\n/**\n * Function: isArrowRounded\n * \n * Returns wether the arrow is rounded\n */\nmxArrowConnector.prototype.isArrowRounded = function()\n{\n\treturn this.isRounded;\n};\n\n/**\n * Function: getStartArrowWidth\n * \n * Returns the width of the start arrow\n */\nmxArrowConnector.prototype.getStartArrowWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH;\n};\n\n/**\n * Function: getEndArrowWidth\n * \n * Returns the width of the end arrow\n */\nmxArrowConnector.prototype.getEndArrowWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH;\n};\n\n/**\n * Function: getEdgeWidth\n * \n * Returns the width of the body of the edge\n */\nmxArrowConnector.prototype.getEdgeWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH / 3;\n};\n\n/**\n * Function: isOpenEnded\n * \n * Returns whether the ends of the shape are drawn\n */\nmxArrowConnector.prototype.isOpenEnded = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isMarkerStart\n * \n * Returns whether the start marker is drawn\n */\nmxArrowConnector.prototype.isMarkerStart = function()\n{\n\treturn (mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, mxConstants.NONE) != mxConstants.NONE);\n};\n\n/**\n * Function: isMarkerEnd\n * \n * Returns whether the end marker is drawn\n */\nmxArrowConnector.prototype.isMarkerEnd = function()\n{\n\treturn (mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, mxConstants.NONE) != mxConstants.NONE);\n};\n__mxOutput.mxArrowConnector = typeof mxArrowConnector !== 'undefined' ? mxArrowConnector : undefined;\n"]}