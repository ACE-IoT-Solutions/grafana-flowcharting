{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/shape/mxDoubleEllipse.js"],"names":["mxDoubleEllipse","bounds","fill","stroke","strokewidth","mxShape","call","mxUtils","extend","prototype","vmlScale","paintBackground","c","x","y","w","h","ellipse","fillAndStroke","paintForeground","outline","margin","getValue","style","mxConstants","STYLE_MARGIN","Math","min","getLabelBounds","rect","width","scale","height","mxRectangle","__mxOutput","undefined"],"mappings":";;;;;AAAA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,WAASA,eAAT,CAAyBC,MAAzB,EAAiCC,IAAjC,EAAuCC,MAAvC,EAA+CC,WAA/C,EACA;AACCC,YAAQC,IAAR,CAAa,IAAb;AACA,SAAKL,MAAL,GAAcA,MAAd;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,WAAL,GAAoBA,eAAe,IAAhB,GAAwBA,WAAxB,GAAsC,CAAzD;AACA,G;;;AAAA;;AAED;;;AAGAG,cAAQC,MAAR,CAAeR,eAAf,EAAgCK,OAAhC;;AAEA;;;;;AAKAL,sBAAgBS,SAAhB,CAA0BC,QAA1B,GAAqC,EAArC;;AAEA;;;;;AAKAV,sBAAgBS,SAAhB,CAA0BE,eAA1B,GAA4C,UAASC,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB,EAAqBC,CAArB,EAC5C;AACCJ,UAAEK,OAAF,CAAUJ,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB;AACAJ,UAAEM,aAAF;AACA,OAJD;;AAMA;;;;;AAKAlB,sBAAgBS,SAAhB,CAA0BU,eAA1B,GAA4C,UAASP,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB,EAAqBC,CAArB,EAC5C;AACC,YAAI,CAAC,KAAKI,OAAV,EACA;AACC,cAAIC,SAASd,QAAQe,QAAR,CAAiB,KAAKC,KAAtB,EAA6BC,YAAYC,YAAzC,EAAuDC,KAAKC,GAAL,CAAS,IAAI,KAAKvB,WAAlB,EAA+BsB,KAAKC,GAAL,CAASZ,IAAI,CAAb,EAAgBC,IAAI,CAApB,CAA/B,CAAvD,CAAb;AACAH,eAAKQ,MAAL;AACAP,eAAKO,MAAL;AACAN,eAAK,IAAIM,MAAT;AACAL,eAAK,IAAIK,MAAT;;AAEA;AACA,cAAIN,IAAI,CAAJ,IAASC,IAAI,CAAjB,EACA;AACCJ,cAAEK,OAAF,CAAUJ,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB;AACA;;AAEDJ,YAAET,MAAF;AACA;AACD,OAlBD;;AAoBA;;;;;AAKAH,sBAAgBS,SAAhB,CAA0BmB,cAA1B,GAA2C,UAASC,IAAT,EAC3C;AACC,YAAIR,SAAUd,QAAQe,QAAR,CAAiB,KAAKC,KAAtB,EAA6BC,YAAYC,YAAzC,EAAuDC,KAAKC,GAAL,CAAS,IAAI,KAAKvB,WAAlB,EACnEsB,KAAKC,GAAL,CAASE,KAAKC,KAAL,GAAa,CAAb,GAAiB,KAAKC,KAA/B,EAAsCF,KAAKG,MAAL,GAAc,CAAd,GAAkB,KAAKD,KAA7D,CADmE,CAAvD,CAAD,GAC8D,KAAKA,KADhF;;AAGA,eAAO,IAAIE,WAAJ,CAAgBJ,KAAKhB,CAAL,GAASQ,MAAzB,EAAiCQ,KAAKf,CAAL,GAASO,MAA1C,EAAkDQ,KAAKC,KAAL,GAAa,IAAIT,MAAnE,EAA2EQ,KAAKG,MAAL,GAAc,IAAIX,MAA7F,CAAP;AACA,OAND;;AAQAa,iBAAWlC,eAAX,GAA6B,OAAOA,eAAP,KAA2B,WAA3B,GAAyCA,eAAzC,GAA2DmC,SAAxF","file":"mxDoubleEllipse.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDoubleEllipse\n *\n * Extends <mxShape> to implement a double ellipse shape. This shape is\n * registered under <mxConstants.SHAPE_DOUBLE_ELLIPSE> in <mxCellRenderer>.\n * Use the following override to only fill the inner ellipse in this shape:\n * \n * (code)\n * mxDoubleEllipse.prototype.paintVertexShape = function(c, x, y, w, h)\n * {\n *   c.ellipse(x, y, w, h);\n *   c.stroke();\n *   \n *   var inset = mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5)));\n *   x += inset;\n *   y += inset;\n *   w -= 2 * inset;\n *   h -= 2 * inset;\n *   \n *   if (w > 0 && h > 0)\n *   {\n *     c.ellipse(x, y, w, h);\n *   }\n *   \n *   c.fillAndStroke();\n * };\n * (end)\n * \n * Constructor: mxDoubleEllipse\n *\n * Constructs a new ellipse shape.\n *\n * Parameters:\n *\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxDoubleEllipse(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxDoubleEllipse, mxShape);\n\n/**\n * Variable: vmlScale\n * \n * Scale for improving the precision of VML rendering. Default is 10.\n */\nmxDoubleEllipse.prototype.vmlScale = 10;\n\n/**\n * Function: paintBackground\n * \n * Paints the background.\n */\nmxDoubleEllipse.prototype.paintBackground = function(c, x, y, w, h)\n{\n\tc.ellipse(x, y, w, h);\n\tc.fillAndStroke();\n};\n\n/**\n * Function: paintForeground\n * \n * Paints the foreground.\n */\nmxDoubleEllipse.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tif (!this.outline)\n\t{\n\t\tvar margin = mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5)));\n\t\tx += margin;\n\t\ty += margin;\n\t\tw -= 2 * margin;\n\t\th -= 2 * margin;\n\t\t\n\t\t// FIXME: Rounding issues in IE8 standards mode (not in 1.x)\n\t\tif (w > 0 && h > 0)\n\t\t{\n\t\t\tc.ellipse(x, y, w, h);\n\t\t}\n\t\t\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounds for the label.\n */\nmxDoubleEllipse.prototype.getLabelBounds = function(rect)\n{\n\tvar margin = (mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth,\n\t\t\tMath.min(rect.width / 5 / this.scale, rect.height / 5 / this.scale)))) * this.scale;\n\n\treturn new mxRectangle(rect.x + margin, rect.y + margin, rect.width - 2 * margin, rect.height - 2 * margin);\n};\n\n__mxOutput.mxDoubleEllipse = typeof mxDoubleEllipse !== 'undefined' ? mxDoubleEllipse : undefined;\n"]}