{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/view/mxStylesheet.js"],"names":["mxStylesheet","styles","Object","putDefaultVertexStyle","createDefaultVertexStyle","putDefaultEdgeStyle","createDefaultEdgeStyle","prototype","style","mxConstants","STYLE_SHAPE","SHAPE_RECTANGLE","STYLE_PERIMETER","mxPerimeter","RectanglePerimeter","STYLE_VERTICAL_ALIGN","ALIGN_MIDDLE","STYLE_ALIGN","ALIGN_CENTER","STYLE_FILLCOLOR","STYLE_STROKECOLOR","STYLE_FONTCOLOR","SHAPE_CONNECTOR","STYLE_ENDARROW","ARROW_CLASSIC","putCellStyle","getDefaultVertexStyle","getDefaultEdgeStyle","name","getCellStyle","defaultStyle","length","pairs","split","charAt","mxUtils","clone","i","tmp","pos","indexOf","key","substring","value","NONE","isNumeric","parseFloat","tmpStyle","__mxOutput","undefined"],"mappings":"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","file":"mxStylesheet.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStylesheet\n * \n * Defines the appearance of the cells in a graph. See <putCellStyle> for an\n * example of creating a new cell style. It is recommended to use objects, not\n * arrays for holding cell styles. Existing styles can be cloned using\n * <mxUtils.clone> and turned into a string for debugging using\n * <mxUtils.toString>.\n *\n * Default Styles:\n * \n * The stylesheet contains two built-in styles, which are used if no style is\n * defined for a cell:\n *\n *   defaultVertex - Default style for vertices\n *   defaultEdge - Default style for edges\n * \n * Example:\n * \n * (code)\n * var vertexStyle = stylesheet.getDefaultVertexStyle();\n * vertexStyle[mxConstants.ROUNDED] = true;\n * var edgeStyle = stylesheet.getDefaultEdgeStyle();\n * edgeStyle[mxConstants.STYLE_EDGE] = mxEdgeStyle.EntityRelation;\n * (end)\n * \n * Modifies the built-in default styles.\n * \n * To avoid the default style for a cell, add a leading semicolon\n * to the style definition, eg.\n * \n * (code)\n * ;shadow=1\n * (end)\n * \n * Removing keys:\n * \n * For removing a key in a cell style of the form [stylename;|key=value;] the\n * special value none can be used, eg. highlight;fillColor=none\n * \n * See also the helper methods in mxUtils to modify strings of this format,\n * namely <mxUtils.setStyle>, <mxUtils.indexOfStylename>,\n * <mxUtils.addStylename>, <mxUtils.removeStylename>,\n * <mxUtils.removeAllStylenames> and <mxUtils.setStyleFlag>.\n * \n * Constructor: mxStylesheet\n * \n * Constructs a new stylesheet and assigns default styles.\n */\nfunction mxStylesheet()\n{\n\tthis.styles = new Object();\n\t\n\tthis.putDefaultVertexStyle(this.createDefaultVertexStyle());\n\tthis.putDefaultEdgeStyle(this.createDefaultEdgeStyle());\n};\n\n/**\n * Function: styles\n * \n * Maps from names to cell styles. Each cell style is a map of key,\n * value pairs.\n */\nmxStylesheet.prototype.styles;\n\n/**\n * Function: createDefaultVertexStyle\n * \n * Creates and returns the default vertex style.\n */\nmxStylesheet.prototype.createDefaultVertexStyle = function()\n{\n\tvar style = new Object();\n\t\n\tstyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n\tstyle[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n\tstyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n\tstyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n\tstyle[mxConstants.STYLE_FILLCOLOR] = '#C3D9FF';\n\tstyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';\n\tstyle[mxConstants.STYLE_FONTCOLOR] = '#774400';\n\t\n\treturn style;\n};\n\n/**\n * Function: createDefaultEdgeStyle\n * \n * Creates and returns the default edge style.\n */\nmxStylesheet.prototype.createDefaultEdgeStyle = function()\n{\n\tvar style = new Object();\n\t\n\tstyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_CONNECTOR;\n\tstyle[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;\n\tstyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n\tstyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n\tstyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';\n\tstyle[mxConstants.STYLE_FONTCOLOR] = '#446299';\n\t\n\treturn style;\n};\n\n/**\n * Function: putDefaultVertexStyle\n * \n * Sets the default style for vertices using defaultVertex as the\n * stylename.\n * \n * Parameters:\n * style - Key, value pairs that define the style.\n */\nmxStylesheet.prototype.putDefaultVertexStyle = function(style)\n{\n\tthis.putCellStyle('defaultVertex', style);\n};\n\n/**\n * Function: putDefaultEdgeStyle\n * \n * Sets the default style for edges using defaultEdge as the stylename.\n */\nmxStylesheet.prototype.putDefaultEdgeStyle = function(style)\n{\n\tthis.putCellStyle('defaultEdge', style);\n};\n\n/**\n * Function: getDefaultVertexStyle\n * \n * Returns the default style for vertices.\n */\nmxStylesheet.prototype.getDefaultVertexStyle = function()\n{\n\treturn this.styles['defaultVertex'];\n};\n\n/**\n * Function: getDefaultEdgeStyle\n * \n * Sets the default style for edges.\n */\nmxStylesheet.prototype.getDefaultEdgeStyle = function()\n{\n\treturn this.styles['defaultEdge'];\n};\n\n/**\n * Function: putCellStyle\n * \n * Stores the given map of key, value pairs under the given name in\n * <styles>.\n *\n * Example:\n * \n * The following example adds a new style called 'rounded' into an\n * existing stylesheet:\n * \n * (code)\n * var style = new Object();\n * style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n * style[mxConstants.STYLE_ROUNDED] = true;\n * graph.getStylesheet().putCellStyle('rounded', style);\n * (end)\n * \n * In the above example, the new style is an object. The possible keys of\n * the object are all the constants in <mxConstants> that start with STYLE\n * and the values are either JavaScript objects, such as\n * <mxPerimeter.RightAngleRectanglePerimeter> (which is in fact a function)\n * or expressions, such as true. Note that not all keys will be\n * interpreted by all shapes (eg. the line shape ignores the fill color).\n * The final call to this method associates the style with a name in the\n * stylesheet. The style is used in a cell with the following code:\n * \n * (code)\n * model.setStyle(cell, 'rounded');\n * (end)\n * \n * Parameters:\n * \n * name - Name for the style to be stored.\n * style - Key, value pairs that define the style.\n */\nmxStylesheet.prototype.putCellStyle = function(name, style)\n{\n\tthis.styles[name] = style;\n};\n\n/**\n * Function: getCellStyle\n * \n * Returns the cell style for the specified stylename or the given\n * defaultStyle if no style can be found for the given stylename.\n * \n * Parameters:\n * \n * name - String of the form [(stylename|key=value);] that represents the\n * style.\n * defaultStyle - Default style to be returned if no style can be found.\n */\nmxStylesheet.prototype.getCellStyle = function(name, defaultStyle)\n{\n\tvar style = defaultStyle;\n\t\n\tif (name != null && name.length > 0)\n\t{\n\t\tvar pairs = name.split(';');\n\n\t\tif (style != null &&\n\t\t\tname.charAt(0) != ';')\n\t\t{\n\t\t\tstyle = mxUtils.clone(style);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle = new Object();\n\t\t}\n\n\t\t// Parses each key, value pair into the existing style\n\t \tfor (var i = 0; i < pairs.length; i++)\n\t \t{\n\t \t\tvar tmp = pairs[i];\n\t \t\tvar pos = tmp.indexOf('=');\n\t \t\t\n\t \t\tif (pos >= 0)\n\t \t\t{\n\t\t \t\tvar key = tmp.substring(0, pos);\n\t\t \t\tvar value = tmp.substring(pos + 1);\n\n\t\t \t\tif (value == mxConstants.NONE)\n\t\t \t\t{\n\t\t \t\t\tdelete style[key];\n\t\t \t\t}\n\t\t \t\telse if (mxUtils.isNumeric(value))\n\t\t \t\t{\n\t\t \t\t\tstyle[key] = parseFloat(value);\n\t\t \t\t}\n\t\t \t\telse\n\t\t \t\t{\n\t\t\t \t\tstyle[key] = value;\n\t\t \t\t}\n\t\t\t}\n\t \t\telse\n\t \t\t{\n\t \t\t\t// Merges the entries from a named style\n\t\t\t\tvar tmpStyle = this.styles[tmp];\n\t\t\t\t\n\t\t\t\tif (tmpStyle != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var key in tmpStyle)\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle[key] = tmpStyle[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t \t\t}\n\t\t}\n\t}\n\t\n\treturn style;\n};\n\n__mxOutput.mxStylesheet = typeof mxStylesheet !== 'undefined' ? mxStylesheet : undefined;\n"]}