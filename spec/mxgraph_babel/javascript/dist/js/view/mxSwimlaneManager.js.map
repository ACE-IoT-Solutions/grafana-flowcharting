{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/view/mxSwimlaneManager.js"],"names":["mxSwimlaneManager","graph","horizontal","addEnabled","resizeEnabled","addHandler","mxUtils","bind","sender","evt","isEnabled","isAddEnabled","cellsAdded","getProperty","resizeHandler","isResizeEnabled","cellsResized","setGraph","prototype","mxEventSource","constructor","enabled","setEnabled","value","isHorizontal","setHorizontal","setAddEnabled","setResizeEnabled","getGraph","removeListener","addListener","mxEvent","ADD_CELLS","CELLS_RESIZED","isSwimlaneIgnored","swimlane","isSwimlane","isCellHorizontal","cell","style","getCellStyle","getValue","mxConstants","STYLE_HORIZONTAL","cells","model","getModel","beginUpdate","i","length","swimlaneAdded","endUpdate","parent","getParent","childCount","getChildCount","geo","child","getChildAt","getGeometry","parentHorizontal","resizeSwimlane","width","height","size","mxRectangle","top","current","tmp","getStartSize","w","h","clone","setGeometry","destroy","__mxOutput","undefined"],"mappings":";;;;;AAAA;;;;AAIA;;;;;;;;;;;;;;;;AAgBA,UAASA,iBAAT,CAA2BC,KAA3B,EAAkCC,UAAlC,EAA8CC,UAA9C,EAA0DC,aAA1D,EACA;AACC,OAAKF,UAAL,GAAmBA,cAAc,IAAf,GAAuBA,UAAvB,GAAoC,IAAtD;AACA,OAAKC,UAAL,GAAmBA,cAAc,IAAf,GAAuBA,UAAvB,GAAoC,IAAtD;AACA,OAAKC,aAAL,GAAsBA,iBAAiB,IAAlB,GAA0BA,aAA1B,GAA0C,IAA/D;;AAEA,OAAKC,UAAL,GAAkBC,QAAQC,IAAR,CAAa,IAAb,EAAmB,UAASC,MAAT,EAAiBC,GAAjB,EACrC;AACC,OAAI,KAAKC,SAAL,MAAoB,KAAKC,YAAL,EAAxB,EACA;AACC,SAAKC,UAAL,CAAgBH,IAAII,WAAJ,CAAgB,OAAhB,CAAhB;AACA;AACD,GANiB,CAAlB;;AAQA,OAAKC,aAAL,GAAqBR,QAAQC,IAAR,CAAa,IAAb,EAAmB,UAASC,MAAT,EAAiBC,GAAjB,EACxC;AACC,OAAI,KAAKC,SAAL,MAAoB,KAAKK,eAAL,EAAxB,EACA;AACC,SAAKC,YAAL,CAAkBP,IAAII,WAAJ,CAAgB,OAAhB,CAAlB;AACA;AACD,GANoB,CAArB;;AAQA,OAAKI,QAAL,CAAchB,KAAd;AACA,E;;;AAAA;;AAED;;;AAGAD,qBAAkBkB,SAAlB,GAA8B,IAAIC,aAAJ,EAA9B;AACAnB,qBAAkBkB,SAAlB,CAA4BE,WAA5B,GAA0CpB,iBAA1C;;AAEA;;;;;AAKAA,qBAAkBkB,SAAlB,CAA4BjB,KAA5B,GAAoC,IAApC;;AAEA;;;;;AAKAD,qBAAkBkB,SAAlB,CAA4BG,OAA5B,GAAsC,IAAtC;;AAEA;;;;;AAKArB,qBAAkBkB,SAAlB,CAA4BhB,UAA5B,GAAyC,IAAzC;;AAEA;;;;;;AAMAF,qBAAkBkB,SAAlB,CAA4Bf,UAA5B,GAAyC,IAAzC;;AAEA;;;;;AAKAH,qBAAkBkB,SAAlB,CAA4Bd,aAA5B,GAA4C,IAA5C;;AAEA;;;;;AAKAJ,qBAAkBkB,SAAlB,CAA4Bb,UAA5B,GAAyC,IAAzC;;AAEA;;;;;AAKAL,qBAAkBkB,SAAlB,CAA4BJ,aAA5B,GAA4C,IAA5C;;AAEA;;;;;;AAMAd,qBAAkBkB,SAAlB,CAA4BR,SAA5B,GAAwC,YACxC;AACC,WAAO,KAAKW,OAAZ;AACA,IAHD;;AAKA;;;;;;;;;;AAUArB,qBAAkBkB,SAAlB,CAA4BI,UAA5B,GAAyC,UAASC,KAAT,EACzC;AACC,SAAKF,OAAL,GAAeE,KAAf;AACA,IAHD;;AAKA;;;;;AAKAvB,qBAAkBkB,SAAlB,CAA4BM,YAA5B,GAA2C,YAC3C;AACC,WAAO,KAAKtB,UAAZ;AACA,IAHD;;AAKA;;;;;AAKAF,qBAAkBkB,SAAlB,CAA4BO,aAA5B,GAA4C,UAASF,KAAT,EAC5C;AACC,SAAKrB,UAAL,GAAkBqB,KAAlB;AACA,IAHD;;AAKA;;;;;AAKAvB,qBAAkBkB,SAAlB,CAA4BP,YAA5B,GAA2C,YAC3C;AACC,WAAO,KAAKR,UAAZ;AACA,IAHD;;AAKA;;;;;AAKAH,qBAAkBkB,SAAlB,CAA4BQ,aAA5B,GAA4C,UAASH,KAAT,EAC5C;AACC,SAAKpB,UAAL,GAAkBoB,KAAlB;AACA,IAHD;;AAKA;;;;;AAKAvB,qBAAkBkB,SAAlB,CAA4BH,eAA5B,GAA8C,YAC9C;AACC,WAAO,KAAKX,aAAZ;AACA,IAHD;;AAKA;;;;;AAKAJ,qBAAkBkB,SAAlB,CAA4BS,gBAA5B,GAA+C,UAASJ,KAAT,EAC/C;AACC,SAAKnB,aAAL,GAAqBmB,KAArB;AACA,IAHD;;AAKA;;;;;AAKAvB,qBAAkBkB,SAAlB,CAA4BU,QAA5B,GAAuC,YACvC;AACC,WAAO,KAAK3B,KAAZ;AACA,IAHD;;AAKA;;;;;AAKAD,qBAAkBkB,SAAlB,CAA4BD,QAA5B,GAAuC,UAAShB,KAAT,EACvC;AACC,QAAI,KAAKA,KAAL,IAAc,IAAlB,EACA;AACC,UAAKA,KAAL,CAAW4B,cAAX,CAA0B,KAAKxB,UAA/B;AACA,UAAKJ,KAAL,CAAW4B,cAAX,CAA0B,KAAKf,aAA/B;AACA;;AAED,SAAKb,KAAL,GAAaA,KAAb;;AAEA,QAAI,KAAKA,KAAL,IAAc,IAAlB,EACA;AACC,UAAKA,KAAL,CAAW6B,WAAX,CAAuBC,QAAQC,SAA/B,EAA0C,KAAK3B,UAA/C;AACA,UAAKJ,KAAL,CAAW6B,WAAX,CAAuBC,QAAQE,aAA/B,EAA8C,KAAKnB,aAAnD;AACA;AACD,IAfD;;AAiBA;;;;;AAKAd,qBAAkBkB,SAAlB,CAA4BgB,iBAA5B,GAAgD,UAASC,QAAT,EAChD;AACC,WAAO,CAAC,KAAKP,QAAL,GAAgBQ,UAAhB,CAA2BD,QAA3B,CAAR;AACA,IAHD;;AAKA;;;;;;AAMAnC,qBAAkBkB,SAAlB,CAA4BmB,gBAA5B,GAA+C,UAASC,IAAT,EAC/C;AACC,QAAI,KAAKrC,KAAL,CAAWmC,UAAX,CAAsBE,IAAtB,CAAJ,EACA;AACC,SAAIC,QAAQ,KAAKtC,KAAL,CAAWuC,YAAX,CAAwBF,IAAxB,CAAZ;;AAEA,YAAOhC,QAAQmC,QAAR,CAAiBF,KAAjB,EAAwBG,YAAYC,gBAApC,EAAsD,CAAtD,KAA4D,CAAnE;AACA;;AAED,WAAO,CAAC,KAAKnB,YAAL,EAAR;AACA,IAVD;;AAYA;;;;;;;;;AASAxB,qBAAkBkB,SAAlB,CAA4BN,UAA5B,GAAyC,UAASgC,KAAT,EACzC;AACC,QAAIA,SAAS,IAAb,EACA;AACC,SAAIC,QAAQ,KAAKjB,QAAL,GAAgBkB,QAAhB,EAAZ;;AAEAD,WAAME,WAAN;AACA,SACA;AACC,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,MAAMK,MAA1B,EAAkCD,GAAlC,EACA;AACC,WAAI,CAAC,KAAKd,iBAAL,CAAuBU,MAAMI,CAAN,CAAvB,CAAL,EACA;AACC,aAAKE,aAAL,CAAmBN,MAAMI,CAAN,CAAnB;AACA;AACD;AACD,MATD,SAWA;AACCH,YAAMM,SAAN;AACA;AACD;AACD,IAtBD;;AAwBA;;;;;;;;;;AAUAnD,qBAAkBkB,SAAlB,CAA4BgC,aAA5B,GAA4C,UAASf,QAAT,EAC5C;AACC,QAAIU,QAAQ,KAAKjB,QAAL,GAAgBkB,QAAhB,EAAZ;AACA,QAAIM,SAASP,MAAMQ,SAAN,CAAgBlB,QAAhB,CAAb;AACA,QAAImB,aAAaT,MAAMU,aAAN,CAAoBH,MAApB,CAAjB;AACA,QAAII,MAAM,IAAV;;AAEA;AACA,SAAK,IAAIR,IAAI,CAAb,EAAgBA,IAAIM,UAApB,EAAgCN,GAAhC,EACA;AACC,SAAIS,QAAQZ,MAAMa,UAAN,CAAiBN,MAAjB,EAAyBJ,CAAzB,CAAZ;;AAEA,SAAIS,SAAStB,QAAT,IAAqB,CAAC,KAAKD,iBAAL,CAAuBuB,KAAvB,CAA1B,EACA;AACCD,YAAMX,MAAMc,WAAN,CAAkBF,KAAlB,CAAN;;AAEA,UAAID,OAAO,IAAX,EACA;AACC;AACA;AACD;AACD;;AAED;AACA,QAAIA,OAAO,IAAX,EACA;AACC,SAAII,mBAAoBR,UAAU,IAAX,GAAmB,KAAKf,gBAAL,CAAsBe,MAAtB,CAAnB,GAAmD,KAAKlD,UAA/E;AACA,UAAK2D,cAAL,CAAoB1B,QAApB,EAA8BqB,IAAIM,KAAlC,EAAyCN,IAAIO,MAA7C,EAAqDH,gBAArD;AACA;AACD,IA7BD;;AA+BA;;;;;;;;;;AAUA5D,qBAAkBkB,SAAlB,CAA4BF,YAA5B,GAA2C,UAAS4B,KAAT,EAC3C;AACC,QAAIA,SAAS,IAAb,EACA;AACC,SAAIC,QAAQ,KAAKjB,QAAL,GAAgBkB,QAAhB,EAAZ;;AAEAD,WAAME,WAAN;AACA,SACA;AACC;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,MAAMK,MAA1B,EAAkCD,GAAlC,EACA;AACC,WAAI,CAAC,KAAKd,iBAAL,CAAuBU,MAAMI,CAAN,CAAvB,CAAL,EACA;AACC,YAAIQ,MAAMX,MAAMc,WAAN,CAAkBf,MAAMI,CAAN,CAAlB,CAAV;;AAEA,YAAIQ,OAAO,IAAX,EACA;AACC,aAAIQ,OAAO,IAAIC,WAAJ,CAAgB,CAAhB,EAAmB,CAAnB,EAAsBT,IAAIM,KAA1B,EAAiCN,IAAIO,MAArC,CAAX;AACA,aAAIG,MAAMtB,MAAMI,CAAN,CAAV;AACA,aAAImB,UAAUD,GAAd;;AAEA,gBAAOC,WAAW,IAAlB,EACA;AACCD,gBAAMC,OAAN;AACAA,oBAAUtB,MAAMQ,SAAN,CAAgBc,OAAhB,CAAV;AACA,cAAIC,MAAO,KAAKnE,KAAL,CAAWmC,UAAX,CAAsB+B,OAAtB,CAAD,GACR,KAAKlE,KAAL,CAAWoE,YAAX,CAAwBF,OAAxB,CADQ,GAER,IAAIF,WAAJ,EAFF;AAGAD,eAAKF,KAAL,IAAcM,IAAIN,KAAlB;AACAE,eAAKD,MAAL,IAAeK,IAAIL,MAAnB;AACA;;AAED,aAAIH,mBAAoBO,WAAW,IAAZ,GAAoB,KAAK9B,gBAAL,CAAsB8B,OAAtB,CAApB,GAAqD,KAAKjE,UAAjF;AACA,cAAK2D,cAAL,CAAoBK,GAApB,EAAyBF,KAAKF,KAA9B,EAAqCE,KAAKD,MAA1C,EAAkDH,gBAAlD;AACA;AACD;AACD;AACD,MA/BD,SAiCA;AACCf,YAAMM,SAAN;AACA;AACD;AACD,IA5CD;;AA8CA;;;;;;;;;;;AAWAnD,qBAAkBkB,SAAlB,CAA4B2C,cAA5B,GAA6C,UAAS1B,QAAT,EAAmBmC,CAAnB,EAAsBC,CAAtB,EAAyBX,gBAAzB,EAC7C;AACC,QAAIf,QAAQ,KAAKjB,QAAL,GAAgBkB,QAAhB,EAAZ;;AAEAD,UAAME,WAAN;AACA,QACA;AACC,SAAI7C,aAAa,KAAKmC,gBAAL,CAAsBF,QAAtB,CAAjB;;AAEA,SAAI,CAAC,KAAKD,iBAAL,CAAuBC,QAAvB,CAAL,EACA;AACC,UAAIqB,MAAMX,MAAMc,WAAN,CAAkBxB,QAAlB,CAAV;;AAEA,UAAIqB,OAAO,IAAX,EACA;AACC,WAAKI,oBAAoBJ,IAAIO,MAAJ,IAAcQ,CAAnC,IAA0C,CAACX,gBAAD,IAAqBJ,IAAIM,KAAJ,IAAaQ,CAAhF,EACA;AACCd,cAAMA,IAAIgB,KAAJ,EAAN;;AAEA,YAAIZ,gBAAJ,EACA;AACCJ,aAAIO,MAAJ,GAAaQ,CAAb;AACA,SAHD,MAKA;AACCf,aAAIM,KAAJ,GAAYQ,CAAZ;AACA;;AAEDzB,cAAM4B,WAAN,CAAkBtC,QAAlB,EAA4BqB,GAA5B;AACA;AACD;AACD;;AAED,SAAIY,MAAO,KAAKnE,KAAL,CAAWmC,UAAX,CAAsBD,QAAtB,CAAD,GACR,KAAKlC,KAAL,CAAWoE,YAAX,CAAwBlC,QAAxB,CADQ,GAER,IAAI8B,WAAJ,EAFF;AAGAK,UAAKF,IAAIN,KAAT;AACAS,UAAKH,IAAIL,MAAT;;AAEA,SAAIT,aAAaT,MAAMU,aAAN,CAAoBpB,QAApB,CAAjB;;AAEA,UAAK,IAAIa,IAAI,CAAb,EAAgBA,IAAIM,UAApB,EAAgCN,GAAhC,EACA;AACC,UAAIS,QAAQZ,MAAMa,UAAN,CAAiBvB,QAAjB,EAA2Ba,CAA3B,CAAZ;AACA,WAAKa,cAAL,CAAoBJ,KAApB,EAA2Ba,CAA3B,EAA8BC,CAA9B,EAAiCrE,UAAjC;AACA;AACD,KAzCD,SA2CA;AACC2C,WAAMM,SAAN;AACA;AACD,IAnDD;;AAqDA;;;;;AAKAnD,qBAAkBkB,SAAlB,CAA4BwD,OAA5B,GAAsC,YACtC;AACC,SAAKzD,QAAL,CAAc,IAAd;AACA,IAHD;;AAKA0D,cAAW3E,iBAAX,GAA+B,OAAOA,iBAAP,KAA6B,WAA7B,GAA2CA,iBAA3C,GAA+D4E,SAA9F","file":"mxSwimlaneManager.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneManager\n * \n * Manager for swimlanes and nested swimlanes that sets the size of newly added\n * swimlanes to that of their siblings, and propagates changes to the size of a\n * swimlane to its siblings, if <siblings> is true, and its ancestors, if\n * <bubbling> is true.\n * \n * Constructor: mxSwimlaneManager\n *\n * Constructs a new swimlane manager for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxSwimlaneManager(graph, horizontal, addEnabled, resizeEnabled)\n{\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.addEnabled = (addEnabled != null) ? addEnabled : true;\n\tthis.resizeEnabled = (resizeEnabled != null) ? resizeEnabled : true;\n\n\tthis.addHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled() && this.isAddEnabled())\n\t\t{\n\t\t\tthis.cellsAdded(evt.getProperty('cells'));\n\t\t}\n\t});\n\t\n\tthis.resizeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled() && this.isResizeEnabled())\n\t\t{\n\t\t\tthis.cellsResized(evt.getProperty('cells'));\n\t\t}\n\t});\n\t\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxSwimlaneManager.prototype = new mxEventSource();\nmxSwimlaneManager.prototype.constructor = mxSwimlaneManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxSwimlaneManager.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxSwimlaneManager.prototype.enabled = true;\n\n/**\n * Variable: horizontal\n * \n * Specifies the orientation of the swimlanes. Default is true.\n */\nmxSwimlaneManager.prototype.horizontal = true;\n\n/**\n * Variable: addEnabled\n * \n * Specifies if newly added cells should be resized to match the size of their\n * existing siblings. Default is true.\n */\nmxSwimlaneManager.prototype.addEnabled = true;\n\n/**\n * Variable: resizeEnabled\n * \n * Specifies if resizing of swimlanes should be handled. Default is true.\n */\nmxSwimlaneManager.prototype.resizeEnabled = true;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxSwimlaneManager.prototype.addHandler = null;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxSwimlaneManager.prototype.resizeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxSwimlaneManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxSwimlaneManager.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxSwimlaneManager.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: setHorizontal\n * \n * Sets <horizontal>.\n */\nmxSwimlaneManager.prototype.setHorizontal = function(value)\n{\n\tthis.horizontal = value;\n};\n\n/**\n * Function: isAddEnabled\n * \n * Returns <addEnabled>.\n */\nmxSwimlaneManager.prototype.isAddEnabled = function()\n{\n\treturn this.addEnabled;\n};\n\n/**\n * Function: setAddEnabled\n * \n * Sets <addEnabled>.\n */\nmxSwimlaneManager.prototype.setAddEnabled = function(value)\n{\n\tthis.addEnabled = value;\n};\n\n/**\n * Function: isResizeEnabled\n * \n * Returns <resizeEnabled>.\n */\nmxSwimlaneManager.prototype.isResizeEnabled = function()\n{\n\treturn this.resizeEnabled;\n};\n\n/**\n * Function: setResizeEnabled\n * \n * Sets <resizeEnabled>.\n */\nmxSwimlaneManager.prototype.setResizeEnabled = function(value)\n{\n\tthis.resizeEnabled = value;\n};\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this manager operates on.\n */\nmxSwimlaneManager.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the manager operates on.\n */\nmxSwimlaneManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.removeListener(this.addHandler);\n\t\tthis.graph.removeListener(this.resizeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.addListener(mxEvent.ADD_CELLS, this.addHandler);\n\t\tthis.graph.addListener(mxEvent.CELLS_RESIZED, this.resizeHandler);\n\t}\n};\n\n/**\n * Function: isSwimlaneIgnored\n * \n * Returns true if the given swimlane should be ignored.\n */\nmxSwimlaneManager.prototype.isSwimlaneIgnored = function(swimlane)\n{\n\treturn !this.getGraph().isSwimlane(swimlane);\n};\n\n/**\n * Function: isCellHorizontal\n * \n * Returns true if the given cell is horizontal. If the given cell is not a\n * swimlane, then the global orientation is returned.\n */\nmxSwimlaneManager.prototype.isCellHorizontal = function(cell)\n{\n\tif (this.graph.isSwimlane(cell))\n\t{\n\t\tvar style = this.graph.getCellStyle(cell);\n\t\t\n\t\treturn mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, 1) == 1;\n\t}\n\t\n\treturn !this.isHorizontal();\n};\n\n/**\n * Function: cellsAdded\n * \n * Called if any cells have been added.\n * \n * Parameters:\n * \n * cell - Array of <mxCells> that have been added.\n */\nmxSwimlaneManager.prototype.cellsAdded = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!this.isSwimlaneIgnored(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.swimlaneAdded(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: swimlaneAdded\n * \n * Updates the size of the given swimlane to match that of any existing\n * siblings swimlanes.\n * \n * Parameters:\n * \n * swimlane - <mxCell> that represents the new swimlane.\n */\nmxSwimlaneManager.prototype.swimlaneAdded = function(swimlane)\n{\n\tvar model = this.getGraph().getModel();\n\tvar parent = model.getParent(swimlane);\n\tvar childCount = model.getChildCount(parent);\n\tvar geo = null;\n\t\n\t// Finds the first valid sibling swimlane as reference\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (child != swimlane && !this.isSwimlaneIgnored(child))\n\t\t{\n\t\t\tgeo = model.getGeometry(child);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Applies the size of the refernece to the newly added swimlane\n\tif (geo != null)\n\t{\n\t\tvar parentHorizontal = (parent != null) ? this.isCellHorizontal(parent) : this.horizontal;\n\t\tthis.resizeSwimlane(swimlane, geo.width, geo.height, parentHorizontal);\n\t}\n};\n\n/**\n * Function: cellsResized\n * \n * Called if any cells have been resizes. Calls <swimlaneResized> for all\n * swimlanes where <isSwimlaneIgnored> returns false.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose size was changed.\n */\nmxSwimlaneManager.prototype.cellsResized = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Finds the top-level swimlanes and adds offsets\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!this.isSwimlaneIgnored(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tvar geo = model.getGeometry(cells[i]);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar size = new mxRectangle(0, 0, geo.width, geo.height);\n\t\t\t\t\t\tvar top = cells[i];\n\t\t\t\t\t\tvar current = top;\n\t\t\t\t\t\t\n\t\t\t\t\t\twhile (current != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttop = current;\n\t\t\t\t\t\t\tcurrent = model.getParent(current);\n\t\t\t\t\t\t\tvar tmp = (this.graph.isSwimlane(current)) ?\n\t\t\t\t\t\t\t\t\tthis.graph.getStartSize(current) :\n\t\t\t\t\t\t\t\t\tnew mxRectangle();\n\t\t\t\t\t\t\tsize.width += tmp.width;\n\t\t\t\t\t\t\tsize.height += tmp.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar parentHorizontal = (current != null) ? this.isCellHorizontal(current) : this.horizontal;\n\t\t\t\t\t\tthis.resizeSwimlane(top, size.width, size.height, parentHorizontal);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resizeSwimlane\n * \n * Called from <cellsResized> for all swimlanes that are not ignored to update\n * the size of the siblings and the size of the parent swimlanes, recursively,\n * if <bubbling> is true.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose size has changed.\n */\nmxSwimlaneManager.prototype.resizeSwimlane = function(swimlane, w, h, parentHorizontal)\n{\n\tvar model = this.getGraph().getModel();\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvar horizontal = this.isCellHorizontal(swimlane);\n\t\t\n\t\tif (!this.isSwimlaneIgnored(swimlane))\n\t\t{\n\t\t\tvar geo = model.getGeometry(swimlane);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tif ((parentHorizontal && geo.height != h) || (!parentHorizontal && geo.width != w))\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\tif (parentHorizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.height = h;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.width = w;\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel.setGeometry(swimlane, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar tmp = (this.graph.isSwimlane(swimlane)) ?\n\t\t\t\tthis.graph.getStartSize(swimlane) :\n\t\t\t\tnew mxRectangle();\n\t\tw -= tmp.width;\n\t\th -= tmp.height;\n\t\t\n\t\tvar childCount = model.getChildCount(swimlane);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(swimlane, i);\n\t\t\tthis.resizeSwimlane(child, w, h, horizontal);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxSwimlaneManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxSwimlaneManager = typeof mxSwimlaneManager !== 'undefined' ? mxSwimlaneManager : undefined;\n"]}