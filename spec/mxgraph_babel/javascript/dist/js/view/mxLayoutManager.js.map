{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/view/mxLayoutManager.js"],"names":["mxLayoutManager","graph","undoHandler","mxUtils","bind","sender","evt","isEnabled","beforeUndo","getProperty","moveHandler","cellsMoved","setGraph","prototype","mxEventSource","constructor","bubbling","enabled","updateHandler","setEnabled","isBubbling","setBubbling","value","getGraph","model","getModel","removeListener","addListener","mxEvent","BEFORE_UNDO","MOVE_CELLS","getLayout","parent","undoableEdit","cells","getCellsForChanges","changes","tmp","i","length","concat","getDescendants","getParents","executeLayoutForCells","sorted","sortCells","slice","reverse","layoutCells","point","convertPoint","container","getClientX","getClientY","getParent","indexOf","layout","moveCell","x","y","dict","mxDictionary","result","change","mxRootChange","getCellsForChange","j","get","put","push","mxChildChange","child","previous","mxTerminalChange","mxGeometryChange","cell","mxVisibleChange","mxStyleChange","beginUpdate","last","getRoot","executeLayout","fireEvent","mxEventObject","LAYOUT_CELLS","endUpdate","execute","destroy","__mxOutput","undefined"],"mappings":"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","file":"mxLayoutManager.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLayoutManager\n * \n * Implements a layout manager that runs a given layout after any changes to the graph:\n * \n * Example:\n * \n * (code)\n * var layoutMgr = new mxLayoutManager(graph);\n * layoutMgr.getLayout = function(cell)\n * {\n *   return layout;\n * };\n * (end)\n * \n * Event: mxEvent.LAYOUT_CELLS\n * \n * Fires between begin- and endUpdate after all cells have been layouted in\n * <layoutCells>. The <code>cells</code> property contains all cells that have\n * been passed to <layoutCells>.\n * \n * Constructor: mxLayoutManager\n *\n * Constructs a new automatic layout for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxLayoutManager(graph)\n{\n\t// Executes the layout before the changes are dispatched\n\tthis.undoHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.beforeUndo(evt.getProperty('edit'));\n\t\t}\n\t});\n\t\n\t// Notifies the layout of a move operation inside a parent\n\tthis.moveHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.cellsMoved(evt.getProperty('cells'), evt.getProperty('event'));\n\t\t}\n\t});\n\t\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxLayoutManager.prototype = new mxEventSource();\nmxLayoutManager.prototype.constructor = mxLayoutManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxLayoutManager.prototype.graph = null;\n\n/**\n * Variable: bubbling\n * \n * Specifies if the layout should bubble along\n * the cell hierarchy. Default is true.\n */\nmxLayoutManager.prototype.bubbling = true;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxLayoutManager.prototype.enabled = true;\n\n/**\n * Variable: updateHandler\n * \n * Holds the function that handles the endUpdate event.\n */\nmxLayoutManager.prototype.updateHandler = null;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxLayoutManager.prototype.moveHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxLayoutManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxLayoutManager.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isBubbling\n * \n * Returns true if a layout should bubble, that is, if the parent layout\n * should be executed whenever a cell layout (layout of the children of\n * a cell) has been executed. This implementation returns <bubbling>.\n */\nmxLayoutManager.prototype.isBubbling = function()\n{\n\treturn this.bubbling;\n};\n\n/**\n * Function: setBubbling\n * \n * Sets <bubbling>.\n */\nmxLayoutManager.prototype.setBubbling = function(value)\n{\n\tthis.bubbling = value;\n};\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this layout operates on.\n */\nmxLayoutManager.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the layouts operate on.\n */\nmxLayoutManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tvar model = this.graph.getModel();\t\t\n\t\tmodel.removeListener(this.undoHandler);\n\t\tthis.graph.removeListener(this.moveHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tvar model = this.graph.getModel();\t\n\t\tmodel.addListener(mxEvent.BEFORE_UNDO, this.undoHandler);\n\t\tthis.graph.addListener(mxEvent.MOVE_CELLS, this.moveHandler);\n\t}\n};\n\n/**\n * Function: getLayout\n * \n * Returns the layout to be executed for the given graph and parent.\n */\nmxLayoutManager.prototype.getLayout = function(parent)\n{\n\treturn null;\n};\n\n/**\n * Function: beforeUndo\n * \n * Called from the undoHandler.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been moved.\n * evt - Mouse event that represents the mousedown.\n */\nmxLayoutManager.prototype.beforeUndo = function(undoableEdit)\n{\n\tvar cells = this.getCellsForChanges(undoableEdit.changes);\n\tvar model = this.getGraph().getModel();\n\n\t// Adds all descendants\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\ttmp = tmp.concat(model.getDescendants(cells[i]));\n\t}\n\t\n\tcells = tmp;\n\t\n\t// Adds all parent ancestors\n\tif (this.isBubbling())\n\t{\n\t\ttmp = model.getParents(cells);\n\t\t\n\t\twhile (tmp.length > 0)\n\t\t{\n\t\t\tcells = cells.concat(tmp);\n\t\t\ttmp = model.getParents(tmp);\n\t\t}\n\t}\n\t\n\tthis.executeLayoutForCells(cells);\n};\n\n/**\n * Function: executeLayout\n * \n * Executes the given layout on the given parent.\n */\nmxLayoutManager.prototype.executeLayoutForCells = function(cells)\n{\n\t// Adds reverse to this array to avoid duplicate execution of leafes\n\t// Works like capture/bubble for events, first executes all layout\n\t// from top to bottom and in reverse order and removes duplicates.\n\tvar sorted = mxUtils.sortCells(cells, true);\n\tsorted = sorted.concat(sorted.slice().reverse());\n\tthis.layoutCells(sorted);\n};\n\n/**\n * Function: cellsMoved\n * \n * Called from the moveHandler.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been moved.\n * evt - Mouse event that represents the mousedown.\n */\nmxLayoutManager.prototype.cellsMoved = function(cells, evt)\n{\n\tif (cells != null && evt != null)\n\t{\n\t\tvar point = mxUtils.convertPoint(this.getGraph().container,\n\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\t// Checks if a layout exists to take care of the moving if the\n\t\t// parent itself is not being moved\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar parent = model.getParent(cells[i]);\n\t\t\t\n\t\t\tif (mxUtils.indexOf(cells, parent) < 0)\n\t\t\t{\n\t\t\t\tvar layout = this.getLayout(parent);\n\t\n\t\t\t\tif (layout != null)\n\t\t\t\t{\n\t\t\t\t\tlayout.moveCell(cells[i], point.x, point.y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getCellsForEdit\n * \n * Returns the cells to be layouted for the given sequence of changes.\n */\nmxLayoutManager.prototype.getCellsForChanges = function(changes)\n{\n\tvar dict = new mxDictionary();\n\tvar result = [];\n\t\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tvar change = changes[i];\n\t\t\n\t\tif (change instanceof mxRootChange)\n\t\t{\n\t\t\treturn [];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar cells = this.getCellsForChange(change);\n\t\t\t\n\t\t\tfor (var j = 0; j < cells.length; j++)\n\t\t\t{\n\t\t\t\tif (cells[j] != null && !dict.get(cells[j]))\n\t\t\t\t{\n\t\t\t\t\tdict.put(cells[j], true);\n\t\t\t\t\tresult.push(cells[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsForChange\n * \n * Executes all layouts which have been scheduled during the\n * changes.\n */\nmxLayoutManager.prototype.getCellsForChange = function(change)\n{\n\tvar model = this.getGraph().getModel();\n\t\n\tif (change instanceof mxChildChange)\n\t{\n\t\treturn [change.child, change.previous, model.getParent(change.child)];\n\t}\n\telse if (change instanceof mxTerminalChange || change instanceof mxGeometryChange)\n\t{\n\t\treturn [change.cell, model.getParent(change.cell)];\n\t}\n\telse if (change instanceof mxVisibleChange || change instanceof mxStyleChange)\n\t{\n\t\treturn [change.cell];\n\t}\n\t\n\treturn [];\n};\n\n/**\n * Function: layoutCells\n * \n * Executes all layouts which have been scheduled during the\n * changes.\n */\nmxLayoutManager.prototype.layoutCells = function(cells)\n{\n\tif (cells.length > 0)\n\t{\n\t\t// Invokes the layouts while removing duplicates\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tmodel.beginUpdate();\n\t\ttry \n\t\t{\n\t\t\tvar last = null;\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (cells[i] != model.getRoot() && cells[i] != last)\n\t\t\t\t{\n\t\t\t\t\tif (this.executeLayout(this.getLayout(cells[i]), cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tlast = cells[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.LAYOUT_CELLS, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: executeLayout\n * \n * Executes the given layout on the given parent.\n */\nmxLayoutManager.prototype.executeLayout = function(layout, parent)\n{\n\tvar result = false;\n\t\n\tif (layout != null && parent != null)\n\t{\n\t\tlayout.execute(parent);\n\t\tresult = true;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxLayoutManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxLayoutManager = typeof mxLayoutManager !== 'undefined' ? mxLayoutManager : undefined;\n"]}