{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/view/mxGraphView.js"],"names":["mxGraphView","graph","translate","mxPoint","graphBounds","mxRectangle","states","mxDictionary","mxCurrentRootChange","view","root","previous","isUp","tmp","currentRoot","model","getModel","getParent","prototype","mxEventSource","constructor","EMPTY_POINT","doneResource","mxClient","language","updatingDocumentResource","allowEval","captureDocumentGesture","optimizeVmlReflows","rendering","scale","updateStyle","lastNode","lastHtmlNode","lastForegroundNode","lastForegroundHtmlNode","getGraphBounds","setGraphBounds","value","getBounds","cells","result","length","i","isVertex","isEdge","state","getState","fromRectangle","add","setCurrentRoot","change","execute","edit","mxUndoableEdit","fireEvent","mxEventObject","mxEvent","UNDO","sizeDidChange","scaleAndTranslate","dx","dy","previousScale","previousTranslate","x","y","isEventsEnabled","viewStateChanged","SCALE_AND_TRANSLATE","getScale","setScale","SCALE","getTranslate","setTranslate","TRANSLATE","revalidate","refresh","clear","invalidate","validate","cell","force","recurse","getRoot","removeState","childCount","getChildCount","getChildAt","includeEdges","invalid","invalidating","child","edgeCount","getEdgeCount","getEdgeAt","t0","mxLog","enter","window","status","mxResources","get","resetValidationState","prevDisplay","canvas","textDiv","document","documentMode","IS_EM","IS_QUIRKS","placeholder","createElement","style","position","width","clientWidth","height","clientHeight","parentNode","appendChild","drawPane","display","whiteSpace","visibility","zoom","body","getBoundingBox","validateCellState","validateCell","getEmptyBounds","validateBackground","removeChild","leave","bbox","shape","boundingBox","clone","text","bounds","createBackgroundPageShape","mxRectangleShape","validateBackgroundImage","validateBackgroundPage","bg","getBackgroundImage","backgroundImage","image","src","destroy","mxImageShape","dialect","init","backgroundPane","redraw","addGestureListeners","node","mxUtils","bind","evt","fireMouseEvent","MOUSE_DOWN","mxMouseEvent","MOUSE_MOVE","MOUSE_UP","redrawBackgroundImage","pageVisible","getBackgroundPageBounds","backgroundPageShape","isShadow","nativeDblClickEnabled","addListener","dblClick","tooltipHandler","isHideOnHover","hide","isMouseDown","isConsumed","fmt","pageFormat","ps","pageScale","visible","isCellVisible","isCellCollapsed","getCellStyle","setVisibleTerminalState","getVisibleTerminal","updateCellState","cellRenderer","isRendering","updateCachedBounds","stateValidated","absoluteOffset","origin","pState","offset","getChildOffsetForCell","geo","getCellGeometry","relative","getPoint","unscaledWidth","updateVertexState","updateEdgeState","alpha","toRadians","mxConstants","STYLE_ROTATION","cos","Math","sin","ct","getCenterX","getCenterY","cx","pt","getRotatedPoint","updateVertexLabelOffset","source","getVisibleTerminalState","target","getTerminal","getTerminalPoint","updateFixedTerminalPoints","updatePoints","points","updateFloatingTerminalPoints","pts","absolutePoints","updateEdgeBounds","updateEdgeLabelOffset","h","getValue","STYLE_LABEL_POSITION","ALIGN_CENTER","ALIGN_LEFT","lw","STYLE_LABEL_WIDTH","ALIGN_RIGHT","align","STYLE_ALIGN","v","STYLE_VERTICAL_LABEL_POSITION","ALIGN_MIDDLE","ALIGN_TOP","ALIGN_BOTTOM","fg","keepEdgesInForeground","keepEdgesInBackground","htmlNode","insertStateAfter","edge","updateFixedTerminalPoint","getConnectionConstraint","terminal","constraint","setAbsoluteTerminalPoint","getFixedTerminalPoint","getConnectionPoint","s","tr","orig","updateBoundsFromStencil","stencil","aspect","asp","computeAspect","setRect","w0","h0","push","edgeStyle","getEdgeStyle","getTerminalPort","trg","srcBounds","trgBounds","transformControlPoint","isLoopStyleEnabled","sc","tc","STYLE_ORTHOGONAL_LOOP","point","STYLE_LOOP","defaultLoopStyle","STYLE_NOEDGESTYLE","STYLE_EDGE","mxStyleRegistry","isAllowEval","eval","p0","pe","updateFloatingTerminalPoint","start","end","getFloatingTerminalPoint","next","getNextPoint","orth","isOrthogonal","Number","center","border","parseFloat","STYLE_PERIMETER_SPACING","STYLE_SOURCE_PERIMETER_SPACING","STYLE_TARGET_PERIMETER_SPACING","getPerimeterPoint","key","STYLE_SOURCE_PORT","STYLE_TARGET_PORT","id","getCell","orthogonal","perimeter","getPerimeterFunction","getPerimeterBounds","flipH","flipV","STYLE_FLIPH","STYLE_FLIPV","getRoutingCenterX","f","STYLE_ROUTING_CENTER_X","getRoutingCenterY","STYLE_ROUTING_CENTER_Y","STYLE_PERIMETER","opposite","count","min","max","best","terminalDistance","sqrt","segments","minX","minY","maxX","maxY","segment","markerSize","geometry","gx","pointCount","dist","round","index","factor","gy","offsetX","offsetY","nx","ny","getRelativePoint","edgeState","getGeometry","totalLength","minDist","ptSegDistSq","seg","x2","y2","x1","y1","px","py","xSegment","ySegment","projlenSq","dotprod","projlen","yDistance","direction","relativeCcw","x0","y0","off","create","createState","put","setRendering","setAllowEval","getStates","setStates","getCellStates","remove","mxCellState","getCanvas","getBackgroundPane","getDrawPane","getOverlayPane","overlayPane","getDecoratorPane","decoratorPane","isContainerEvent","getSource","container","isScrollEvent","getOffset","clientX","clientY","outWidth","offsetWidth","inWidth","outHeight","offsetHeight","inHeight","installListeners","DIALECT_SVG","createSvg","DIALECT_VML","createVml","createHtml","IS_TOUCH","fireGestureEvent","consume","IS_IE","IS_IE11","IS_GC","IS_OP","IS_SF","getClientX","getClientY","convertPoint","getCellAt","addMouseListener","mouseDown","sender","me","popupMenuHandler","hideMenu","mouseMove","mouseUp","moveHandler","endHandler","createHtmlPane","overflow","updateContainerStyle","onResize","updateHtmlCanvasSize","ow","oh","pane","left","top","createVmlPane","VML_PREFIX","setAttribute","createElementNS","NS_SVG","getCurrentStyle","IS_POINTER","touchAction","ownerSVGElement","removeGestureListeners","release","getTranslateForRoot","name","UP","DOWN","__mxOutput","undefined"],"mappings":"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","file":"mxGraphView.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphView\n *\n * Extends <mxEventSource> to implement a view for a graph. This class is in\n * charge of computing the absolute coordinates for the relative child\n * geometries, the points for perimeters and edge styles and keeping them\n * cached in <mxCellStates> for faster retrieval. The states are updated\n * whenever the model or the view state (translate, scale) changes. The scale\n * and translate are honoured in the bounds.\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the root was changed in <setCurrentRoot>. The <code>edit</code>\n * property contains the <mxUndoableEdit> which contains the\n * <mxCurrentRootChange>.\n * \n * Event: mxEvent.SCALE_AND_TRANSLATE\n * \n * Fires after the scale and translate have been changed in <scaleAndTranslate>.\n * The <code>scale</code>, <code>previousScale</code>, <code>translate</code>\n * and <code>previousTranslate</code> properties contain the new and previous\n * scale and translate, respectively.\n * \n * Event: mxEvent.SCALE\n * \n * Fires after the scale was changed in <setScale>. The <code>scale</code> and\n * <code>previousScale</code> properties contain the new and previous scale.\n * \n * Event: mxEvent.TRANSLATE\n * \n * Fires after the translate was changed in <setTranslate>. The\n * <code>translate</code> and <code>previousTranslate</code> properties contain\n * the new and previous value for translate.\n * \n * Event: mxEvent.DOWN and mxEvent.UP\n * \n * Fire if the current root is changed by executing an <mxCurrentRootChange>.\n * The event name depends on the location of the root in the cell hierarchy\n * with respect to the current root. The <code>root</code> and\n * <code>previous</code> properties contain the new and previous root,\n * respectively.\n * \n * Constructor: mxGraphView\n *\n * Constructs a new view for the given <mxGraph>.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphView(graph)\n{\n\tthis.graph = graph;\n\tthis.translate = new mxPoint();\n\tthis.graphBounds = new mxRectangle();\n\tthis.states = new mxDictionary();\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphView.prototype = new mxEventSource();\nmxGraphView.prototype.constructor = mxGraphView;\n\n/**\n *\n */\nmxGraphView.prototype.EMPTY_POINT = new mxPoint();\n\n/**\n * Variable: doneResource\n * \n * Specifies the resource key for the status message after a long operation.\n * If the resource for this key does not exist then the value is used as\n * the status message. Default is 'done'.\n */\nmxGraphView.prototype.doneResource = (mxClient.language != 'none') ? 'done' : '';\n\n/**\n * Function: updatingDocumentResource\n *\n * Specifies the resource key for the status message while the document is\n * being updated. If the resource for this key does not exist then the\n * value is used as the status message. Default is 'updatingDocument'.\n */\nmxGraphView.prototype.updatingDocumentResource = (mxClient.language != 'none') ? 'updatingDocument' : '';\n\n/**\n * Variable: allowEval\n * \n * Specifies if string values in cell styles should be evaluated using\n * <mxUtils.eval>. This will only be used if the string values can't be mapped\n * to objects using <mxStyleRegistry>. Default is false. NOTE: Enabling this\n * switch carries a possible security risk.\n */\nmxGraphView.prototype.allowEval = false;\n\n/**\n * Variable: captureDocumentGesture\n * \n * Specifies if a gesture should be captured when it goes outside of the\n * graph container. Default is true.\n */\nmxGraphView.prototype.captureDocumentGesture = true;\n\n/**\n * Variable: optimizeVmlReflows\n * \n * Specifies if the <canvas> should be hidden while rendering in IE8 standards\n * mode and quirks mode. This will significantly improve rendering performance.\n * Default is true.\n */\nmxGraphView.prototype.optimizeVmlReflows = true;\n\n/**\n * Variable: rendering\n * \n * Specifies if shapes should be created, updated and destroyed using the\n * methods of <mxCellRenderer> in <graph>. Default is true.\n */\nmxGraphView.prototype.rendering = true;\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxGraphView.prototype.graph = null;\n\n/**\n * Variable: currentRoot\n *\n * <mxCell> that acts as the root of the displayed cell hierarchy.\n */\nmxGraphView.prototype.currentRoot = null;\n\n/**\n * Variable: graphBounds\n *\n * <mxRectangle> that caches the scales, translated bounds of the current view.\n */\nmxGraphView.prototype.graphBounds = null;\n\n/**\n * Variable: scale\n * \n * Specifies the scale. Default is 1 (100%).\n */\nmxGraphView.prototype.scale = 1;\n\t\n/**\n * Variable: translate\n *\n * <mxPoint> that specifies the current translation. Default is a new\n * empty <mxPoint>.\n */\nmxGraphView.prototype.translate = null;\n\n/**\n * Variable: states\n * \n * <mxDictionary> that maps from cell IDs to <mxCellStates>.\n */\nmxGraphView.prototype.states = null;\n\n/**\n * Variable: updateStyle\n * \n * Specifies if the style should be updated in each validation step. If this\n * is false then the style is only updated if the state is created or if the\n * style of the cell was changed. Default is false.\n */\nmxGraphView.prototype.updateStyle = false;\n\n/**\n * Variable: lastNode\n * \n * During validation, this contains the last DOM node that was processed.\n */\nmxGraphView.prototype.lastNode = null;\n\n/**\n * Variable: lastHtmlNode\n * \n * During validation, this contains the last HTML DOM node that was processed.\n */\nmxGraphView.prototype.lastHtmlNode = null;\n\n/**\n * Variable: lastForegroundNode\n * \n * During validation, this contains the last edge's DOM node that was processed.\n */\nmxGraphView.prototype.lastForegroundNode = null;\n\n/**\n * Variable: lastForegroundHtmlNode\n * \n * During validation, this contains the last edge HTML DOM node that was processed.\n */\nmxGraphView.prototype.lastForegroundHtmlNode = null;\n\n/**\n * Function: getGraphBounds\n *\n * Returns <graphBounds>.\n */\nmxGraphView.prototype.getGraphBounds = function()\n{\n\treturn this.graphBounds;\n};\n\n/**\n * Function: setGraphBounds\n *\n * Sets <graphBounds>.\n */\nmxGraphView.prototype.setGraphBounds = function(value)\n{\n\tthis.graphBounds = value;\n};\n\n/**\n * Function: getBounds\n * \n * Returns the union of all <mxCellStates> for the given array of <mxCells>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounds should be returned.\n */\nmxGraphView.prototype.getBounds = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (model.isVertex(cells[i]) || model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar state = this.getState(cells[i]);\n\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(state);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(state);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: setCurrentRoot\n *\n * Sets and returns the current root and fires an <undo> event before\n * calling <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * root - <mxCell> that specifies the root of the displayed cell hierarchy.\n */\nmxGraphView.prototype.setCurrentRoot = function(root)\n{\n\tif (this.currentRoot != root)\n\t{\n\t\tvar change = new mxCurrentRootChange(this, root);\n\t\tchange.execute();\n\t\tvar edit = new mxUndoableEdit(this, false);\n\t\tedit.add(change);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n\t\tthis.graph.sizeDidChange();\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: scaleAndTranslate\n *\n * Sets the scale and translation and fires a <scale> and <translate> event\n * before calling <revalidate> followed by <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * scale - Decimal value that specifies the new scale (1 is 100%).\n * dx - X-coordinate of the translation.\n * dy - Y-coordinate of the translation.\n */\nmxGraphView.prototype.scaleAndTranslate = function(scale, dx, dy)\n{\n\tvar previousScale = this.scale;\n\tvar previousTranslate = new mxPoint(this.translate.x, this.translate.y);\n\t\n\tif (this.scale != scale || this.translate.x != dx || this.translate.y != dy)\n\t{\n\t\tthis.scale = scale;\n\t\t\n\t\tthis.translate.x = dx;\n\t\tthis.translate.y = dy;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SCALE_AND_TRANSLATE,\n\t\t'scale', scale, 'previousScale', previousScale,\n\t\t'translate', this.translate, 'previousTranslate', previousTranslate));\n};\n\n/**\n * Function: getScale\n * \n * Returns the <scale>.\n */\nmxGraphView.prototype.getScale = function()\n{\n\treturn this.scale;\n};\n\n/**\n * Function: setScale\n *\n * Sets the scale and fires a <scale> event before calling <revalidate> followed\n * by <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * value - Decimal value that specifies the new scale (1 is 100%).\n */\nmxGraphView.prototype.setScale = function(value)\n{\n\tvar previousScale = this.scale;\n\t\n\tif (this.scale != value)\n\t{\n\t\tthis.scale = value;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SCALE,\n\t\t'scale', value, 'previousScale', previousScale));\n};\n\n/**\n * Function: getTranslate\n * \n * Returns the <translate>.\n */\nmxGraphView.prototype.getTranslate = function()\n{\n\treturn this.translate;\n};\n\n/**\n * Function: setTranslate\n *\n * Sets the translation and fires a <translate> event before calling\n * <revalidate> followed by <mxGraph.sizeDidChange>. The translation is the\n * negative of the origin.\n *\n * Parameters:\n *\n * dx - X-coordinate of the translation.\n * dy - Y-coordinate of the translation.\n */\nmxGraphView.prototype.setTranslate = function(dx, dy)\n{\n\tvar previousTranslate = new mxPoint(this.translate.x, this.translate.y);\n\t\n\tif (this.translate.x != dx || this.translate.y != dy)\n\t{\n\t\tthis.translate.x = dx;\n\t\tthis.translate.y = dy;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.TRANSLATE,\n\t\t'translate', this.translate, 'previousTranslate', previousTranslate));\n};\n\n/**\n * Function: viewStateChanged\n * \n * Invoked after <scale> and/or <translate> has changed.\n */\nmxGraphView.prototype.viewStateChanged = function()\n{\n\tthis.revalidate();\n\tthis.graph.sizeDidChange();\n};\n\n/**\n * Function: refresh\n *\n * Clears the view if <currentRoot> is not null and revalidates.\n */\nmxGraphView.prototype.refresh = function()\n{\n\tif (this.currentRoot != null)\n\t{\n\t\tthis.clear();\n\t}\n\t\n\tthis.revalidate();\n};\n\n/**\n * Function: revalidate\n *\n * Revalidates the complete view with all cell states.\n */\nmxGraphView.prototype.revalidate = function()\n{\n\tthis.invalidate();\n\tthis.validate();\n};\n\n/**\n * Function: clear\n *\n * Removes the state of the given cell and all descendants if the given\n * cell is not the current root.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> for which the state should be removed. Default\n * is the root of the model.\n * force - Boolean indicating if the current root should be ignored for\n * recursion.\n */\nmxGraphView.prototype.clear = function(cell, force, recurse)\n{\n\tvar model = this.graph.getModel();\n\tcell = cell || model.getRoot();\n\tforce = (force != null) ? force : false;\n\trecurse = (recurse != null) ? recurse : true;\n\t\n\tthis.removeState(cell);\n\t\n\tif (recurse && (force || cell != this.currentRoot))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.clear(model.getChildAt(cell, i), force);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.invalidate(cell);\n\t}\n};\n\n/**\n * Function: invalidate\n * \n * Invalidates the state of the given cell, all its descendants and\n * connected edges.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be invalidated. Default is the root of the\n * model.\n */\nmxGraphView.prototype.invalidate = function(cell, recurse, includeEdges)\n{\n\tvar model = this.graph.getModel();\n\tcell = cell || model.getRoot();\n\trecurse = (recurse != null) ? recurse : true;\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tvar state = this.getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tstate.invalid = true;\n\t}\n\t\n\t// Avoids infinite loops for invalid graphs\n\tif (!cell.invalidating)\n\t{\n\t\tcell.invalidating = true;\n\t\t\n\t\t// Recursively invalidates all descendants\n\t\tif (recurse)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\tthis.invalidate(child, recurse, includeEdges);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Propagates invalidation to all connected edges\n\t\tif (includeEdges)\n\t\t{\n\t\t\tvar edgeCount = model.getEdgeCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t{\n\t\t\t\tthis.invalidate(model.getEdgeAt(cell, i), recurse, includeEdges);\n\t\t\t}\n\t\t}\n\t\t\n\t\tdelete cell.invalidating;\n\t}\n};\n\n/**\n * Function: validate\n * \n * Calls <validateCell> and <validateCellState> and updates the <graphBounds>\n * using <getBoundingBox>. Finally the background is validated using\n * <validateBackground>.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be used as the root of the validation.\n * Default is <currentRoot> or the root of the model.\n */\nmxGraphView.prototype.validate = function(cell)\n{\n\tvar t0 = mxLog.enter('mxGraphView.validate');\n\twindow.status = mxResources.get(this.updatingDocumentResource) ||\n\t\tthis.updatingDocumentResource;\n\t\n\tthis.resetValidationState();\n\t\n\t// Improves IE rendering speed by minimizing reflows\n\tvar prevDisplay = null;\n\t\n\tif (this.optimizeVmlReflows && this.canvas != null && this.textDiv == null &&\n\t\t((document.documentMode == 8 && !mxClient.IS_EM) || mxClient.IS_QUIRKS))\n\t{\n\t\t// Placeholder keeps scrollbar positions when canvas is hidden\n\t\tthis.placeholder = document.createElement('div');\n\t\tthis.placeholder.style.position = 'absolute';\n\t\tthis.placeholder.style.width = this.canvas.clientWidth + 'px';\n\t\tthis.placeholder.style.height = this.canvas.clientHeight + 'px';\n\t\tthis.canvas.parentNode.appendChild(this.placeholder);\n\n\t\tprevDisplay = this.drawPane.style.display;\n\t\tthis.canvas.style.display = 'none';\n\t\t\n\t\t// Creates temporary DIV used for text measuring in mxText.updateBoundingBox\n\t\tthis.textDiv = document.createElement('div');\n\t\tthis.textDiv.style.position = 'absolute';\n\t\tthis.textDiv.style.whiteSpace = 'nowrap';\n\t\tthis.textDiv.style.visibility = 'hidden';\n\t\tthis.textDiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\tthis.textDiv.style.zoom = '1';\n\t\t\n\t\tdocument.body.appendChild(this.textDiv);\n\t}\n\t\n\tvar graphBounds = this.getBoundingBox(this.validateCellState(\n\t\tthis.validateCell(cell || ((this.currentRoot != null) ?\n\t\t\tthis.currentRoot : this.graph.getModel().getRoot()))));\n\tthis.setGraphBounds((graphBounds != null) ? graphBounds : this.getEmptyBounds());\n\tthis.validateBackground();\n\t\n\tif (prevDisplay != null)\n\t{\n\t\tthis.canvas.style.display = prevDisplay;\n\t\tthis.textDiv.parentNode.removeChild(this.textDiv);\n\t\t\n\t\tif (this.placeholder != null)\n\t\t{\n\t\t\tthis.placeholder.parentNode.removeChild(this.placeholder);\n\t\t}\n\t\t\t\t\n\t\t// Textdiv cannot be reused\n\t\tthis.textDiv = null;\n\t}\n\t\n\tthis.resetValidationState();\n\t\n\twindow.status = mxResources.get(this.doneResource) ||\n\t\tthis.doneResource;\n\tmxLog.leave('mxGraphView.validate', t0);\n};\n\n/**\n * Function: getEmptyBounds\n * \n * Returns the bounds for an empty graph. This returns a rectangle at\n * <translate> with the size of 0 x 0.\n */\nmxGraphView.prototype.getEmptyBounds = function()\n{\n\treturn new mxRectangle(this.translate.x * this.scale, this.translate.y * this.scale);\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the bounding box of the shape and the label for the given\n * <mxCellState> and its children if recurse is true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose bounding box should be returned.\n * recurse - Optional boolean indicating if the children should be included.\n * Default is true.\n */\nmxGraphView.prototype.getBoundingBox = function(state, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\tvar bbox = null;\n\t\n\tif (state != null)\n\t{\n\t\tif (state.shape != null && state.shape.boundingBox != null)\n\t\t{\n\t\t\tbbox = state.shape.boundingBox.clone();\n\t\t}\n\t\t\n\t\t// Adds label bounding box to graph bounds\n\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tif (bbox != null)\n\t\t\t{\n\t\t\t\tbbox.add(state.text.boundingBox);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbbox = state.text.boundingBox.clone();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (recurse)\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\tvar childCount = model.getChildCount(state.cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar bounds = this.getBoundingBox(this.getState(model.getChildAt(state.cell, i)));\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tif (bbox == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox = bounds;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox.add(bounds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bbox;\n};\n\n/**\n * Function: createBackgroundPageShape\n *\n * Creates and returns the shape used as the background page.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that represents the bounds of the shape.\n */\nmxGraphView.prototype.createBackgroundPageShape = function(bounds)\n{\n\treturn new mxRectangleShape(bounds, 'white', 'black');\n};\n\n/**\n * Function: validateBackground\n *\n * Calls <validateBackgroundImage> and <validateBackgroundPage>.\n */\nmxGraphView.prototype.validateBackground = function()\n{\n\tthis.validateBackgroundImage();\n\tthis.validateBackgroundPage();\n};\n\n/**\n * Function: validateBackgroundImage\n * \n * Validates the background image.\n */\nmxGraphView.prototype.validateBackgroundImage = function()\n{\n\tvar bg = this.graph.getBackgroundImage();\n\t\n\tif (bg != null)\n\t{\n\t\tif (this.backgroundImage == null || this.backgroundImage.image != bg.src)\n\t\t{\n\t\t\tif (this.backgroundImage != null)\n\t\t\t{\n\t\t\t\tthis.backgroundImage.destroy();\n\t\t\t}\n\t\t\t\n\t\t\tvar bounds = new mxRectangle(0, 0, 1, 1);\n\t\t\t\n\t\t\tthis.backgroundImage = new mxImageShape(bounds, bg.src);\n\t\t\tthis.backgroundImage.dialect = this.graph.dialect;\n\t\t\tthis.backgroundImage.init(this.backgroundPane);\n\t\t\tthis.backgroundImage.redraw();\n\n\t\t\t// Workaround for ignored event on background in IE8 standards mode\n\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tmxEvent.addGestureListeners(this.backgroundImage.node,\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\t\t}),\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t\t\t}),\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.redrawBackgroundImage(this.backgroundImage, bg);\n\t}\n\telse if (this.backgroundImage != null)\n\t{\n\t\tthis.backgroundImage.destroy();\n\t\tthis.backgroundImage = null;\n\t}\n};\n\n/**\n * Function: validateBackgroundPage\n * \n * Validates the background page.\n */\nmxGraphView.prototype.validateBackgroundPage = function()\n{\n\tif (this.graph.pageVisible)\n\t{\n\t\tvar bounds = this.getBackgroundPageBounds();\n\t\t\n\t\tif (this.backgroundPageShape == null)\n\t\t{\n\t\t\tthis.backgroundPageShape = this.createBackgroundPageShape(bounds);\n\t\t\tthis.backgroundPageShape.scale = this.scale;\n\t\t\tthis.backgroundPageShape.isShadow = true;\n\t\t\tthis.backgroundPageShape.dialect = this.graph.dialect;\n\t\t\tthis.backgroundPageShape.init(this.backgroundPane);\n\t\t\tthis.backgroundPageShape.redraw();\n\t\t\t\n\t\t\t// Adds listener for double click handling on background\n\t\t\tif (this.graph.nativeDblClickEnabled)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(this.backgroundPageShape.node, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.dblClick(evt);\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\t// Adds basic listeners for graph event dispatching outside of the\n\t\t\t// container and finishing the handling of a single gesture\n\t\t\tmxEvent.addGestureListeners(this.backgroundPageShape.node,\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\t// Hides the tooltip if mouse is outside container\n\t\t\t\t\tif (this.graph.tooltipHandler != null && this.graph.tooltipHandler.isHideOnHover())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.tooltipHandler.hide();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.graph.isMouseDown && !mxEvent.isConsumed(evt))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.backgroundPageShape.scale = this.scale;\n\t\t\tthis.backgroundPageShape.bounds = bounds;\n\t\t\tthis.backgroundPageShape.redraw();\n\t\t}\n\t}\n\telse if (this.backgroundPageShape != null)\n\t{\n\t\tthis.backgroundPageShape.destroy();\n\t\tthis.backgroundPageShape = null;\n\t}\n};\n\n/**\n * Function: getBackgroundPageBounds\n * \n * Returns the bounds for the background page.\n */\nmxGraphView.prototype.getBackgroundPageBounds = function()\n{\n\tvar fmt = this.graph.pageFormat;\n\tvar ps = this.scale * this.graph.pageScale;\n\tvar bounds = new mxRectangle(this.scale * this.translate.x, this.scale * this.translate.y,\n\t\t\tfmt.width * ps, fmt.height * ps);\n\t\n\treturn bounds;\n};\n\n/**\n * Function: redrawBackgroundImage\n *\n * Updates the bounds and redraws the background image.\n * \n * Example:\n * \n * If the background image should not be scaled, this can be replaced with\n * the following.\n * \n * (code)\n * mxGraphView.prototype.redrawBackground = function(backgroundImage, bg)\n * {\n *   backgroundImage.bounds.x = this.translate.x;\n *   backgroundImage.bounds.y = this.translate.y;\n *   backgroundImage.bounds.width = bg.width;\n *   backgroundImage.bounds.height = bg.height;\n *\n *   backgroundImage.redraw();\n * };\n * (end)\n * \n * Parameters:\n * \n * backgroundImage - <mxImageShape> that represents the background image.\n * bg - <mxImage> that specifies the image and its dimensions.\n */\nmxGraphView.prototype.redrawBackgroundImage = function(backgroundImage, bg)\n{\n\tbackgroundImage.scale = this.scale;\n\tbackgroundImage.bounds.x = this.scale * this.translate.x;\n\tbackgroundImage.bounds.y = this.scale * this.translate.y;\n\tbackgroundImage.bounds.width = this.scale * bg.width;\n\tbackgroundImage.bounds.height = this.scale * bg.height;\n\n\tbackgroundImage.redraw();\n};\n\n/**\n * Function: validateCell\n * \n * Recursively creates the cell state for the given cell if visible is true and\n * the given cell is visible. If the cell is not visible but the state exists\n * then it is removed using <removeState>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose <mxCellState> should be created.\n * visible - Optional boolean indicating if the cell should be visible. Default\n * is true.\n */\nmxGraphView.prototype.validateCell = function(cell, visible)\n{\n\tvisible = (visible != null) ? visible : true;\n\t\n\tif (cell != null)\n\t{\n\t\tvisible = visible && this.graph.isCellVisible(cell);\n\t\tvar state = this.getState(cell, visible);\n\t\t\n\t\tif (state != null && !visible)\n\t\t{\n\t\t\tthis.removeState(cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tthis.validateCell(model.getChildAt(cell, i), visible &&\n\t\t\t\t\t(!this.isCellCollapsed(cell) || cell == this.currentRoot));\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: validateCellState\n * \n * Validates and repaints the <mxCellState> for the given <mxCell>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose <mxCellState> should be validated.\n * recurse - Optional boolean indicating if the children of the cell should be\n * validated. Default is true.\n */\nmxGraphView.prototype.validateCellState = function(cell, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\t\n\t\t\tif (state.invalid)\n\t\t\t{\n\t\t\t\tstate.invalid = false;\n\t\t\t\t\n\t\t\t\tif (state.style == null)\n\t\t\t\t{\n\t\t\t\t\tstate.style = this.graph.getCellStyle(state.cell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (cell != this.currentRoot)\n\t\t\t\t{\n\t\t\t\t\tthis.validateCellState(model.getParent(cell), false);\n\t\t\t\t}\n\n\t\t\t\tstate.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, true), false), true);\n\t\t\t\tstate.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, false), false), false);\n\t\t\t\t\n\t\t\t\tthis.updateCellState(state);\n\t\t\t\t\n\t\t\t\t// Repaint happens immediately after the cell is validated\n\t\t\t\tif (cell != this.currentRoot && !state.invalid)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.cellRenderer.redraw(state, false, this.isRendering());\n\n\t\t\t\t\t// Handles changes to invertex paintbounds after update of rendering shape\n\t\t\t\t\tstate.updateCachedBounds();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (recurse && !state.invalid)\n\t\t\t{\n\t\t\t\t// Updates order in DOM if recursively traversing\n\t\t\t\tif (state.shape != null)\n\t\t\t\t{\n\t\t\t\t\tthis.stateValidated(state);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tthis.validateCellState(model.getChildAt(cell, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: updateCellState\n * \n * Updates the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to be updated.\n */\nmxGraphView.prototype.updateCellState = function(state)\n{\n\tstate.absoluteOffset.x = 0;\n\tstate.absoluteOffset.y = 0;\n\tstate.origin.x = 0;\n\tstate.origin.y = 0;\n\tstate.length = 0;\n\t\n\tif (state.cell != this.currentRoot)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\tvar pState = this.getState(model.getParent(state.cell)); \n\t\t\n\t\tif (pState != null && pState.cell != this.currentRoot)\n\t\t{\n\t\t\tstate.origin.x += pState.origin.x;\n\t\t\tstate.origin.y += pState.origin.y;\n\t\t}\n\t\t\n\t\tvar offset = this.graph.getChildOffsetForCell(state.cell);\n\t\t\n\t\tif (offset != null)\n\t\t{\n\t\t\tstate.origin.x += offset.x;\n\t\t\tstate.origin.y += offset.y;\n\t\t}\n\t\t\n\t\tvar geo = this.graph.getCellGeometry(state.cell);\t\t\t\t\n\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tif (!model.isEdge(state.cell))\n\t\t\t{\n\t\t\t\toffset = geo.offset || this.EMPTY_POINT;\n\t\n\t\t\t\tif (geo.relative && pState != null)\n\t\t\t\t{\n\t\t\t\t\tif (model.isEdge(pState.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar origin = this.getPoint(pState, geo);\n\n\t\t\t\t\t\tif (origin != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.origin.x += (origin.x / this.scale) - pState.origin.x - this.translate.x;\n\t\t\t\t\t\t\tstate.origin.y += (origin.y / this.scale) - pState.origin.y - this.translate.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.origin.x += geo.x * pState.width / this.scale + offset.x;\n\t\t\t\t\t\tstate.origin.y += geo.y * pState.height / this.scale + offset.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstate.absoluteOffset.x = this.scale * offset.x;\n\t\t\t\t\tstate.absoluteOffset.y = this.scale * offset.y;\n\t\t\t\t\tstate.origin.x += geo.x;\n\t\t\t\t\tstate.origin.y += geo.y;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tstate.x = this.scale * (this.translate.x + state.origin.x);\n\t\t\tstate.y = this.scale * (this.translate.y + state.origin.y);\n\t\t\tstate.width = this.scale * geo.width;\n\t\t\tstate.unscaledWidth = geo.width;\n\t\t\tstate.height = this.scale * geo.height;\n\t\t\t\n\t\t\tif (model.isVertex(state.cell))\n\t\t\t{\n\t\t\t\tthis.updateVertexState(state, geo);\n\t\t\t}\n\t\t\t\n\t\t\tif (model.isEdge(state.cell))\n\t\t\t{\n\t\t\t\tthis.updateEdgeState(state, geo);\n\t\t\t}\n\t\t}\n\t}\n\n\tstate.updateCachedBounds();\n};\n\n/**\n * Function: isCellCollapsed\n * \n * Returns true if the children of the given cell should not be visible in the\n * view. This implementation uses <mxGraph.isCellVisible> but it can be\n * overidden to use a separate condition.\n */\nmxGraphView.prototype.isCellCollapsed = function(cell)\n{\n\treturn this.graph.isCellCollapsed(cell);\n};\n\n/**\n * Function: updateVertexState\n * \n * Validates the given cell state.\n */\nmxGraphView.prototype.updateVertexState = function(state, geo)\n{\n\tvar model = this.graph.getModel();\n\tvar pState = this.getState(model.getParent(state.cell));\n\t\n\tif (geo.relative && pState != null && !model.isEdge(pState.cell))\n\t{\n\t\tvar alpha = mxUtils.toRadians(pState.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\n\t\t\tvar ct = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\tvar cx = new mxPoint(pState.getCenterX(), pState.getCenterY());\n\t\t\tvar pt = mxUtils.getRotatedPoint(ct, cos, sin, cx);\n\t\t\tstate.x = pt.x - state.width / 2;\n\t\t\tstate.y = pt.y - state.height / 2;\n\t\t}\n\t}\n\t\n\tthis.updateVertexLabelOffset(state);\n};\n\n/**\n * Function: updateEdgeState\n * \n * Validates the given cell state.\n */\nmxGraphView.prototype.updateEdgeState = function(state, geo)\n{\n\tvar source = state.getVisibleTerminalState(true);\n\tvar target = state.getVisibleTerminalState(false);\n\t\n\t// This will remove edges with no terminals and no terminal points\n\t// as such edges are invalid and produce NPEs in the edge styles.\n\t// Also removes connected edges that have no visible terminals.\n\tif ((this.graph.model.getTerminal(state.cell, true) != null && source == null) ||\n\t\t(source == null && geo.getTerminalPoint(true) == null) ||\n\t\t(this.graph.model.getTerminal(state.cell, false) != null && target == null) ||\n\t\t(target == null && geo.getTerminalPoint(false) == null))\n\t{\n\t\tthis.clear(state.cell, true);\n\t}\n\telse\n\t{\n\t\tthis.updateFixedTerminalPoints(state, source, target);\n\t\tthis.updatePoints(state, geo.points, source, target);\n\t\tthis.updateFloatingTerminalPoints(state, source, target);\n\t\t\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tif (state.cell != this.currentRoot && (pts == null || pts.length < 2 ||\n\t\t\tpts[0] == null || pts[pts.length - 1] == null))\n\t\t{\n\t\t\t// This will remove edges with invalid points from the list of states in the view.\n\t\t\t// Happens if the one of the terminals and the corresponding terminal point is null.\n\t\t\tthis.clear(state.cell, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateEdgeBounds(state);\n\t\t\tthis.updateEdgeLabelOffset(state);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateVertexLabelOffset\n * \n * Updates the absoluteOffset of the given vertex cell state. This takes\n * into account the label position styles.\n * \n * Parameters:\n * \n * state - <mxCellState> whose absolute offset should be updated.\n */\nmxGraphView.prototype.updateVertexLabelOffset = function(state)\n{\n\tvar h = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\n\tif (h == mxConstants.ALIGN_LEFT)\n\t{\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tif (lw != null)\n\t\t{\n\t\t\tlw *= this.scale;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlw = state.width;\n\t\t}\n\t\t\n\t\tstate.absoluteOffset.x -= lw;\n\t}\n\telse if (h == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstate.absoluteOffset.x += state.width;\n\t}\n\telse if (h == mxConstants.ALIGN_CENTER)\n\t{\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tif (lw != null)\n\t\t{\n\t\t\t// Aligns text block with given width inside the vertex width\n\t\t\tvar align = mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_CENTER);\n\t\t\tvar dx = 0;\n\t\t\t\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tdx = 0.5;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tdx = 1;\n\t\t\t}\n\t\t\t\n\t\t\tif (dx != 0)\n\t\t\t{\n\t\t\t\tstate.absoluteOffset.x -= (lw * this.scale - state.width) * dx;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar v = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\n\tif (v == mxConstants.ALIGN_TOP)\n\t{\n\t\tstate.absoluteOffset.y -= state.height;\n\t}\n\telse if (v == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tstate.absoluteOffset.y += state.height;\n\t}\n};\n\n/**\n * Function: resetValidationState\n *\n * Resets the current validation state.\n */\nmxGraphView.prototype.resetValidationState = function()\n{\n\tthis.lastNode = null;\n\tthis.lastHtmlNode = null;\n\tthis.lastForegroundNode = null;\n\tthis.lastForegroundHtmlNode = null;\n};\n\n/**\n * Function: stateValidated\n * \n * Invoked when a state has been processed in <validatePoints>. This is used\n * to update the order of the DOM nodes of the shape.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the cell state.\n */\nmxGraphView.prototype.stateValidated = function(state)\n{\n\tvar fg = (this.graph.getModel().isEdge(state.cell) && this.graph.keepEdgesInForeground) ||\n\t\t(this.graph.getModel().isVertex(state.cell) && this.graph.keepEdgesInBackground);\n\tvar htmlNode = (fg) ? this.lastForegroundHtmlNode || this.lastHtmlNode : this.lastHtmlNode;\n\tvar node = (fg) ? this.lastForegroundNode || this.lastNode : this.lastNode;\n\tvar result = this.graph.cellRenderer.insertStateAfter(state, node, htmlNode);\n\n\tif (fg)\n\t{\n\t\tthis.lastForegroundHtmlNode = result[1];\n\t\tthis.lastForegroundNode = result[0];\n\t}\n\telse\n\t{\n\t\tthis.lastHtmlNode = result[1];\n\t\tthis.lastNode = result[0];\n\t}\n};\n\n/**\n * Function: updateFixedTerminalPoints\n *\n * Sets the initial absolute terminal points in the given state before the edge\n * style is computed.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose initial terminal points should be updated.\n * source - <mxCellState> which represents the source terminal.\n * target - <mxCellState> which represents the target terminal.\n */\nmxGraphView.prototype.updateFixedTerminalPoints = function(edge, source, target)\n{\n\tthis.updateFixedTerminalPoint(edge, source, true,\n\t\tthis.graph.getConnectionConstraint(edge, source, true));\n\tthis.updateFixedTerminalPoint(edge, target, false,\n\t\tthis.graph.getConnectionConstraint(edge, target, false));\n};\n\n/**\n * Function: updateFixedTerminalPoint\n *\n * Sets the fixed source or target terminal point on the given edge.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be updated.\n * terminal - <mxCellState> which represents the actual terminal.\n * source - Boolean that specifies if the terminal is the source.\n * constraint - <mxConnectionConstraint> that specifies the connection.\n */\nmxGraphView.prototype.updateFixedTerminalPoint = function(edge, terminal, source, constraint)\n{\n\tedge.setAbsoluteTerminalPoint(this.getFixedTerminalPoint(edge, terminal, source, constraint), source);\n};\n\n/**\n * Function: getFixedTerminalPoint\n *\n * Returns the fixed source or target terminal point for the given edge.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be returned.\n * terminal - <mxCellState> which represents the actual terminal.\n * source - Boolean that specifies if the terminal is the source.\n * constraint - <mxConnectionConstraint> that specifies the connection.\n */\nmxGraphView.prototype.getFixedTerminalPoint = function(edge, terminal, source, constraint)\n{\n\tvar pt = null;\n\t\n\tif (constraint != null)\n\t{\n\t\tpt = this.graph.getConnectionPoint(terminal, constraint);\n\t}\n\t\n\tif (pt == null && terminal == null)\n\t{\n\t\tvar s = this.scale;\n\t\tvar tr = this.translate;\n\t\tvar orig = edge.origin;\n\t\tvar geo = this.graph.getCellGeometry(edge.cell);\n\t\tpt = geo.getTerminalPoint(source);\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = new mxPoint(s * (tr.x + pt.x + orig.x),\n\t\t\t\t\t\t\t s * (tr.y + pt.y + orig.y));\n\t\t}\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: updateBoundsFromStencil\n * \n * Updates the bounds of the given cell state to reflect the bounds of the stencil\n * if it has a fixed aspect and returns the previous bounds as an <mxRectangle> if\n * the bounds have been modified or null otherwise.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose bounds should be updated.\n */\nmxGraphView.prototype.updateBoundsFromStencil = function(state)\n{\n\tvar previous = null;\n\t\n\tif (state != null && state.shape != null && state.shape.stencil != null && state.shape.stencil.aspect == 'fixed')\n\t{\n\t\tprevious = mxRectangle.fromRectangle(state);\n\t\tvar asp = state.shape.stencil.computeAspect(state.style, state.x, state.y, state.width, state.height);\n\t\tstate.setRect(asp.x, asp.y, state.shape.stencil.w0 * asp.width, state.shape.stencil.h0 * asp.height);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: updatePoints\n *\n * Updates the absolute points in the given state using the specified array\n * of <mxPoints> as the relative points.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose absolute points should be updated.\n * points - Array of <mxPoints> that constitute the relative points.\n * source - <mxCellState> that represents the source terminal.\n * target - <mxCellState> that represents the target terminal.\n */\nmxGraphView.prototype.updatePoints = function(edge, points, source, target)\n{\n\tif (edge != null)\n\t{\n\t\tvar pts = [];\n\t\tpts.push(edge.absolutePoints[0]);\n\t\tvar edgeStyle = this.getEdgeStyle(edge, points, source, target);\n\t\t\n\t\tif (edgeStyle != null)\n\t\t{\n\t\t\tvar src = this.getTerminalPort(edge, source, true);\n\t\t\tvar trg = this.getTerminalPort(edge, target, false);\n\t\t\t\n\t\t\t// Uses the stencil bounds for routing and restores after routing\n\t\t\tvar srcBounds = this.updateBoundsFromStencil(src);\n\t\t\tvar trgBounds = this.updateBoundsFromStencil(trg);\n\n\t\t\tedgeStyle(edge, src, trg, points, pts);\n\t\t\t\n\t\t\t// Restores previous bounds\n\t\t\tif (srcBounds != null)\n\t\t\t{\n\t\t\t\tsrc.setRect(srcBounds.x, srcBounds.y, srcBounds.width, srcBounds.height);\n\t\t\t}\n\t\t\t\n\t\t\tif (trgBounds != null)\n\t\t\t{\n\t\t\t\ttrg.setRect(trgBounds.x, trgBounds.y, trgBounds.width, trgBounds.height);\n\t\t\t}\n\t\t}\n\t\telse if (points != null)\n\t\t{\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tif (points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tvar pt = mxUtils.clone(points[i]);\n\t\t\t\t\tpts.push(this.transformControlPoint(edge, pt));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar tmp = edge.absolutePoints;\n\t\tpts.push(tmp[tmp.length-1]);\n\n\t\tedge.absolutePoints = pts;\n\t}\n};\n\n/**\n * Function: transformControlPoint\n *\n * Transforms the given control point to an absolute point.\n */\nmxGraphView.prototype.transformControlPoint = function(state, pt)\n{\n\tif (state != null && pt != null)\n\t{\n\t\tvar orig = state.origin;\n\t\t\n\t    return new mxPoint(this.scale * (pt.x + this.translate.x + orig.x),\n\t    \tthis.scale * (pt.y + this.translate.y + orig.y));\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: isLoopStyleEnabled\n * \n * Returns true if the given edge should be routed with <mxGraph.defaultLoopStyle>\n * or the <mxConstants.STYLE_LOOP> defined for the given edge. This implementation\n * returns true if the given edge is a loop and does not \n */\nmxGraphView.prototype.isLoopStyleEnabled = function(edge, points, source, target)\n{\n\tvar sc = this.graph.getConnectionConstraint(edge, source, true);\n\tvar tc = this.graph.getConnectionConstraint(edge, target, false);\n\t\n\tif ((points == null || points.length < 2) &&\n\t\t(!mxUtils.getValue(edge.style, mxConstants.STYLE_ORTHOGONAL_LOOP, false) ||\n\t\t((sc == null || sc.point == null) && (tc == null || tc.point == null))))\n\t{\n\t\treturn source != null && source == target;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getEdgeStyle\n * \n * Returns the edge style function to be used to render the given edge state.\n */\nmxGraphView.prototype.getEdgeStyle = function(edge, points, source, target)\n{\n\tvar edgeStyle = this.isLoopStyleEnabled(edge, points, source, target) ?\n\t\tmxUtils.getValue(edge.style, mxConstants.STYLE_LOOP, this.graph.defaultLoopStyle) :\n\t\t(!mxUtils.getValue(edge.style, mxConstants.STYLE_NOEDGESTYLE, false) ?\n\t\tedge.style[mxConstants.STYLE_EDGE] : null);\n\n\t// Converts string values to objects\n\tif (typeof(edgeStyle) == \"string\")\n\t{\n\t\tvar tmp = mxStyleRegistry.getValue(edgeStyle);\n\t\t\n\t\tif (tmp == null && this.isAllowEval())\n\t\t{\n \t\t\ttmp = mxUtils.eval(edgeStyle);\n\t\t}\n\t\t\n\t\tedgeStyle = tmp;\n\t}\n\t\n\tif (typeof(edgeStyle) == \"function\")\n\t{\n\t\treturn edgeStyle;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: updateFloatingTerminalPoints\n *\n * Updates the terminal points in the given state after the edge style was\n * computed for the edge.\n * \n * Parameters:\n * \n * state - <mxCellState> whose terminal points should be updated.\n * source - <mxCellState> that represents the source terminal.\n * target - <mxCellState> that represents the target terminal.\n */\nmxGraphView.prototype.updateFloatingTerminalPoints = function(state, source, target)\n{\n\tvar pts = state.absolutePoints;\n\tvar p0 = pts[0];\n\tvar pe = pts[pts.length - 1];\n\n\tif (pe == null && target != null)\n\t{\n\t\tthis.updateFloatingTerminalPoint(state, target, source, false);\n\t}\n\t\n\tif (p0 == null && source != null)\n\t{\n\t\tthis.updateFloatingTerminalPoint(state, source, target, true);\n\t}\n};\n\n/**\n * Function: updateFloatingTerminalPoint\n *\n * Updates the absolute terminal point in the given state for the given\n * start and end state, where start is the source if source is true.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be updated.\n * start - <mxCellState> for the terminal on \"this\" side of the edge.\n * end - <mxCellState> for the terminal on the other side of the edge.\n * source - Boolean indicating if start is the source terminal state.\n */\nmxGraphView.prototype.updateFloatingTerminalPoint = function(edge, start, end, source)\n{\n\tedge.setAbsoluteTerminalPoint(this.getFloatingTerminalPoint(edge, start, end, source), source);\n};\n\n/**\n * Function: getFloatingTerminalPoint\n * \n * Returns the floating terminal point for the given edge, start and end\n * state, where start is the source if source is true.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be returned.\n * start - <mxCellState> for the terminal on \"this\" side of the edge.\n * end - <mxCellState> for the terminal on the other side of the edge.\n * source - Boolean indicating if start is the source terminal state.\n */\nmxGraphView.prototype.getFloatingTerminalPoint = function(edge, start, end, source)\n{\n\tstart = this.getTerminalPort(edge, start, source);\n\tvar next = this.getNextPoint(edge, end, source);\n\t\n\tvar orth = this.graph.isOrthogonal(edge);\n\tvar alpha = mxUtils.toRadians(Number(start.style[mxConstants.STYLE_ROTATION] || '0'));\n\tvar center = new mxPoint(start.getCenterX(), start.getCenterY());\n\t\n\tif (alpha != 0)\n\t{\n\t\tvar cos = Math.cos(-alpha);\n\t\tvar sin = Math.sin(-alpha);\n\t\tnext = mxUtils.getRotatedPoint(next, cos, sin, center);\n\t}\n\t\n\tvar border = parseFloat(edge.style[mxConstants.STYLE_PERIMETER_SPACING] || 0);\n\tborder += parseFloat(edge.style[(source) ?\n\t\tmxConstants.STYLE_SOURCE_PERIMETER_SPACING :\n\t\tmxConstants.STYLE_TARGET_PERIMETER_SPACING] || 0);\n\tvar pt = this.getPerimeterPoint(start, next, alpha == 0 && orth, border);\n\n\tif (alpha != 0)\n\t{\n\t\tvar cos = Math.cos(alpha);\n\t\tvar sin = Math.sin(alpha);\n\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, center);\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: getTerminalPort\n * \n * Returns an <mxCellState> that represents the source or target terminal or\n * port for the given edge.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the edge.\n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean indicating if the given terminal is the source terminal.\n */\nmxGraphView.prototype.getTerminalPort = function(state, terminal, source)\n{\n\tvar key = (source) ? mxConstants.STYLE_SOURCE_PORT :\n\t\tmxConstants.STYLE_TARGET_PORT;\n\tvar id = mxUtils.getValue(state.style, key);\n\t\n\tif (id != null)\n\t{\n\t\tvar tmp = this.getState(this.graph.getModel().getCell(id));\n\t\t\n\t\t// Only uses ports where a cell state exists\n\t\tif (tmp != null)\n\t\t{\n\t\t\tterminal = tmp;\n\t\t}\n\t}\n\t\n\treturn terminal;\n};\n\n/**\n * Function: getPerimeterPoint\n *\n * Returns an <mxPoint> that defines the location of the intersection point between\n * the perimeter and the line between the center of the shape and the given point.\n * \n * Parameters:\n * \n * terminal - <mxCellState> for the source or target terminal.\n * next - <mxPoint> that lies outside of the given terminal.\n * orthogonal - Boolean that specifies if the orthogonal projection onto\n * the perimeter should be returned. If this is false then the intersection\n * of the perimeter and the line between the next and the center point is\n * returned.\n * border - Optional border between the perimeter and the shape.\n */\nmxGraphView.prototype.getPerimeterPoint = function(terminal, next, orthogonal, border)\n{\n\tvar point = null;\n\t\n\tif (terminal != null)\n\t{\n\t\tvar perimeter = this.getPerimeterFunction(terminal);\n\t\t\n\t\tif (perimeter != null && next != null)\n\t\t{\n\t\t\tvar bounds = this.getPerimeterBounds(terminal, border);\n\n\t\t\tif (bounds.width > 0 || bounds.height > 0)\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(next.x, next.y);\n\t\t\t\tvar flipH = false;\n\t\t\t\tvar flipV = false;\t\n\t\t\t\t\n\t\t\t\tif (this.graph.model.isVertex(terminal.cell))\n\t\t\t\t{\n\t\t\t\t\tflipH = mxUtils.getValue(terminal.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tflipV = mxUtils.getValue(terminal.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\n\t\t\t\t\t// Legacy support for stencilFlipH/V\n\t\t\t\t\tif (terminal.shape != null && terminal.shape.stencil != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tflipH = (mxUtils.getValue(terminal.style, 'stencilFlipH', 0) == 1) || flipH;\n\t\t\t\t\t\tflipV = (mxUtils.getValue(terminal.style, 'stencilFlipV', 0) == 1) || flipV;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (flipH)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpoint = perimeter(bounds, terminal, point, orthogonal);\n\n\t\t\t\tif (point != null)\n\t\t\t\t{\n\t\t\t\t\tif (flipH)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (point == null)\n\t\t{\n\t\t\tpoint = this.getPoint(terminal);\n\t\t}\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getRoutingCenterX\n * \n * Returns the x-coordinate of the center point for automatic routing.\n */\nmxGraphView.prototype.getRoutingCenterX = function (state)\n{\n\tvar f = (state.style != null) ? parseFloat(state.style\n\t\t[mxConstants.STYLE_ROUTING_CENTER_X]) || 0 : 0;\n\n\treturn state.getCenterX() + f * state.width;\n};\n\n/**\n * Function: getRoutingCenterY\n * \n * Returns the y-coordinate of the center point for automatic routing.\n */\nmxGraphView.prototype.getRoutingCenterY = function (state)\n{\n\tvar f = (state.style != null) ? parseFloat(state.style\n\t\t[mxConstants.STYLE_ROUTING_CENTER_Y]) || 0 : 0;\n\n\treturn state.getCenterY() + f * state.height;\n};\n\n/**\n * Function: getPerimeterBounds\n *\n * Returns the perimeter bounds for the given terminal, edge pair as an\n * <mxRectangle>.\n * \n * If you have a model where each terminal has a relative child that should\n * act as the graphical endpoint for a connection from/to the terminal, then\n * this method can be replaced as follows:\n * \n * (code)\n * var oldGetPerimeterBounds = mxGraphView.prototype.getPerimeterBounds;\n * mxGraphView.prototype.getPerimeterBounds = function(terminal, edge, isSource)\n * {\n *   var model = this.graph.getModel();\n *   var childCount = model.getChildCount(terminal.cell);\n * \n *   if (childCount > 0)\n *   {\n *     var child = model.getChildAt(terminal.cell, 0);\n *     var geo = model.getGeometry(child);\n *\n *     if (geo != null &&\n *         geo.relative)\n *     {\n *       var state = this.getState(child);\n *       \n *       if (state != null)\n *       {\n *         terminal = state;\n *       }\n *     }\n *   }\n *   \n *   return oldGetPerimeterBounds.apply(this, arguments);\n * };\n * (end)\n * \n * Parameters:\n * \n * terminal - <mxCellState> that represents the terminal.\n * border - Number that adds a border between the shape and the perimeter.\n */\nmxGraphView.prototype.getPerimeterBounds = function(terminal, border)\n{\n\tborder = (border != null) ? border : 0;\n\n\tif (terminal != null)\n\t{\n\t\tborder += parseFloat(terminal.style[mxConstants.STYLE_PERIMETER_SPACING] || 0);\n\t}\n\n\treturn terminal.getPerimeterBounds(border * this.scale);\n};\n\n/**\n * Function: getPerimeterFunction\n *\n * Returns the perimeter function for the given state.\n */\nmxGraphView.prototype.getPerimeterFunction = function(state)\n{\n\tvar perimeter = state.style[mxConstants.STYLE_PERIMETER];\n\n\t// Converts string values to objects\n\tif (typeof(perimeter) == \"string\")\n\t{\n\t\tvar tmp = mxStyleRegistry.getValue(perimeter);\n\t\t\n\t\tif (tmp == null && this.isAllowEval())\n\t\t{\n \t\t\ttmp = mxUtils.eval(perimeter);\n\t\t}\n\n\t\tperimeter = tmp;\n\t}\n\t\n\tif (typeof(perimeter) == \"function\")\n\t{\n\t\treturn perimeter;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getNextPoint\n *\n * Returns the nearest point in the list of absolute points or the center\n * of the opposite terminal.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n * opposite - <mxCellState> that represents the opposite terminal.\n * source - Boolean indicating if the next point for the source or target\n * should be returned.\n */\nmxGraphView.prototype.getNextPoint = function(edge, opposite, source)\n{\n\tvar pts = edge.absolutePoints;\n\tvar point = null;\n\t\n\tif (pts != null && pts.length >= 2)\n\t{\n\t\tvar count = pts.length;\n\t\tpoint = pts[(source) ? Math.min(1, count - 1) : Math.max(0, count - 2)];\n\t}\n\t\n\tif (point == null && opposite != null)\n\t{\n\t\tpoint = new mxPoint(opposite.getCenterX(), opposite.getCenterY());\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getVisibleTerminal\n *\n * Returns the nearest ancestor terminal that is visible. The edge appears\n * to be connected to this terminal on the display. The result of this method\n * is cached in <mxCellState.getVisibleTerminalState>.\n * \n * Parameters:\n * \n * edge - <mxCell> whose visible terminal should be returned.\n * source - Boolean that specifies if the source or target terminal\n * should be returned.\n */\nmxGraphView.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar model = this.graph.getModel();\n\tvar result = model.getTerminal(edge, source);\n\tvar best = result;\n\t\n\twhile (result != null && result != this.currentRoot)\n\t{\n\t\tif (!this.graph.isCellVisible(best) || this.isCellCollapsed(result))\n\t\t{\n\t\t\tbest = result;\n\t\t}\n\t\t\n\t\tresult = model.getParent(result);\n\t}\n\n\t// Checks if the result is not a layer\n\tif (model.getParent(best) == model.getRoot())\n\t{\n\t\tbest = null;\n\t}\n\t\n\treturn best;\n};\n\n/**\n * Function: updateEdgeBounds\n *\n * Updates the given state using the bounding box of t\n * he absolute points.\n * Also updates <mxCellState.terminalDistance>, <mxCellState.length> and\n * <mxCellState.segments>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose bounds should be updated.\n */\nmxGraphView.prototype.updateEdgeBounds = function(state)\n{\n\tvar points = state.absolutePoints;\n\tvar p0 = points[0];\n\tvar pe = points[points.length - 1];\n\t\n\tif (p0.x != pe.x || p0.y != pe.y)\n\t{\n\t\tvar dx = pe.x - p0.x;\n\t\tvar dy = pe.y - p0.y;\n\t\tstate.terminalDistance = Math.sqrt(dx * dx + dy * dy);\n\t}\n\telse\n\t{\n\t\tstate.terminalDistance = 0;\n\t}\n\t\n\tvar length = 0;\n\tvar segments = [];\n\tvar pt = p0;\n\t\n\tif (pt != null)\n\t{\n\t\tvar minX = pt.x;\n\t\tvar minY = pt.y;\n\t\tvar maxX = minX;\n\t\tvar maxY = minY;\n\t\t\n\t\tfor (var i = 1; i < points.length; i++)\n\t\t{\n\t\t\tvar tmp = points[i];\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tvar dx = pt.x - tmp.x;\n\t\t\t\tvar dy = pt.y - tmp.y;\n\t\t\t\t\n\t\t\t\tvar segment = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tsegments.push(segment);\n\t\t\t\tlength += segment;\n\t\t\t\t\n\t\t\t\tpt = tmp;\n\t\t\t\t\n\t\t\t\tminX = Math.min(pt.x, minX);\n\t\t\t\tminY = Math.min(pt.y, minY);\n\t\t\t\tmaxX = Math.max(pt.x, maxX);\n\t\t\t\tmaxY = Math.max(pt.y, maxY);\n\t\t\t}\n\t\t}\n\t\t\n\t\tstate.length = length;\n\t\tstate.segments = segments;\n\t\t\n\t\tvar markerSize = 1; // TODO: include marker size\n\t\t\n\t\tstate.x = minX;\n\t\tstate.y = minY;\n\t\tstate.width = Math.max(markerSize, maxX - minX);\n\t\tstate.height = Math.max(markerSize, maxY - minY);\n\t}\n};\n\n/**\n * Function: getPoint\n *\n * Returns the absolute point on the edge for the given relative\n * <mxGeometry> as an <mxPoint>. The edge is represented by the given\n * <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the parent edge.\n * geometry - <mxGeometry> that represents the relative location.\n */\nmxGraphView.prototype.getPoint = function(state, geometry)\n{\n\tvar x = state.getCenterX();\n\tvar y = state.getCenterY();\n\t\n\tif (state.segments != null && (geometry == null || geometry.relative))\n\t{\n\t\tvar gx = (geometry != null) ? geometry.x / 2 : 0;\n\t\tvar pointCount = state.absolutePoints.length;\n\t\tvar dist = Math.round((gx + 0.5) * state.length);\n\t\tvar segment = state.segments[0];\n\t\tvar length = 0;\t\t\t\t\n\t\tvar index = 1;\n\n\t\twhile (dist >= Math.round(length + segment) && index < pointCount - 1)\n\t\t{\n\t\t\tlength += segment;\n\t\t\tsegment = state.segments[index++];\n\t\t}\n\n\t\tvar factor = (segment == 0) ? 0 : (dist - length) / segment;\n\t\tvar p0 = state.absolutePoints[index-1];\n\t\tvar pe = state.absolutePoints[index];\n\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tvar gy = 0;\n\t\t\tvar offsetX = 0;\n\t\t\tvar offsetY = 0;\n\n\t\t\tif (geometry != null)\n\t\t\t{\n\t\t\t\tgy = geometry.y;\n\t\t\t\tvar offset = geometry.offset;\n\t\t\t\t\n\t\t\t\tif (offset != null)\n\t\t\t\t{\n\t\t\t\t\toffsetX = offset.x;\n\t\t\t\t\toffsetY = offset.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar dx = pe.x - p0.x;\n\t\t\tvar dy = pe.y - p0.y;\n\t\t\tvar nx = (segment == 0) ? 0 : dy / segment;\n\t\t\tvar ny = (segment == 0) ? 0 : dx / segment;\n\t\t\t\n\t\t\tx = p0.x + dx * factor + (nx * gy + offsetX) * this.scale;\n\t\t\ty = p0.y + dy * factor - (ny * gy - offsetY) * this.scale;\n\t\t}\n\t}\n\telse if (geometry != null)\n\t{\n\t\tvar offset = geometry.offset;\n\t\t\n\t\tif (offset != null)\n\t\t{\n\t\t\tx += offset.x;\n\t\t\ty += offset.y;\n\t\t}\n\t}\n\t\n\treturn new mxPoint(x, y);\t\t\n};\n\n/**\n * Function: getRelativePoint\n *\n * Gets the relative point that describes the given, absolute label\n * position for the given edge state.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the parent edge.\n * x - Specifies the x-coordinate of the absolute label location.\n * y - Specifies the y-coordinate of the absolute label location.\n */\nmxGraphView.prototype.getRelativePoint = function(edgeState, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(edgeState.cell);\n\t\n\tif (geometry != null)\n\t{\n\t\tvar pointCount = edgeState.absolutePoints.length;\n\t\t\n\t\tif (geometry.relative && pointCount > 1)\n\t\t{\n\t\t\tvar totalLength = edgeState.length;\n\t\t\tvar segments = edgeState.segments;\n\n\t\t\t// Works which line segment the point of the label is closest to\n\t\t\tvar p0 = edgeState.absolutePoints[0];\n\t\t\tvar pe = edgeState.absolutePoints[1];\n\t\t\tvar minDist = mxUtils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\tvar index = 0;\n\t\t\tvar tmp = 0;\n\t\t\tvar length = 0;\n\t\t\t\n\t\t\tfor (var i = 2; i < pointCount; i++)\n\t\t\t{\n\t\t\t\ttmp += segments[i - 2];\n\t\t\t\tpe = edgeState.absolutePoints[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\t\tif (dist <= minDist)\n\t\t\t\t{\n\t\t\t\t\tminDist = dist;\n\t\t\t\t\tindex = i - 1;\n\t\t\t\t\tlength = tmp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tp0 = pe;\n\t\t\t}\n\t\t\t\n\t\t\tvar seg = segments[index];\n\t\t\tp0 = edgeState.absolutePoints[index];\n\t\t\tpe = edgeState.absolutePoints[index + 1];\n\t\t\t\n\t\t\tvar x2 = p0.x;\n\t\t\tvar y2 = p0.y;\n\t\t\t\n\t\t\tvar x1 = pe.x;\n\t\t\tvar y1 = pe.y;\n\t\t\t\n\t\t\tvar px = x;\n\t\t\tvar py = y;\n\t\t\t\n\t\t\tvar xSegment = x2 - x1;\n\t\t\tvar ySegment = y2 - y1;\n\t\t\t\n\t\t\tpx -= x1;\n\t\t\tpy -= y1;\n\t\t\tvar projlenSq = 0;\n\t\t\t\n\t\t\tpx = xSegment - px;\n\t\t\tpy = ySegment - py;\n\t\t\tvar dotprod = px * xSegment + py * ySegment;\n\n\t\t\tif (dotprod <= 0.0)\n\t\t\t{\n\t\t\t\tprojlenSq = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprojlenSq = dotprod * dotprod\n\t\t\t\t\t\t/ (xSegment * xSegment + ySegment * ySegment);\n\t\t\t}\n\n\t\t\tvar projlen = Math.sqrt(projlenSq);\n\n\t\t\tif (projlen > seg)\n\t\t\t{\n\t\t\t\tprojlen = seg;\n\t\t\t}\n\n\t\t\tvar yDistance = Math.sqrt(mxUtils.ptSegDistSq(p0.x, p0.y, pe\n\t\t\t\t\t.x, pe.y, x, y));\n\t\t\tvar direction = mxUtils.relativeCcw(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\tif (direction == -1)\n\t\t\t{\n\t\t\t\tyDistance = -yDistance;\n\t\t\t}\n\n\t\t\t// Constructs the relative point for the label\n\t\t\treturn new mxPoint(((totalLength / 2 - length - projlen) / totalLength) * -2,\n\t\t\t\t\t\tyDistance / this.scale);\n\t\t}\n\t}\n\t\n\treturn new mxPoint();\n};\n\n/**\n * Function: updateEdgeLabelOffset\n *\n * Updates <mxCellState.absoluteOffset> for the given state. The absolute\n * offset is normally used for the position of the edge label. Is is\n * calculated from the geometry as an absolute offset from the center\n * between the two endpoints if the geometry is absolute, or as the\n * relative distance between the center along the line and the absolute\n * orthogonal distance if the geometry is relative.\n * \n * Parameters:\n * \n * state - <mxCellState> whose absolute offset should be updated.\n */\nmxGraphView.prototype.updateEdgeLabelOffset = function(state)\n{\n\tvar points = state.absolutePoints;\n\t\n\tstate.absoluteOffset.x = state.getCenterX();\n\tstate.absoluteOffset.y = state.getCenterY();\n\n\tif (points != null && points.length > 0 && state.segments != null)\n\t{\n\t\tvar geometry = this.graph.getCellGeometry(state.cell);\n\t\t\n\t\tif (geometry.relative)\n\t\t{\n\t\t\tvar offset = this.getPoint(state, geometry);\n\t\t\t\n\t\t\tif (offset != null)\n\t\t\t{\n\t\t\t\tstate.absoluteOffset = offset;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar p0 = points[0];\n\t\t\tvar pe = points[points.length - 1];\n\t\t\t\n\t\t\tif (p0 != null && pe != null)\n\t\t\t{\n\t\t\t\tvar dx = pe.x - p0.x;\n\t\t\t\tvar dy = pe.y - p0.y;\n\t\t\t\tvar x0 = 0;\n\t\t\t\tvar y0 = 0;\n\n\t\t\t\tvar off = geometry.offset;\n\t\t\t\t\n\t\t\t\tif (off != null)\n\t\t\t\t{\n\t\t\t\t\tx0 = off.x;\n\t\t\t\t\ty0 = off.y;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar x = p0.x + dx / 2 + x0 * this.scale;\n\t\t\t\tvar y = p0.y + dy / 2 + y0 * this.scale;\n\t\t\t\t\n\t\t\t\tstate.absoluteOffset.x = x;\n\t\t\t\tstate.absoluteOffset.y = y;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getState\n *\n * Returns the <mxCellState> for the given cell. If create is true, then\n * the state is created if it does not yet exist.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the <mxCellState> should be returned.\n * create - Optional boolean indicating if a new state should be created\n * if it does not yet exist. Default is false.\n */\nmxGraphView.prototype.getState = function(cell, create)\n{\n\tcreate = create || false;\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.states.get(cell);\n\t\t\n\t\tif (create && (state == null || this.updateStyle) && this.graph.isCellVisible(cell))\n\t\t{\n\t\t\tif (state == null)\n\t\t\t{\n\t\t\t\tstate = this.createState(cell);\n\t\t\t\tthis.states.put(cell, state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.style = this.graph.getCellStyle(cell);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn state;\n};\n\n/**\n * Function: isRendering\n *\n * Returns <rendering>.\n */\nmxGraphView.prototype.isRendering = function()\n{\n\treturn this.rendering;\n};\n\n/**\n * Function: setRendering\n *\n * Sets <rendering>.\n */\nmxGraphView.prototype.setRendering = function(value)\n{\n\tthis.rendering = value;\n};\n\n/**\n * Function: isAllowEval\n *\n * Returns <allowEval>.\n */\nmxGraphView.prototype.isAllowEval = function()\n{\n\treturn this.allowEval;\n};\n\n/**\n * Function: setAllowEval\n *\n * Sets <allowEval>.\n */\nmxGraphView.prototype.setAllowEval = function(value)\n{\n\tthis.allowEval = value;\n};\n\n/**\n * Function: getStates\n *\n * Returns <states>.\n */\nmxGraphView.prototype.getStates = function()\n{\n\treturn this.states;\n};\n\n/**\n * Function: setStates\n *\n * Sets <states>.\n */\nmxGraphView.prototype.setStates = function(value)\n{\n\tthis.states = value;\n};\n\n/**\n * Function: getCellStates\n *\n * Returns the <mxCellStates> for the given array of <mxCells>. The array\n * contains all states that are not null, that is, the returned array may\n * have less elements than the given array. If no argument is given, then\n * this returns <states>.\n */\nmxGraphView.prototype.getCellStates = function(cells)\n{\n\tif (cells == null)\n\t{\n\t\treturn this.states;\n\t}\n\telse\n\t{\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar state = this.getState(cells[i]);\n\t\t\t\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tresult.push(state);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: removeState\n *\n * Removes and returns the <mxCellState> for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the <mxCellState> should be removed.\n */\nmxGraphView.prototype.removeState = function(cell)\n{\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.states.remove(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.graph.cellRenderer.destroy(state);\n\t\t\tstate.invalid = true;\n\t\t\tstate.destroy();\n\t\t}\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: createState\n *\n * Creates and returns an <mxCellState> for the given cell and initializes\n * it using <mxCellRenderer.initialize>.\n * \n * Parameters:\n * \n * cell - <mxCell> for which a new <mxCellState> should be created.\n */\nmxGraphView.prototype.createState = function(cell)\n{\n\treturn new mxCellState(this, cell, this.graph.getCellStyle(cell));\n};\n\n/**\n * Function: getCanvas\n *\n * Returns the DOM node that contains the background-, draw- and\n * overlay- and decoratorpanes.\n */\nmxGraphView.prototype.getCanvas = function()\n{\n\treturn this.canvas;\n};\n\n/**\n * Function: getBackgroundPane\n *\n * Returns the DOM node that represents the background layer.\n */\nmxGraphView.prototype.getBackgroundPane = function()\n{\n\treturn this.backgroundPane;\n};\n\n/**\n * Function: getDrawPane\n *\n * Returns the DOM node that represents the main drawing layer.\n */\nmxGraphView.prototype.getDrawPane = function()\n{\n\treturn this.drawPane;\n};\n\n/**\n * Function: getOverlayPane\n *\n * Returns the DOM node that represents the layer above the drawing layer.\n */\nmxGraphView.prototype.getOverlayPane = function()\n{\n\treturn this.overlayPane;\n};\n\n/**\n * Function: getDecoratorPane\n *\n * Returns the DOM node that represents the topmost drawing layer.\n */\nmxGraphView.prototype.getDecoratorPane = function()\n{\n\treturn this.decoratorPane;\n};\n\n/**\n * Function: isContainerEvent\n * \n * Returns true if the event origin is one of the drawing panes or\n * containers of the view.\n */\nmxGraphView.prototype.isContainerEvent = function(evt)\n{\n\tvar source = mxEvent.getSource(evt);\n\n\treturn (source == this.graph.container ||\n\t\tsource.parentNode == this.backgroundPane ||\n\t\t(source.parentNode != null &&\n\t\tsource.parentNode.parentNode == this.backgroundPane) ||\n\t\tsource == this.canvas.parentNode ||\n\t\tsource == this.canvas ||\n\t\tsource == this.backgroundPane ||\n\t\tsource == this.drawPane ||\n\t\tsource == this.overlayPane ||\n\t\tsource == this.decoratorPane);\n};\n\n/**\n * Function: isScrollEvent\n * \n * Returns true if the event origin is one of the scrollbars of the\n * container in IE. Such events are ignored.\n */\n mxGraphView.prototype.isScrollEvent = function(evt)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar pt = new mxPoint(evt.clientX - offset.x, evt.clientY - offset.y);\n\n\tvar outWidth = this.graph.container.offsetWidth;\n\tvar inWidth = this.graph.container.clientWidth;\n\n\tif (outWidth > inWidth && pt.x > inWidth + 2 && pt.x <= outWidth)\n\t{\n\t\treturn true;\n\t}\n\n\tvar outHeight = this.graph.container.offsetHeight;\n\tvar inHeight = this.graph.container.clientHeight;\n\t\n\tif (outHeight > inHeight && pt.y > inHeight + 2 && pt.y <= outHeight)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: init\n *\n * Initializes the graph event dispatch loop for the specified container\n * and invokes <create> to create the required DOM nodes for the display.\n */\nmxGraphView.prototype.init = function()\n{\n\tthis.installListeners();\n\t\n\t// Creates the DOM nodes for the respective display dialect\n\tvar graph = this.graph;\n\t\n\tif (graph.dialect == mxConstants.DIALECT_SVG)\n\t{\n\t\tthis.createSvg();\n\t}\n\telse if (graph.dialect == mxConstants.DIALECT_VML)\n\t{\n\t\tthis.createVml();\n\t}\n\telse\n\t{\n\t\tthis.createHtml();\n\t}\n};\n\n/**\n * Function: installListeners\n *\n * Installs the required listeners in the container.\n */\nmxGraphView.prototype.installListeners = function()\n{\n\tvar graph = this.graph;\n\tvar container = graph.container;\n\t\n\tif (container != null)\n\t{\n\t\t// Support for touch device gestures (eg. pinch to zoom)\n\t\t// Double-tap handling is implemented in mxGraph.fireMouseEvent\n\t\tif (mxClient.IS_TOUCH)\n\t\t{\n\t\t\tmxEvent.addListener(container, 'gesturestart', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\t\t\t\n\t\t\tmxEvent.addListener(container, 'gesturechange', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\n\t\t\tmxEvent.addListener(container, 'gestureend', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\t\t}\n\t\t\n\t\t// Adds basic listeners for graph event dispatching\n\t\tmxEvent.addGestureListeners(container, mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\t// Condition to avoid scrollbar events starting a rubberband selection\n\t\t\tif (this.isContainerEvent(evt) && ((!mxClient.IS_IE && !mxClient.IS_IE11 && !mxClient.IS_GC &&\n\t\t\t\t!mxClient.IS_OP && !mxClient.IS_SF) || !this.isScrollEvent(evt)))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}));\n\t\t\n\t\t// Adds listener for double click handling on background, this does always\n\t\t// use native event handler, we assume that the DOM of the background\n\t\t// does not change during the double click\n\t\tmxEvent.addListener(container, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.dblClick(evt);\n\t\t\t}\n\t\t}));\n\n\t\t// Workaround for touch events which started on some DOM node\n\t\t// on top of the container, in which case the cells under the\n\t\t// mouse for the move and up events are not detected.\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\tvar state = null;\n\t\t\t\n\t\t\t// Workaround for touch events which started on some DOM node\n\t\t\t// on top of the container, in which case the cells under the\n\t\t\t// mouse for the move and up events are not detected.\n\t\t\tif (mxClient.IS_TOUCH)\n\t\t\t{\n\t\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\t\n\t\t\t\t// Dispatches the drop event to the graph which\n\t\t\t\t// consumes and executes the source function\n\t\t\t\tvar pt = mxUtils.convertPoint(container, x, y);\n\t\t\t\tstate = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\treturn state;\n\t\t};\n\t\t\n\t\t// Adds basic listeners for graph event dispatching outside of the\n\t\t// container and finishing the handling of a single gesture\n\t\t// Implemented via graph event dispatch loop to avoid duplicate events\n\t\t// in Firefox and Chrome\n\t\tgraph.addMouseListener(\n\t\t{\n\t\t\tmouseDown: function(sender, me)\n\t\t\t{\n\t\t\t\tgraph.popupMenuHandler.hideMenu();\n\t\t\t},\n\t\t\tmouseMove: function() { },\n\t\t\tmouseUp: function() { }\n\t\t});\n\t\t\n\t\tthis.moveHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\t// Hides the tooltip if mouse is outside container\n\t\t\tif (graph.tooltipHandler != null && graph.tooltipHandler.isHideOnHover())\n\t\t\t{\n\t\t\t\tgraph.tooltipHandler.hide();\n\t\t\t}\n\n\t\t\tif (this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&\n\t\t\t\t!this.isContainerEvent(evt) && graph.container.style.display != 'none' &&\n\t\t\t\tgraph.container.style.visibility != 'hidden' && !mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.endHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&\n\t\t\t\t!this.isContainerEvent(evt) && graph.container.style.display != 'none' &&\n\t\t\t\tgraph.container.style.visibility != 'hidden')\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t}\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(document, null, this.moveHandler, this.endHandler);\n\t}\n};\n\n/**\n * Function: create\n *\n * Creates the DOM nodes for the HTML display.\n */\nmxGraphView.prototype.createHtml = function()\n{\n\tvar container = this.graph.container;\n\t\n\tif (container != null)\n\t{\n\t\tthis.canvas = this.createHtmlPane('100%', '100%');\n\t\tthis.canvas.style.overflow = 'hidden';\n\t\n\t\t// Uses minimal size for inner DIVs on Canvas. This is required\n\t\t// for correct event processing in IE. If we have an overlapping\n\t\t// DIV then the events on the cells are only fired for labels.\n\t\tthis.backgroundPane = this.createHtmlPane('1px', '1px');\n\t\tthis.drawPane = this.createHtmlPane('1px', '1px');\n\t\tthis.overlayPane = this.createHtmlPane('1px', '1px');\n\t\tthis.decoratorPane = this.createHtmlPane('1px', '1px');\n\t\t\n\t\tthis.canvas.appendChild(this.backgroundPane);\n\t\tthis.canvas.appendChild(this.drawPane);\n\t\tthis.canvas.appendChild(this.overlayPane);\n\t\tthis.canvas.appendChild(this.decoratorPane);\n\n\t\tcontainer.appendChild(this.canvas);\n\t\tthis.updateContainerStyle(container);\n\t\t\n\t\t// Implements minWidth/minHeight in quirks mode\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tvar onResize = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tvar bounds = this.getGraphBounds();\n\t\t\t\tvar width = bounds.x + bounds.width + this.graph.border;\n\t\t\t\tvar height = bounds.y + bounds.height + this.graph.border;\n\t\t\t\t\n\t\t\t\tthis.updateHtmlCanvasSize(width, height);\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addListener(window, 'resize', onResize);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateHtmlCanvasSize\n * \n * Updates the size of the HTML canvas.\n */\nmxGraphView.prototype.updateHtmlCanvasSize = function(width, height)\n{\n\tif (this.graph.container != null)\n\t{\n\t\tvar ow = this.graph.container.offsetWidth;\n\t\tvar oh = this.graph.container.offsetHeight;\n\n\t\tif (ow < width)\n\t\t{\n\t\t\tthis.canvas.style.width = width + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.canvas.style.width = '100%';\n\t\t}\n\n\t\tif (oh < height)\n\t\t{\n\t\t\tthis.canvas.style.height = height + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.canvas.style.height = '100%';\n\t\t}\n\t}\n};\n\n/**\n * Function: createHtmlPane\n * \n * Creates and returns a drawing pane in HTML (DIV).\n */\nmxGraphView.prototype.createHtmlPane = function(width, height)\n{\n\tvar pane = document.createElement('DIV');\n\t\n\tif (width != null && height != null)\n\t{\n\t\tpane.style.position = 'absolute';\n\t\tpane.style.left = '0px';\n\t\tpane.style.top = '0px';\n\n\t\tpane.style.width = width;\n\t\tpane.style.height = height;\n\t}\n\telse\n\t{\n\t\tpane.style.position = 'relative';\n\t}\n\t\n\treturn pane;\n};\n\n/**\n * Function: create\n *\n * Creates the DOM nodes for the VML display.\n */\nmxGraphView.prototype.createVml = function()\n{\n\tvar container = this.graph.container;\n\n\tif (container != null)\n\t{\n\t\tvar width = container.offsetWidth;\n\t\tvar height = container.offsetHeight;\n\t\tthis.canvas = this.createVmlPane(width, height);\n\t\tthis.canvas.style.overflow = 'hidden';\n\t\t\n\t\tthis.backgroundPane = this.createVmlPane(width, height);\n\t\tthis.drawPane = this.createVmlPane(width, height);\n\t\tthis.overlayPane = this.createVmlPane(width, height);\n\t\tthis.decoratorPane = this.createVmlPane(width, height);\n\t\t\n\t\tthis.canvas.appendChild(this.backgroundPane);\n\t\tthis.canvas.appendChild(this.drawPane);\n\t\tthis.canvas.appendChild(this.overlayPane);\n\t\tthis.canvas.appendChild(this.decoratorPane);\n\t\t\n\t\tcontainer.appendChild(this.canvas);\n\t}\n};\n\n/**\n * Function: createVmlPane\n * \n * Creates a drawing pane in VML (group).\n */\nmxGraphView.prototype.createVmlPane = function(width, height)\n{\n\tvar pane = document.createElement(mxClient.VML_PREFIX + ':group');\n\t\n\t// At this point the width and height are potentially\n\t// uninitialized. That's OK.\n\tpane.style.position = 'absolute';\n\tpane.style.left = '0px';\n\tpane.style.top = '0px';\n\n\tpane.style.width = width + 'px';\n\tpane.style.height = height + 'px';\n\n\tpane.setAttribute('coordsize', width + ',' + height);\n\tpane.setAttribute('coordorigin', '0,0');\n\t\n\treturn pane;\n};\n\n/**\n * Function: create\n *\n * Creates and returns the DOM nodes for the SVG display.\n */\nmxGraphView.prototype.createSvg = function()\n{\n\tvar container = this.graph.container;\n\tthis.canvas = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\n\t// For background image\n\tthis.backgroundPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.backgroundPane);\n\n\t// Adds two layers (background is early feature)\n\tthis.drawPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.drawPane);\n\n\tthis.overlayPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.overlayPane);\n\t\n\tthis.decoratorPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.decoratorPane);\n\t\n\tvar root = document.createElementNS(mxConstants.NS_SVG, 'svg');\n\troot.style.left = '0px';\n\troot.style.top = '0px';\n\troot.style.width = '100%';\n\troot.style.height = '100%';\n\t\n\t// NOTE: In standards mode, the SVG must have block layout\n\t// in order for the container DIV to not show scrollbars.\n\troot.style.display = 'block';\n\troot.appendChild(this.canvas);\n\t\n\t// Workaround for scrollbars in IE11 and below\n\tif (mxClient.IS_IE || mxClient.IS_IE11)\n\t{\n\t\troot.style.overflow = 'hidden';\n\t}\n\n\tif (container != null)\n\t{\n\t\tcontainer.appendChild(root);\n\t\tthis.updateContainerStyle(container);\n\t}\n};\n\n/**\n * Function: updateContainerStyle\n * \n * Updates the style of the container after installing the SVG DOM elements.\n */\nmxGraphView.prototype.updateContainerStyle = function(container)\n{\n\t// Workaround for offset of container\n\tvar style = mxUtils.getCurrentStyle(container);\n\t\n\tif (style != null && style.position == 'static')\n\t{\n\t\tcontainer.style.position = 'relative';\n\t}\n\t\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tcontainer.style.touchAction = 'none';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the view and all its resources.\n */\nmxGraphView.prototype.destroy = function()\n{\n\tvar root = (this.canvas != null) ? this.canvas.ownerSVGElement : null;\n\t\n\tif (root == null)\n\t{\n\t\troot = this.canvas;\n\t}\n\t\n\tif (root != null && root.parentNode != null)\n\t{\n\t\tthis.clear(this.currentRoot, true);\n\t\tmxEvent.removeGestureListeners(document, null, this.moveHandler, this.endHandler);\n\t\tmxEvent.release(this.graph.container);\n\t\troot.parentNode.removeChild(root);\n\t\t\n\t\tthis.moveHandler = null;\n\t\tthis.endHandler = null;\n\t\tthis.canvas = null;\n\t\tthis.backgroundPane = null;\n\t\tthis.drawPane = null;\n\t\tthis.overlayPane = null;\n\t\tthis.decoratorPane = null;\n\t}\n};\n\n/**\n * Class: mxCurrentRootChange\n *\n * Action to change the current root in a view.\n *\n * Constructor: mxCurrentRootChange\n *\n * Constructs a change of the current root in the given view.\n */\nfunction mxCurrentRootChange(view, root)\n{\n\tthis.view = view;\n\tthis.root = root;\n\tthis.previous = root;\n\tthis.isUp = root == null;\n\t\n\tif (!this.isUp)\n\t{\n\t\tvar tmp = this.view.currentRoot;\n\t\tvar model = this.view.graph.getModel();\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp == root)\n\t\t\t{\n\t\t\t\tthis.isUp = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\ttmp = model.getParent(tmp);\n\t\t}\n\t}\n};\n\n/**\n * Function: execute\n *\n * Changes the current root of the view.\n */\nmxCurrentRootChange.prototype.execute = function()\n{\n\tvar tmp = this.view.currentRoot;\n\tthis.view.currentRoot = this.previous;\n\tthis.previous = tmp;\n\n\tvar translate = this.view.graph.getTranslateForRoot(this.view.currentRoot);\n\t\n\tif (translate != null)\n\t{\n\t\tthis.view.translate = new mxPoint(-translate.x, -translate.y);\n\t}\n\n\tif (this.isUp)\n\t{\n\t\tthis.view.clear(this.view.currentRoot, true);\n\t\tthis.view.validate();\n\t}\n\telse\n\t{\n\t\tthis.view.refresh();\n\t}\n\t\n\tvar name = (this.isUp) ? mxEvent.UP : mxEvent.DOWN;\n\tthis.view.fireEvent(new mxEventObject(name,\n\t\t'root', this.view.currentRoot, 'previous', this.previous));\n\tthis.isUp = !this.isUp;\n};\n\n__mxOutput.mxGraphView = typeof mxGraphView !== 'undefined' ? mxGraphView : undefined;\n"]}