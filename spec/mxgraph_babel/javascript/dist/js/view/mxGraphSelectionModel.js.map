{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/view/mxGraphSelectionModel.js"],"names":["mxGraphSelectionModel","graph","cells","mxSelectionChange","selectionModel","added","removed","slice","prototype","mxEventSource","constructor","doneResource","mxClient","language","updatingSelectionResource","singleSelection","isSingleSelection","setSingleSelection","isSelected","cell","mxUtils","indexOf","isEmpty","length","clear","changeSelection","setCell","setCells","getFirstSelectableCell","tmp","i","isCellSelectable","push","addCell","addCells","remove","removeCell","removeCells","change","execute","edit","mxUndoableEdit","add","fireEvent","mxEventObject","mxEvent","UNDO","cellAdded","cellRemoved","index","splice","t0","mxLog","enter","window","status","mxResources","get","leave","CHANGE","__mxOutput","undefined"],"mappings":"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","file":"mxGraphSelectionModel.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphSelectionModel\n *\n * Implements the selection model for a graph. Here is a listener that handles\n * all removed selection cells.\n * \n * (code)\n * graph.getSelectionModel().addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var cells = evt.getProperty('added');\n *   \n *   for (var i = 0; i < cells.length; i++)\n *   {\n *     // Handle cells[i]...\n *   }\n * });\n * (end)\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the selection was changed in <changeSelection>. The\n * <code>edit</code> property contains the <mxUndoableEdit> which contains the\n * <mxSelectionChange>.\n * \n * Event: mxEvent.CHANGE\n * \n * Fires after the selection changes by executing an <mxSelectionChange>. The\n * <code>added</code> and <code>removed</code> properties contain arrays of\n * cells that have been added to or removed from the selection, respectively.\n * The names are inverted due to historic reasons. This cannot be changed.\n * \n * Constructor: mxGraphSelectionModel\n *\n * Constructs a new graph selection model for the given <mxGraph>.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphSelectionModel(graph)\n{\n\tthis.graph = graph;\n\tthis.cells = [];\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphSelectionModel.prototype = new mxEventSource();\nmxGraphSelectionModel.prototype.constructor = mxGraphSelectionModel;\n\n/**\n * Variable: doneResource\n * \n * Specifies the resource key for the status message after a long operation.\n * If the resource for this key does not exist then the value is used as\n * the status message. Default is 'done'.\n */\nmxGraphSelectionModel.prototype.doneResource = (mxClient.language != 'none') ? 'done' : '';\n\n/**\n * Variable: updatingSelectionResource\n *\n * Specifies the resource key for the status message while the selection is\n * being updated. If the resource for this key does not exist then the\n * value is used as the status message. Default is 'updatingSelection'.\n */\nmxGraphSelectionModel.prototype.updatingSelectionResource = (mxClient.language != 'none') ? 'updatingSelection' : '';\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphSelectionModel.prototype.graph = null;\n\n/**\n * Variable: singleSelection\n *\n * Specifies if only one selected item at a time is allowed.\n * Default is false.\n */\nmxGraphSelectionModel.prototype.singleSelection = false;\n\n/**\n * Function: isSingleSelection\n *\n * Returns <singleSelection> as a boolean.\n */\nmxGraphSelectionModel.prototype.isSingleSelection = function()\n{\n\treturn this.singleSelection;\n};\n\n/**\n * Function: setSingleSelection\n *\n * Sets the <singleSelection> flag.\n * \n * Parameters:\n * \n * singleSelection - Boolean that specifies the new value for\n * <singleSelection>.\n */\nmxGraphSelectionModel.prototype.setSingleSelection = function(singleSelection)\n{\n\tthis.singleSelection = singleSelection;\n};\n\n/**\n * Function: isSelected\n *\n * Returns true if the given <mxCell> is selected.\n */\nmxGraphSelectionModel.prototype.isSelected = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\treturn mxUtils.indexOf(this.cells, cell) >= 0;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: isEmpty\n *\n * Returns true if no cells are currently selected.\n */\nmxGraphSelectionModel.prototype.isEmpty = function()\n{\n\treturn this.cells.length == 0;\n};\n\n/**\n * Function: clear\n *\n * Clears the selection and fires a <change> event if the selection was not\n * empty.\n */\nmxGraphSelectionModel.prototype.clear = function()\n{\n\tthis.changeSelection(null, this.cells);\n};\n\n/**\n * Function: setCell\n *\n * Selects the specified <mxCell> using <setCells>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n */\nmxGraphSelectionModel.prototype.setCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.setCells([cell]);\n\t}\n};\n\n/**\n * Function: setCells\n *\n * Selects the given array of <mxCells> and fires a <change> event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n */\nmxGraphSelectionModel.prototype.setCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tif (this.singleSelection)\n\t\t{\n\t\t\tcells = [this.getFirstSelectableCell(cells)];\n\t\t}\n\t\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\t\n\t\t}\n\n\t\tthis.changeSelection(tmp, this.cells);\n\t}\n};\n\n/**\n * Function: getFirstSelectableCell\n *\n * Returns the first selectable cell in the given array of cells.\n */\nmxGraphSelectionModel.prototype.getFirstSelectableCell = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\treturn cells[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: addCell\n * \n * Adds the given <mxCell> to the selection and fires a <select> event.\n * \n * Parameters:\n * \n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.addCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.addCells([cell]);\n\t}\n};\n\n/**\n * Function: addCells\n * \n * Adds the given array of <mxCells> to the selection and fires a <select>\n * event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to add to the selection.\n */\nmxGraphSelectionModel.prototype.addCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar remove = null;\n\t\t\n\t\tif (this.singleSelection)\n\t\t{\n\t\t\tremove = this.cells;\n\t\t\tcells = [this.getFirstSelectableCell(cells)];\n\t\t}\n\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (!this.isSelected(cells[i]) &&\n\t\t\t\tthis.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\t\n\t\t}\n\n\t\tthis.changeSelection(tmp, remove);\n\t}\n};\n\n/**\n * Function: removeCell\n *\n * Removes the specified <mxCell> from the selection and fires a <select>\n * event for the remaining cells.\n * \n * Parameters:\n * \n * cell - <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.removeCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.removeCells([cell]);\n\t}\n};\n\n/**\n * Function: removeCells\n */\nmxGraphSelectionModel.prototype.removeCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.isSelected(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.changeSelection(null, tmp);\t\n\t}\n};\n\n/**\n * Function: changeSelection\n *\n * Inner callback to add the specified <mxCell> to the selection. No event\n * is fired in this implementation.\n * \n * Paramters:\n * \n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.changeSelection = function(added, removed)\n{\n\tif ((added != null &&\n\t\tadded.length > 0 &&\n\t\tadded[0] != null) ||\n\t\t(removed != null &&\n\t\tremoved.length > 0 &&\n\t\tremoved[0] != null))\n\t{\n\t\tvar change = new mxSelectionChange(this, added, removed);\n\t\tchange.execute();\n\t\tvar edit = new mxUndoableEdit(this, false);\n\t\tedit.add(change);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n\t}\n};\n\n/**\n * Function: cellAdded\n *\n * Inner callback to add the specified <mxCell> to the selection. No event\n * is fired in this implementation.\n * \n * Paramters:\n * \n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.cellAdded = function(cell)\n{\n\tif (cell != null &&\n\t\t!this.isSelected(cell))\n\t{\n\t\tthis.cells.push(cell);\n\t}\n};\n\n/**\n * Function: cellRemoved\n *\n * Inner callback to remove the specified <mxCell> from the selection. No\n * event is fired in this implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.cellRemoved = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tvar index = mxUtils.indexOf(this.cells, cell);\n\t\t\n\t\tif (index >= 0)\n\t\t{\n\t\t\tthis.cells.splice(index, 1);\n\t\t}\n\t}\n};\n\n/**\n * Class: mxSelectionChange\n *\n * Action to change the current root in a view.\n *\n * Constructor: mxCurrentRootChange\n *\n * Constructs a change of the current root in the given view.\n */\nfunction mxSelectionChange(selectionModel, added, removed)\n{\n\tthis.selectionModel = selectionModel;\n\tthis.added = (added != null) ? added.slice() : null;\n\tthis.removed = (removed != null) ? removed.slice() : null;\n};\n\n/**\n * Function: execute\n *\n * Changes the current root of the view.\n */\nmxSelectionChange.prototype.execute = function()\n{\n\tvar t0 = mxLog.enter('mxSelectionChange.execute');\n\twindow.status = mxResources.get(\n\t\tthis.selectionModel.updatingSelectionResource) ||\n\t\tthis.selectionModel.updatingSelectionResource;\n\n\tif (this.removed != null)\n\t{\n\t\tfor (var i = 0; i < this.removed.length; i++)\n\t\t{\n\t\t\tthis.selectionModel.cellRemoved(this.removed[i]);\n\t\t}\n\t}\n\n\tif (this.added != null)\n\t{\n\t\tfor (var i = 0; i < this.added.length; i++)\n\t\t{\n\t\t\tthis.selectionModel.cellAdded(this.added[i]);\n\t\t}\n\t}\n\t\n\tvar tmp = this.added;\n\tthis.added = this.removed;\n\tthis.removed = tmp;\n\n\twindow.status = mxResources.get(this.selectionModel.doneResource) ||\n\t\tthis.selectionModel.doneResource;\n\tmxLog.leave('mxSelectionChange.execute', t0);\n\t\n\tthis.selectionModel.fireEvent(new mxEventObject(mxEvent.CHANGE,\n\t\t\t'added', this.added, 'removed', this.removed));\n};\n\n__mxOutput.mxGraphSelectionModel = typeof mxGraphSelectionModel !== 'undefined' ? mxGraphSelectionModel : undefined;\n"]}