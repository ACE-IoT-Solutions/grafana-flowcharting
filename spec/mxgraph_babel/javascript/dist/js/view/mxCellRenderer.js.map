{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/view/mxCellRenderer.js"],"names":["mxCellRenderer","defaultShapes","Object","prototype","defaultEdgeShape","mxConnector","defaultVertexShape","mxRectangleShape","defaultTextShape","mxText","legacyControlPosition","legacySpacing","antiAlias","minSvgStrokeWidth","forceControlClickHandler","registerShape","key","shape","mxConstants","SHAPE_RECTANGLE","SHAPE_ELLIPSE","mxEllipse","SHAPE_RHOMBUS","mxRhombus","SHAPE_CYLINDER","mxCylinder","SHAPE_CONNECTOR","SHAPE_ACTOR","mxActor","SHAPE_TRIANGLE","mxTriangle","SHAPE_HEXAGON","mxHexagon","SHAPE_CLOUD","mxCloud","SHAPE_LINE","mxLine","SHAPE_ARROW","mxArrow","SHAPE_ARROW_CONNECTOR","mxArrowConnector","SHAPE_DOUBLE_ELLIPSE","mxDoubleEllipse","SHAPE_SWIMLANE","mxSwimlane","SHAPE_IMAGE","mxImageShape","SHAPE_LABEL","mxLabel","initializeShape","state","dialect","view","graph","configureShape","init","getDrawPane","createShape","style","stencil","mxStencilRegistry","getStencil","STYLE_SHAPE","mxShape","ctor","getShapeConstructor","createIndicatorShape","indicatorShape","getShape","getIndicatorShape","name","getModel","isEdge","cell","apply","image","getImage","indicatorColor","getIndicatorColor","indicatorStrokeColor","STYLE_INDICATOR_STROKECOLOR","indicatorGradientColor","getIndicatorGradientColor","indicatorDirection","STYLE_INDICATOR_DIRECTION","indicatorImage","getIndicatorImage","postConfigureShape","resolveColor","STYLE_FILLCOLOR","STYLE_GRADIENTCOLOR","STYLE_STROKECOLOR","checkPlaceholderStyles","values","styles","i","length","mxUtils","indexOf","field","value","referenced","model","getParent","getTerminal","getSwimlane","swimlaneIndicatorColorAttribute","rstate","getView","getState","getLabelValue","getLabel","createLabel","STYLE_FONTSIZE","isForceHtml","isHtmlLabel","isNode","text","mxRectangle","STYLE_ALIGN","ALIGN_CENTER","getVerticalAlign","STYLE_FONTCOLOR","STYLE_FONTFAMILY","STYLE_FONTSTYLE","STYLE_SPACING","STYLE_SPACING_TOP","STYLE_SPACING_RIGHT","STYLE_SPACING_BOTTOM","STYLE_SPACING_LEFT","STYLE_HORIZONTAL","STYLE_LABEL_BACKGROUNDCOLOR","STYLE_LABEL_BORDERCOLOR","isWrapping","isLabelClipped","STYLE_OVERFLOW","STYLE_LABEL_PADDING","getValue","STYLE_TEXT_DIRECTION","DEFAULT_TEXT_DIRECTION","opacity","STYLE_TEXT_OPACITY","DIALECT_STRICTHTML","initializeLabel","forceGetCell","evt","result","mxClient","IS_TOUCH","x","mxEvent","getClientX","y","getClientY","pt","convertPoint","container","getCellAt","addGestureListeners","node","bind","isLabelEvent","fireMouseEvent","MOUSE_DOWN","mxMouseEvent","DIALECT_SVG","getSource","nodeName","MOUSE_MOVE","MOUSE_UP","nativeDblClickEnabled","addListener","dblClick","consume","IS_SVG","NO_FO","createCellOverlays","overlays","getCellOverlays","dict","mxDictionary","remove","tmp","src","preserveImageAspect","overlay","initializeOverlay","installCellOverlayListeners","cursor","put","visit","id","destroy","getOverlayPane","isEditing","stopEditing","isInvokesStopCellEditing","fireEvent","mxEventObject","CLICK","createControl","getFoldingImage","foldingEnabled","control","b","width","height","initControl","createControlClickHandler","isEnabled","collapse","isCellCollapsed","foldCells","handleEvents","clickHandler","DIALECT_PREFERHTML","zIndex","innerNode","IS_IOS","first","mxPoint","addEventListener","tol","tolerance","Math","abs","call","isShapeEvent","installListeners","redrawLabel","forced","wrapping","clipping","overflow","wrap","clipped","lastValue","isTextShapeInvalid","resetStyles","valign","bounds","getLabelBounds","nextScale","getTextScale","isClipping","scale","equals","unscaledWidth","round","vis","visibility","redrawLabelShape","check","property","stylename","defaultValue","parseFloat","spacing","DEFAULT_FONTSTYLE","DEFAULT_FONTFAMILY","DEFAULT_FONTSIZE","STYLE_VERTICAL_ALIGN","redraw","absoluteOffset","getSpacing","geo","getCellGeometry","max","isPaintBoundsInverted","sc","NONE","s","STYLE_STROKEWIDTH","dx","floor","dh","t","hpos","STYLE_LABEL_POSITION","vpos","STYLE_VERTICAL_LABEL_POSITION","ALIGN_MIDDLE","lw","STYLE_LABEL_WIDTH","rotateLabelBounds","margin","spacingLeft","spacingRight","spacingTop","spacingBottom","theta","getTextRotation","isVertex","cx","getCenterX","cy","getCenterY","rad","PI","getRotatedPoint","cos","sin","redrawCellOverlays","rot","mod","STYLE_ROTATION","toRadians","getBounds","point","redrawControl","getControlBounds","r","rotation","w","h","getShapeRotation","insertStateAfter","htmlNode","shapes","getShapesForState","html","parentNode","temp","nextSibling","appendChild","insertBefore","canvas","firstChild","force","rendering","shapeChanged","redrawShape","currentRoot","selectionCellsHandler","updateHandler","equalEntries","isShapeInvalid","absolutePoints","points","slice","doRedrawShape","updateBoundingBox","equalPoints","__mxOutput","undefined"],"mappings":"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","file":"mxCellRenderer.js","sourcesContent":["/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxCellRenderer\n * \n * Renders cells into a document object model. The <defaultShapes> is a global\n * map of shapename, constructor pairs that is used in all instances. You can\n * get a list of all available shape names using the following code.\n * \n * In general the cell renderer is in charge of creating, redrawing and\n * destroying the shape and label associated with a cell state, as well as\n * some other graphical objects, namely controls and overlays. The shape\n * hieararchy in the display (ie. the hierarchy in which the DOM nodes\n * appear in the document) does not reflect the cell hierarchy. The shapes\n * are a (flat) sequence of shapes and labels inside the draw pane of the\n * graph view, with some exceptions, namely the HTML labels being placed\n * directly inside the graph container for certain browsers.\n * \n * (code)\n * mxLog.show();\n * for (var i in mxCellRenderer.defaultShapes)\n * {\n *   mxLog.debug(i);\n * }\n * (end)\n *\n * Constructor: mxCellRenderer\n * \n * Constructs a new cell renderer with the following built-in shapes:\n * arrow, rectangle, ellipse, rhombus, image, line, label, cylinder,\n * swimlane, connector, actor and cloud.\n */\nfunction mxCellRenderer() { };\n\n/**\n * Variable: defaultShapes\n * \n * Static array that contains the globally registered shapes which are\n * known to all instances of this class. For adding new shapes you should\n * use the static <mxCellRenderer.registerShape> function.\n */\nmxCellRenderer.defaultShapes = new Object();\n\n/**\n * Variable: defaultEdgeShape\n * \n * Defines the default shape for edges. Default is <mxConnector>.\n */\nmxCellRenderer.prototype.defaultEdgeShape = mxConnector;\n\n/**\n * Variable: defaultVertexShape\n * \n * Defines the default shape for vertices. Default is <mxRectangleShape>.\n */\nmxCellRenderer.prototype.defaultVertexShape = mxRectangleShape;\n\n/**\n * Variable: defaultTextShape\n * \n * Defines the default shape for labels. Default is <mxText>.\n */\nmxCellRenderer.prototype.defaultTextShape = mxText;\n\n/**\n * Variable: legacyControlPosition\n * \n * Specifies if the folding icon should ignore the horizontal\n * orientation of a swimlane. Default is true.\n */\nmxCellRenderer.prototype.legacyControlPosition = true;\n\n/**\n * Variable: legacySpacing\n * \n * Specifies if spacing and label position should be ignored if overflow is\n * fill or width. Default is true for backwards compatiblity.\n */\nmxCellRenderer.prototype.legacySpacing = true;\n\n/**\n * Variable: antiAlias\n * \n * Anti-aliasing option for new shapes. Default is true.\n */\nmxCellRenderer.prototype.antiAlias = true;\n\n/**\n * Variable: minSvgStrokeWidth\n * \n * Minimum stroke width for SVG output.\n */\nmxCellRenderer.prototype.minSvgStrokeWidth = 1;\n\n/**\n * Variable: forceControlClickHandler\n * \n * Specifies if the enabled state of the graph should be ignored in the control\n * click handler (to allow folding in disabled graphs). Default is false.\n */\nmxCellRenderer.prototype.forceControlClickHandler = false;\n\n/**\n * Function: registerShape\n * \n * Registers the given constructor under the specified key in this instance\n * of the renderer.\n * \n * Example:\n * \n * (code)\n * mxCellRenderer.registerShape(mxConstants.SHAPE_RECTANGLE, mxRectangleShape);\n * (end)\n * \n * Parameters:\n * \n * key - String representing the shape name.\n * shape - Constructor of the <mxShape> subclass.\n */\nmxCellRenderer.registerShape = function(key, shape)\n{\n\tmxCellRenderer.defaultShapes[key] = shape;\n};\n\n// Adds default shapes into the default shapes array\nmxCellRenderer.registerShape(mxConstants.SHAPE_RECTANGLE, mxRectangleShape);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ELLIPSE, mxEllipse);\nmxCellRenderer.registerShape(mxConstants.SHAPE_RHOMBUS, mxRhombus);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CYLINDER, mxCylinder);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CONNECTOR, mxConnector);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ACTOR, mxActor);\nmxCellRenderer.registerShape(mxConstants.SHAPE_TRIANGLE, mxTriangle);\nmxCellRenderer.registerShape(mxConstants.SHAPE_HEXAGON, mxHexagon);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CLOUD, mxCloud);\nmxCellRenderer.registerShape(mxConstants.SHAPE_LINE, mxLine);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ARROW, mxArrow);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ARROW_CONNECTOR, mxArrowConnector);\nmxCellRenderer.registerShape(mxConstants.SHAPE_DOUBLE_ELLIPSE, mxDoubleEllipse);\nmxCellRenderer.registerShape(mxConstants.SHAPE_SWIMLANE, mxSwimlane);\nmxCellRenderer.registerShape(mxConstants.SHAPE_IMAGE, mxImageShape);\nmxCellRenderer.registerShape(mxConstants.SHAPE_LABEL, mxLabel);\n\n/**\n * Function: initializeShape\n * \n * Initializes the shape in the given state by calling its init method with\n * the correct container after configuring it using <configureShape>.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be initialized.\n */\nmxCellRenderer.prototype.initializeShape = function(state)\n{\n\tstate.shape.dialect = state.view.graph.dialect;\n\tthis.configureShape(state);\n\tstate.shape.init(state.view.getDrawPane());\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be created.\n */\nmxCellRenderer.prototype.createShape = function(state)\n{\n\tvar shape = null;\n\t\n\tif (state.style != null)\n\t{\n\t\t// Checks if there is a stencil for the name and creates\n\t\t// a shape instance for the stencil if one exists\n\t\tvar stencil = mxStencilRegistry.getStencil(state.style[mxConstants.STYLE_SHAPE]);\n\t\t\n\t\tif (stencil != null)\n\t\t{\n\t\t\tshape = new mxShape(stencil);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar ctor = this.getShapeConstructor(state);\n\t\t\tshape = new ctor();\n\t\t}\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: createIndicatorShape\n * \n * Creates the indicator shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the indicator shape should be created.\n */\nmxCellRenderer.prototype.createIndicatorShape = function(state)\n{\n\tstate.shape.indicatorShape = this.getShape(state.view.graph.getIndicatorShape(state));\n};\n\n/**\n * Function: getShape\n * \n * Returns the shape for the given name from <defaultShapes>.\n */\nmxCellRenderer.prototype.getShape = function(name)\n{\n\treturn (name != null) ? mxCellRenderer.defaultShapes[name] : null;\n};\n\n/**\n * Function: getShapeConstructor\n * \n * Returns the constructor to be used for creating the shape.\n */\nmxCellRenderer.prototype.getShapeConstructor = function(state)\n{\n\tvar ctor = this.getShape(state.style[mxConstants.STYLE_SHAPE]);\n\t\n\tif (ctor == null)\n\t{\n\t\tctor = (state.view.graph.getModel().isEdge(state.cell)) ?\n\t\t\tthis.defaultEdgeShape : this.defaultVertexShape;\n\t}\n\t\n\treturn ctor;\n};\n\n/**\n * Function: configureShape\n * \n * Configures the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be configured.\n */\nmxCellRenderer.prototype.configureShape = function(state)\n{\n\tstate.shape.apply(state);\n\tstate.shape.image = state.view.graph.getImage(state);\n\tstate.shape.indicatorColor = state.view.graph.getIndicatorColor(state);\n\tstate.shape.indicatorStrokeColor = state.style[mxConstants.STYLE_INDICATOR_STROKECOLOR];\n\tstate.shape.indicatorGradientColor = state.view.graph.getIndicatorGradientColor(state);\n\tstate.shape.indicatorDirection = state.style[mxConstants.STYLE_INDICATOR_DIRECTION];\n\tstate.shape.indicatorImage = state.view.graph.getIndicatorImage(state);\n\n\tthis.postConfigureShape(state);\n};\n\n/**\n * Function: postConfigureShape\n * \n * Replaces any reserved words used for attributes, eg. inherit,\n * indicated or swimlane for colors in the shape for the given state.\n * This implementation resolves these keywords on the fill, stroke\n * and gradient color keys.\n */\nmxCellRenderer.prototype.postConfigureShape = function(state)\n{\n\tif (state.shape != null)\n\t{\n\t\tthis.resolveColor(state, 'indicatorColor', mxConstants.STYLE_FILLCOLOR);\n\t\tthis.resolveColor(state, 'indicatorGradientColor', mxConstants.STYLE_GRADIENTCOLOR);\n\t\tthis.resolveColor(state, 'fill', mxConstants.STYLE_FILLCOLOR);\n\t\tthis.resolveColor(state, 'stroke', mxConstants.STYLE_STROKECOLOR);\n\t\tthis.resolveColor(state, 'gradient', mxConstants.STYLE_GRADIENTCOLOR);\n\t}\n};\n\n/**\n * Function: checkPlaceholderStyles\n * \n * Resolves special keywords 'inherit', 'indicated' and 'swimlane' and sets\n * the respective color on the shape.\n */\nmxCellRenderer.prototype.checkPlaceholderStyles = function(state)\n{\n\t// LATER: Check if the color has actually changed\n\tif (state.style != null)\n\t{\n\t\tvar values = ['inherit', 'swimlane', 'indicated'];\n\t\tvar styles = [mxConstants.STYLE_FILLCOLOR, mxConstants.STYLE_STROKECOLOR, mxConstants.STYLE_GRADIENTCOLOR];\n\t\t\n\t\tfor (var i = 0; i < styles.length; i++)\n\t\t{\n\t\t\tif (mxUtils.indexOf(values, state.style[styles[i]]) >= 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: resolveColor\n * \n * Resolves special keywords 'inherit', 'indicated' and 'swimlane' and sets\n * the respective color on the shape.\n */\nmxCellRenderer.prototype.resolveColor = function(state, field, key)\n{\n\tvar value = state.shape[field];\n\tvar graph = state.view.graph;\n\tvar referenced = null;\n\t\n\tif (value == 'inherit')\n\t{\n\t\treferenced = graph.model.getParent(state.cell);\n\t}\n\telse if (value == 'swimlane')\n\t{\n\t\tstate.shape[field] = (key == mxConstants.STYLE_STROKECOLOR) ? '#000000' : '#ffffff';\n\t\t\n\t\tif (graph.model.getTerminal(state.cell, false) != null)\n\t\t{\n\t\t\treferenced = graph.model.getTerminal(state.cell, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treferenced = state.cell;\n\t\t}\n\t\t\n\t\treferenced = graph.getSwimlane(referenced);\n\t\tkey = graph.swimlaneIndicatorColorAttribute;\n\t}\n\telse if (value == 'indicated')\n\t{\n\t\tstate.shape[field] = state.shape.indicatorColor;\n\t}\n\t\n\tif (referenced != null)\n\t{\n\t\tvar rstate = graph.getView().getState(referenced);\n\t\tstate.shape[field] = null;\n\n\t\tif (rstate != null)\n\t\t{\n\t\t\tif (rstate.shape != null && field != 'indicatorColor')\n\t\t\t{\n\t\t\t\tstate.shape[field] = rstate.shape[field];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape[field] = rstate.style[key];\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getLabelValue\n * \n * Returns the value to be used for the label.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the label should be created.\n */\nmxCellRenderer.prototype.getLabelValue = function(state)\n{\n\treturn state.view.graph.getLabel(state.cell);\n};\n\n/**\n * Function: createLabel\n * \n * Creates the label for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the label should be created.\n */\nmxCellRenderer.prototype.createLabel = function(state, value)\n{\n\tvar graph = state.view.graph;\n\tvar isEdge = graph.getModel().isEdge(state.cell);\n\t\n\tif (state.style[mxConstants.STYLE_FONTSIZE] > 0 || state.style[mxConstants.STYLE_FONTSIZE] == null)\n\t{\n\t\t// Avoids using DOM node for empty labels\n\t\tvar isForceHtml = (graph.isHtmlLabel(state.cell) || (value != null && mxUtils.isNode(value)));\n\n\t\tstate.text = new this.defaultTextShape(value, new mxRectangle(),\n\t\t\t\t(state.style[mxConstants.STYLE_ALIGN] || mxConstants.ALIGN_CENTER),\n\t\t\t\tgraph.getVerticalAlign(state),\n\t\t\t\tstate.style[mxConstants.STYLE_FONTCOLOR],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTFAMILY],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTSIZE],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTSTYLE],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_TOP],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_RIGHT],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_BOTTOM],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_LEFT],\n\t\t\t\tstate.style[mxConstants.STYLE_HORIZONTAL],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_BACKGROUNDCOLOR],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_BORDERCOLOR],\n\t\t\t\tgraph.isWrapping(state.cell) && graph.isHtmlLabel(state.cell),\n\t\t\t\tgraph.isLabelClipped(state.cell),\n\t\t\t\tstate.style[mxConstants.STYLE_OVERFLOW],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_PADDING],\n\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION));\n\t\tstate.text.opacity = mxUtils.getValue(state.style, mxConstants.STYLE_TEXT_OPACITY, 100);\n\t\tstate.text.dialect = (isForceHtml) ? mxConstants.DIALECT_STRICTHTML : state.view.graph.dialect;\n\t\tstate.text.style = state.style;\n\t\tstate.text.state = state;\n\t\tthis.initializeLabel(state, state.text);\n\t\t\n\t\t// Workaround for touch devices routing all events for a mouse gesture\n\t\t// (down, move, up) via the initial DOM node. IE additionally redirects\n\t\t// the event via the initial DOM node but the event source is the node\n\t\t// under the mouse, so we need to check if this is the case and force\n\t\t// getCellAt for the subsequent mouseMoves and the final mouseUp.\n\t\tvar forceGetCell = false;\n\t\t\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\tvar result = state;\n\n\t\t\tif (mxClient.IS_TOUCH || forceGetCell)\n\t\t\t{\n\t\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\t\n\t\t\t\t// Dispatches the drop event to the graph which\n\t\t\t\t// consumes and executes the source function\n\t\t\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\t\tresult = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t};\n\t\t\n\t\t// TODO: Add handling for special touch device gestures\n\t\tmxEvent.addGestureListeners(state.text.node,\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t\t\tforceGetCell = graph.dialect != mxConstants.DIALECT_SVG &&\n\t\t\t\t\t\tmxEvent.getSource(evt).nodeName == 'IMG';\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t\t\tforceGetCell = false;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\t// Uses double click timeout in mxGraph for quirks mode\n\t\tif (graph.nativeDblClickEnabled)\n\t\t{\n\t\t\tmxEvent.addListener(state.text.node, 'dblclick',\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t\t{\n\t\t\t\t\t\tgraph.dblClick(evt, state.cell);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Function: initializeLabel\n * \n * Initiailzes the label with a suitable container.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be initialized.\n */\nmxCellRenderer.prototype.initializeLabel = function(state, shape)\n{\n\tif (mxClient.IS_SVG && mxClient.NO_FO && shape.dialect != mxConstants.DIALECT_SVG)\n\t{\n\t\tshape.init(state.view.graph.container);\n\t}\n\telse\n\t{\n\t\tshape.init(state.view.getDrawPane());\n\t}\n};\n\n/**\n * Function: createCellOverlays\n * \n * Creates the actual shape for showing the overlay for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the overlay should be created.\n */\nmxCellRenderer.prototype.createCellOverlays = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar overlays = graph.getCellOverlays(state.cell);\n\tvar dict = null;\n\t\n\tif (overlays != null)\n\t{\n\t\tdict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < overlays.length; i++)\n\t\t{\n\t\t\tvar shape = (state.overlays != null) ? state.overlays.remove(overlays[i]) : null;\n\t\t\t\n\t\t\tif (shape == null)\n\t\t\t{\n\t\t\t\tvar tmp = new mxImageShape(new mxRectangle(), overlays[i].image.src);\n\t\t\t\ttmp.dialect = state.view.graph.dialect;\n\t\t\t\ttmp.preserveImageAspect = false;\n\t\t\t\ttmp.overlay = overlays[i];\n\t\t\t\tthis.initializeOverlay(state, tmp);\n\t\t\t\tthis.installCellOverlayListeners(state, overlays[i], tmp);\n\t\n\t\t\t\tif (overlays[i].cursor != null)\n\t\t\t\t{\n\t\t\t\t\ttmp.node.style.cursor = overlays[i].cursor;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdict.put(overlays[i], tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdict.put(overlays[i], shape);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Removes unused\n\tif (state.overlays != null)\n\t{\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tshape.destroy();\n\t\t});\n\t}\n\t\n\tstate.overlays = dict;\n};\n\n/**\n * Function: initializeOverlay\n * \n * Initializes the given overlay.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the overlay should be created.\n * overlay - <mxImageShape> that represents the overlay.\n */\nmxCellRenderer.prototype.initializeOverlay = function(state, overlay)\n{\n\toverlay.init(state.view.getOverlayPane());\n};\n\n/**\n * Function: installOverlayListeners\n * \n * Installs the listeners for the given <mxCellState>, <mxCellOverlay> and\n * <mxShape> that represents the overlay.\n */\nmxCellRenderer.prototype.installCellOverlayListeners = function(state, overlay, shape)\n{\n\tvar graph  = state.view.graph;\n\t\n\tmxEvent.addListener(shape.node, 'click', function (evt)\n\t{\n\t\tif (graph.isEditing())\n\t\t{\n\t\t\tgraph.stopEditing(!graph.isInvokesStopCellEditing());\n\t\t}\n\t\t\n\t\toverlay.fireEvent(new mxEventObject(mxEvent.CLICK,\n\t\t\t\t'event', evt, 'cell', state.cell));\n\t});\n\t\n\tmxEvent.addGestureListeners(shape.node,\n\t\tfunction (evt)\n\t\t{\n\t\t\tmxEvent.consume(evt);\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE,\n\t\t\t\tnew mxMouseEvent(evt, state));\n\t\t});\n\t\n\tif (mxClient.IS_TOUCH)\n\t{\n\t\tmxEvent.addListener(shape.node, 'touchend', function (evt)\n\t\t{\n\t\t\toverlay.fireEvent(new mxEventObject(mxEvent.CLICK,\n\t\t\t\t\t'event', evt, 'cell', state.cell));\n\t\t});\n\t}\n};\n\n/**\n * Function: createControl\n * \n * Creates the control for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the control should be created.\n */\nmxCellRenderer.prototype.createControl = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar image = graph.getFoldingImage(state);\n\t\n\tif (graph.foldingEnabled && image != null)\n\t{\n\t\tif (state.control == null)\n\t\t{\n\t\t\tvar b = new mxRectangle(0, 0, image.width, image.height);\n\t\t\tstate.control = new mxImageShape(b, image.src);\n\t\t\tstate.control.preserveImageAspect = false;\n\t\t\tstate.control.dialect = graph.dialect;\n\n\t\t\tthis.initControl(state, state.control, true, this.createControlClickHandler(state));\n\t\t}\n\t}\n\telse if (state.control != null)\n\t{\n\t\tstate.control.destroy();\n\t\tstate.control = null;\n\t}\n};\n\n/**\n * Function: createControlClickHandler\n * \n * Hook for creating the click handler for the folding icon.\n * \n * Parameters:\n * \n * state - <mxCellState> whose control click handler should be returned.\n */\nmxCellRenderer.prototype.createControlClickHandler = function(state)\n{\n\tvar graph = state.view.graph;\n\t\n\treturn mxUtils.bind(this, function (evt)\n\t{\n\t\tif (this.forceControlClickHandler || graph.isEnabled())\n\t\t{\n\t\t\tvar collapse = !graph.isCellCollapsed(state.cell);\n\t\t\tgraph.foldCells(collapse, false, [state.cell], null, evt);\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t});\n};\n\n/**\n * Function: initControl\n * \n * Initializes the given control and returns the corresponding DOM node.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the control should be initialized.\n * control - <mxShape> to be initialized.\n * handleEvents - Boolean indicating if mousedown and mousemove should fire events via the graph.\n * clickHandler - Optional function to implement clicks on the control.\n */\nmxCellRenderer.prototype.initControl = function(state, control, handleEvents, clickHandler)\n{\n\tvar graph = state.view.graph;\n\t\n\t// In the special case where the label is in HTML and the display is SVG the image\n\t// should go into the graph container directly in order to be clickable. Otherwise\n\t// it is obscured by the HTML label that overlaps the cell.\n\tvar isForceHtml = graph.isHtmlLabel(state.cell) && mxClient.NO_FO &&\n\t\tgraph.dialect == mxConstants.DIALECT_SVG;\n\n\tif (isForceHtml)\n\t{\n\t\tcontrol.dialect = mxConstants.DIALECT_PREFERHTML;\n\t\tcontrol.init(graph.container);\n\t\tcontrol.node.style.zIndex = 1;\n\t}\n\telse\n\t{\n\t\tcontrol.init(state.view.getOverlayPane());\n\t}\n\n\tvar node = control.innerNode || control.node;\n\t\n\t// Workaround for missing click event on iOS is to check tolerance below\n\tif (clickHandler != null && !mxClient.IS_IOS)\n\t{\n\t\tif (graph.isEnabled())\n\t\t{\n\t\t\tnode.style.cursor = 'pointer';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(node, 'click', clickHandler);\n\t}\n\t\n\tif (handleEvents)\n\t{\n\t\tvar first = null;\n\n\t\tmxEvent.addGestureListeners(node,\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tfirst = new mxPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t},\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, state));\n\t\t\t},\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, state));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\n\t\t// Uses capture phase for event interception to stop bubble phase\n\t\tif (clickHandler != null && mxClient.IS_IOS)\n\t\t{\n\t\t\tnode.addEventListener('touchend', function(evt)\n\t\t\t{\n\t\t\t\tif (first != null)\n\t\t\t\t{\n\t\t\t\t\tvar tol = graph.tolerance;\n\t\t\t\t\t\n\t\t\t\t\tif (Math.abs(first.x - mxEvent.getClientX(evt)) < tol &&\n\t\t\t\t\t\tMath.abs(first.y - mxEvent.getClientY(evt)) < tol)\n\t\t\t\t\t{\n\t\t\t\t\t\tclickHandler.call(clickHandler, evt);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, true);\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: isShapeEvent\n * \n * Returns true if the event is for the shape of the given state. This\n * implementation always returns true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose shape fired the event.\n * evt - Mouse event which was fired.\n */\nmxCellRenderer.prototype.isShapeEvent = function(state, evt)\n{\n\treturn true;\n};\n\n/**\n * Function: isLabelEvent\n * \n * Returns true if the event is for the label of the given state. This\n * implementation always returns true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label fired the event.\n * evt - Mouse event which was fired.\n */\nmxCellRenderer.prototype.isLabelEvent = function(state, evt)\n{\n\treturn true;\n};\n\n/**\n * Function: installListeners\n * \n * Installs the event listeners for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the event listeners should be isntalled.\n */\nmxCellRenderer.prototype.installListeners = function(state)\n{\n\tvar graph = state.view.graph;\n\n\t// Workaround for touch devices routing all events for a mouse\n\t// gesture (down, move, up) via the initial DOM node. Same for\n\t// HTML images in all IE versions (VML images are working).\n\tvar getState = function(evt)\n\t{\n\t\tvar result = state;\n\t\t\n\t\tif ((graph.dialect != mxConstants.DIALECT_SVG && mxEvent.getSource(evt).nodeName == 'IMG') || mxClient.IS_TOUCH)\n\t\t{\n\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\n\t\t\t// Dispatches the drop event to the graph which\n\t\t\t// consumes and executes the source function\n\t\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\tresult = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\tmxEvent.addGestureListeners(state.shape.node,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t})\n\t);\n\t\n\t// Uses double click timeout in mxGraph for quirks mode\n\tif (graph.nativeDblClickEnabled)\n\t{\n\t\tmxEvent.addListener(state.shape.node, 'dblclick',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.dblClick(evt, state.cell);\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n};\n\n/**\n * Function: redrawLabel\n * \n * Redraws the label for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be redrawn.\n */\nmxCellRenderer.prototype.redrawLabel = function(state, forced)\n{\n\tvar graph = state.view.graph;\n\tvar value = this.getLabelValue(state);\n\tvar wrapping = graph.isWrapping(state.cell);\n\tvar clipping = graph.isLabelClipped(state.cell);\n\tvar isForceHtml = (state.view.graph.isHtmlLabel(state.cell) || (value != null && mxUtils.isNode(value)));\n\tvar dialect = (isForceHtml) ? mxConstants.DIALECT_STRICTHTML : state.view.graph.dialect;\n\tvar overflow = state.style[mxConstants.STYLE_OVERFLOW] || 'visible';\n\n\tif (state.text != null && (state.text.wrap != wrapping || state.text.clipped != clipping ||\n\t\tstate.text.overflow != overflow || state.text.dialect != dialect))\n\t{\n\t\tstate.text.destroy();\n\t\tstate.text = null;\n\t}\n\t\n\tif (state.text == null && value != null && (mxUtils.isNode(value) || value.length > 0))\n\t{\n\t\tthis.createLabel(state, value);\n\t}\n\telse if (state.text != null && (value == null || value.length == 0))\n\t{\n\t\tstate.text.destroy();\n\t\tstate.text = null;\n\t}\n\n\tif (state.text != null)\n\t{\n\t\t// Forced is true if the style has changed, so to get the updated\n\t\t// result in getLabelBounds we apply the new style to the shape\n\t\tif (forced)\n\t\t{\n\t\t\t// Checks if a full repaint is needed\n\t\t\tif (state.text.lastValue != null && this.isTextShapeInvalid(state, state.text))\n\t\t\t{\n\t\t\t\t// Forces a full repaint\n\t\t\t\tstate.text.lastValue = null;\n\t\t\t}\n\t\t\t\n\t\t\tstate.text.resetStyles();\n\t\t\tstate.text.apply(state);\n\t\t\t\n\t\t\t// Special case where value is obtained via hook in graph\n\t\t\tstate.text.valign = graph.getVerticalAlign(state);\n\t\t}\n\t\t\n\t\tvar bounds = this.getLabelBounds(state);\n\t\tvar nextScale = this.getTextScale(state);\n\t\t\n\t\tif (forced || state.text.value != value || state.text.isWrapping != wrapping ||\n\t\t\tstate.text.overflow != overflow || state.text.isClipping != clipping ||\n\t\t\tstate.text.scale != nextScale || state.text.dialect != dialect ||\n\t\t\t!state.text.bounds.equals(bounds))\n\t\t{\n\t\t\t// Forces an update of the text bounding box\n\t\t\tif (state.text.bounds.width != 0 && state.unscaledWidth != null &&\n\t\t\t\tMath.round((state.text.bounds.width /\n\t\t\t\tstate.text.scale * nextScale) - bounds.width) != 0)\n\t\t\t{\n\t\t\t\tstate.unscaledWidth = null;\n\t\t\t}\n\t\t\t\n\t\t\tstate.text.dialect = dialect;\n\t\t\tstate.text.value = value;\n\t\t\tstate.text.bounds = bounds;\n\t\t\tstate.text.scale = nextScale;\n\t\t\tstate.text.wrap = wrapping;\n\t\t\tstate.text.clipped = clipping;\n\t\t\tstate.text.overflow = overflow;\n\t\t\t\n\t\t\t// Preserves visible state\n\t\t\tvar vis = state.text.node.style.visibility;\n\t\t\tthis.redrawLabelShape(state.text);\n\t\t\tstate.text.node.style.visibility = vis;\n\t\t}\n\t}\n};\n\n/**\n * Function: isTextShapeInvalid\n * \n * Returns true if the style for the text shape has changed.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be checked.\n * shape - <mxText> shape to be checked.\n */\nmxCellRenderer.prototype.isTextShapeInvalid = function(state, shape)\n{\n\tfunction check(property, stylename, defaultValue)\n\t{\n\t\t// Workaround for spacing added to directional spacing\n\t\tif (stylename == 'spacingTop' || stylename == 'spacingRight' ||\n\t\t\tstylename == 'spacingBottom' || stylename == 'spacingLeft')\n\t\t{\n\t\t\tresult = parseFloat(shape[property]) - parseFloat(shape.spacing) !=\n\t\t\t\t(state.style[stylename] || defaultValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = shape[property] != (state.style[stylename] || defaultValue);\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\treturn check('fontStyle', mxConstants.STYLE_FONTSTYLE, mxConstants.DEFAULT_FONTSTYLE) ||\n\t\tcheck('family', mxConstants.STYLE_FONTFAMILY, mxConstants.DEFAULT_FONTFAMILY) ||\n\t\tcheck('size', mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE) ||\n\t\tcheck('color', mxConstants.STYLE_FONTCOLOR, 'black') ||\n\t\tcheck('align', mxConstants.STYLE_ALIGN, '') ||\n\t\tcheck('valign', mxConstants.STYLE_VERTICAL_ALIGN, '') ||\n\t\tcheck('spacing', mxConstants.STYLE_SPACING, 2) ||\n\t\tcheck('spacingTop', mxConstants.STYLE_SPACING_TOP, 0) ||\n\t\tcheck('spacingRight', mxConstants.STYLE_SPACING_RIGHT, 0) ||\n\t\tcheck('spacingBottom', mxConstants.STYLE_SPACING_BOTTOM, 0) ||\n\t\tcheck('spacingLeft', mxConstants.STYLE_SPACING_LEFT, 0) ||\n\t\tcheck('horizontal', mxConstants.STYLE_HORIZONTAL, true) ||\n\t\tcheck('background', mxConstants.STYLE_LABEL_BACKGROUNDCOLOR) ||\n\t\tcheck('border', mxConstants.STYLE_LABEL_BORDERCOLOR) ||\n\t\tcheck('opacity', mxConstants.STYLE_TEXT_OPACITY, 100) ||\n\t\tcheck('textDirection', mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n};\n\n/**\n * Function: redrawLabelShape\n * \n * Called to invoked redraw on the given text shape.\n * \n * Parameters:\n * \n * shape - <mxText> shape to be redrawn.\n */\nmxCellRenderer.prototype.redrawLabelShape = function(shape)\n{\n\tshape.redraw();\n};\n\n/**\n * Function: getTextScale\n * \n * Returns the scaling used for the label of the given state\n * \n * Parameters:\n * \n * state - <mxCellState> whose label scale should be returned.\n */\nmxCellRenderer.prototype.getTextScale = function(state)\n{\n\treturn state.view.scale;\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounds to be used to draw the label of the given state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label bounds should be returned.\n */\nmxCellRenderer.prototype.getLabelBounds = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar scale = state.view.scale;\n\tvar isEdge = graph.getModel().isEdge(state.cell);\n\tvar bounds = new mxRectangle(state.absoluteOffset.x, state.absoluteOffset.y);\n\n\tif (isEdge)\n\t{\n\t\tvar spacing = state.text.getSpacing();\n\t\tbounds.x += spacing.x * scale;\n\t\tbounds.y += spacing.y * scale;\n\t\t\n\t\tvar geo = graph.getCellGeometry(state.cell);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tbounds.width = Math.max(0, geo.width * scale);\n\t\t\tbounds.height = Math.max(0, geo.height * scale);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Inverts label position\n\t\tif (state.text.isPaintBoundsInverted())\n\t\t{\n\t\t\tvar tmp = bounds.x;\n\t\t\tbounds.x = bounds.y;\n\t\t\tbounds.y = tmp;\n\t\t}\n\t\t\n\t\tbounds.x += state.x;\n\t\tbounds.y += state.y;\n\t\t\n\t\t// Minimum of 1 fixes alignment bug in HTML labels\n\t\tbounds.width = Math.max(1, state.width);\n\t\tbounds.height = Math.max(1, state.height);\n\n\t\tvar sc = mxUtils.getValue(state.style, mxConstants.STYLE_STROKECOLOR, mxConstants.NONE);\n\t\t\n\t\tif (sc != mxConstants.NONE && sc != '')\n\t\t{\n\t\t\tvar s = parseFloat(mxUtils.getValue(state.style, mxConstants.STYLE_STROKEWIDTH, 1)) * scale;\n\t\t\tvar dx = 1 + Math.floor((s - 1) / 2);\n\t\t\tvar dh = Math.floor(s + 1);\n\t\t\t\n\t\t\tbounds.x += dx;\n\t\t\tbounds.y += dx;\n\t\t\tbounds.width -= dh;\n\t\t\tbounds.height -= dh;\n\t\t}\n\t}\n\n\tif (state.text.isPaintBoundsInverted())\n\t{\n\t\t// Rotates around center of state\n\t\tvar t = (state.width - state.height) / 2;\n\t\tbounds.x += t;\n\t\tbounds.y -= t;\n\t\tvar tmp = bounds.width;\n\t\tbounds.width = bounds.height;\n\t\tbounds.height = tmp;\n\t}\n\t\n\t// Shape can modify its label bounds\n\tif (state.shape != null)\n\t{\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\t\n\t\tif (hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tbounds = state.shape.getLabelBounds(bounds);\n\t\t}\n\t}\n\t\n\t// Label width style overrides actual label width\n\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\n\tif (lw != null)\n\t{\n\t\tbounds.width = parseFloat(lw) * scale;\n\t}\n\t\n\tif (!isEdge)\n\t{\n\t\tthis.rotateLabelBounds(state, bounds);\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: rotateLabelBounds\n * \n * Adds the shape rotation to the given label bounds and\n * applies the alignment and offsets.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label bounds should be rotated.\n * bounds - <mxRectangle> the rectangle to be rotated.\n */\nmxCellRenderer.prototype.rotateLabelBounds = function(state, bounds)\n{\n\tbounds.y -= state.text.margin.y * bounds.height;\n\tbounds.x -= state.text.margin.x * bounds.width;\n\t\n\tif (!this.legacySpacing || (state.style[mxConstants.STYLE_OVERFLOW] != 'fill' && state.style[mxConstants.STYLE_OVERFLOW] != 'width'))\n\t{\n\t\tvar s = state.view.scale;\n\t\tvar spacing = state.text.getSpacing();\n\t\tbounds.x += spacing.x * s;\n\t\tbounds.y += spacing.y * s;\n\t\t\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tbounds.width = Math.max(0, bounds.width - ((hpos == mxConstants.ALIGN_CENTER && lw == null) ? (state.text.spacingLeft * s + state.text.spacingRight * s) : 0));\n\t\tbounds.height = Math.max(0, bounds.height - ((vpos == mxConstants.ALIGN_MIDDLE) ? (state.text.spacingTop * s + state.text.spacingBottom * s) : 0));\n\t}\n\n\tvar theta = state.text.getTextRotation();\n\n\t// Only needed if rotated around another center\n\tif (theta != 0 && state != null && state.view.graph.model.isVertex(state.cell))\n\t{\n\t\tvar cx = state.getCenterX();\n\t\tvar cy = state.getCenterY();\n\t\t\n\t\tif (bounds.x != cx || bounds.y != cy)\n\t\t{\n\t\t\tvar rad = theta * (Math.PI / 180);\n\t\t\tpt = mxUtils.getRotatedPoint(new mxPoint(bounds.x, bounds.y),\n\t\t\t\t\tMath.cos(rad), Math.sin(rad), new mxPoint(cx, cy));\n\t\t\t\n\t\t\tbounds.x = pt.x;\n\t\t\tbounds.y = pt.y;\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawCellOverlays\n * \n * Redraws the overlays for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose overlays should be redrawn.\n */\nmxCellRenderer.prototype.redrawCellOverlays = function(state, forced)\n{\n\tthis.createCellOverlays(state);\n\n\tif (state.overlays != null)\n\t{\n\t\tvar rot = mxUtils.mod(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0), 90);\n        var rad = mxUtils.toRadians(rot);\n        var cos = Math.cos(rad);\n        var sin = Math.sin(rad);\n\t\t\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tvar bounds = shape.overlay.getBounds(state);\n\t\t\n\t\t\tif (!state.view.graph.getModel().isEdge(state.cell))\n\t\t\t{\n\t\t\t\tif (state.shape != null && rot != 0)\n\t\t\t\t{\n\t\t\t\t\tvar cx = bounds.getCenterX();\n\t\t\t\t\tvar cy = bounds.getCenterY();\n\n\t\t\t\t\tvar point = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin,\n\t\t\t        \t\tnew mxPoint(state.getCenterX(), state.getCenterY()));\n\n\t\t\t        cx = point.x;\n\t\t\t        cy = point.y;\n\t\t\t        bounds.x = Math.round(cx - bounds.width / 2);\n\t\t\t        bounds.y = Math.round(cy - bounds.height / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (forced || shape.bounds == null || shape.scale != state.view.scale ||\n\t\t\t\t!shape.bounds.equals(bounds))\n\t\t\t{\n\t\t\t\tshape.bounds = bounds;\n\t\t\t\tshape.scale = state.view.scale;\n\t\t\t\tshape.redraw();\n\t\t\t}\n\t\t});\n\t}\n};\n\n/**\n * Function: redrawControl\n * \n * Redraws the control for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose control should be redrawn.\n */\nmxCellRenderer.prototype.redrawControl = function(state, forced)\n{\n\tvar image = state.view.graph.getFoldingImage(state);\n\t\n\tif (state.control != null && image != null)\n\t{\n\t\tvar bounds = this.getControlBounds(state, image.width, image.height);\n\t\tvar r = (this.legacyControlPosition) ?\n\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0) :\n\t\t\t\tstate.shape.getTextRotation();\n\t\tvar s = state.view.scale;\n\t\t\n\t\tif (forced || state.control.scale != s || !state.control.bounds.equals(bounds) ||\n\t\t\tstate.control.rotation != r)\n\t\t{\n\t\t\tstate.control.rotation = r;\n\t\t\tstate.control.bounds = bounds;\n\t\t\tstate.control.scale = s;\n\t\t\t\n\t\t\tstate.control.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getControlBounds\n * \n * Returns the bounds to be used to draw the control (folding icon) of the\n * given state.\n */\nmxCellRenderer.prototype.getControlBounds = function(state, w, h)\n{\n\tif (state.control != null)\n\t{\n\t\tvar s = state.view.scale;\n\t\tvar cx = state.getCenterX();\n\t\tvar cy = state.getCenterY();\n\t\n\t\tif (!state.view.graph.getModel().isEdge(state.cell))\n\t\t{\n\t\t\tcx = state.x + w * s;\n\t\t\tcy = state.y + h * s;\n\t\t\t\n\t\t\tif (state.shape != null)\n\t\t\t{\n\t\t\t\t// TODO: Factor out common code\n\t\t\t\tvar rot = state.shape.getShapeRotation();\n\t\t\t\t\n\t\t\t\tif (this.legacyControlPosition)\n\t\t\t\t{\n\t\t\t\t\trot = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (state.shape.isPaintBoundsInverted())\n\t\t\t\t\t{\n\t\t\t\t\t\tvar t = (state.width - state.height) / 2;\n\t\t\t\t\t\tcx += t;\n\t\t\t\t\t\tcy -= t;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (rot != 0)\n\t\t\t\t{\n\t\t\t        var rad = mxUtils.toRadians(rot);\n\t\t\t        var cos = Math.cos(rad);\n\t\t\t        var sin = Math.sin(rad);\n\t\t\t        \n\t\t\t        var point = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin,\n\t\t\t        \t\tnew mxPoint(state.getCenterX(), state.getCenterY()));\n\t\t\t        cx = point.x;\n\t\t\t        cy = point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (state.view.graph.getModel().isEdge(state.cell)) ? \n\t\t\tnew mxRectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s))\n\t\t\t: new mxRectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s));\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: insertStateAfter\n * \n * Inserts the given array of <mxShapes> after the given nodes in the DOM.\n * \n * Parameters:\n * \n * shapes - Array of <mxShapes> to be inserted.\n * node - Node in <drawPane> after which the shapes should be inserted.\n * htmlNode - Node in the graph container after which the shapes should be inserted that\n * will not go into the <drawPane> (eg. HTML labels without foreignObjects).\n */\nmxCellRenderer.prototype.insertStateAfter = function(state, node, htmlNode)\n{\n\tvar shapes = this.getShapesForState(state);\n\t\n\tfor (var i = 0; i < shapes.length; i++)\n\t{\n\t\tif (shapes[i] != null && shapes[i].node != null)\n\t\t{\n\t\t\tvar html = shapes[i].node.parentNode != state.view.getDrawPane() &&\n\t\t\t\tshapes[i].node.parentNode != state.view.getOverlayPane();\n\t\t\tvar temp = (html) ? htmlNode : node;\n\t\t\t\n\t\t\tif (temp != null && temp.nextSibling != shapes[i].node)\n\t\t\t{\n\t\t\t\tif (temp.nextSibling == null)\n\t\t\t\t{\n\t\t\t\t\ttemp.parentNode.appendChild(shapes[i].node);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttemp.parentNode.insertBefore(shapes[i].node, temp.nextSibling);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (temp == null)\n\t\t\t{\n\t\t\t\t// Special case: First HTML node should be first sibling after canvas\n\t\t\t\tif (shapes[i].node.parentNode == state.view.graph.container)\n\t\t\t\t{\n\t\t\t\t\tvar canvas = state.view.canvas;\n\t\t\t\t\t\n\t\t\t\t\twhile (canvas != null && canvas.parentNode != state.view.graph.container)\n\t\t\t\t\t{\n\t\t\t\t\t\tcanvas = canvas.parentNode;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (canvas != null && canvas.nextSibling != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (canvas.nextSibling != shapes[i].node)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tshapes[i].node.parentNode.insertBefore(shapes[i].node, canvas.nextSibling);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tshapes[i].node.parentNode.appendChild(shapes[i].node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (shapes[i].node.parentNode.firstChild != null && shapes[i].node.parentNode.firstChild != shapes[i].node)\n\t\t\t\t{\n\t\t\t\t\t// Inserts the node as the first child of the parent to implement the order\n\t\t\t\t\tshapes[i].node.parentNode.insertBefore(shapes[i].node, shapes[i].node.parentNode.firstChild);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (html)\n\t\t\t{\n\t\t\t\thtmlNode = shapes[i].node;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnode = shapes[i].node;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [node, htmlNode];\n};\n\n/**\n * Function: getShapesForState\n * \n * Returns the <mxShapes> for the given cell state in the order in which they should\n * appear in the DOM.\n * \n * Parameters:\n * \n * state - <mxCellState> whose shapes should be returned.\n */\nmxCellRenderer.prototype.getShapesForState = function(state)\n{\n\treturn [state.shape, state.text, state.control];\n};\n\n/**\n * Function: redraw\n * \n * Updates the bounds or points and scale of the shapes for the given cell\n * state. This is called in mxGraphView.validatePoints as the last step of\n * updating all cells.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shapes should be updated.\n * force - Optional boolean that specifies if the cell should be reconfiured\n * and redrawn without any additional checks.\n * rendering - Optional boolean that specifies if the cell should actually\n * be drawn into the DOM. If this is false then redraw and/or reconfigure\n * will not be called on the shape.\n */\nmxCellRenderer.prototype.redraw = function(state, force, rendering)\n{\n\tvar shapeChanged = this.redrawShape(state, force, rendering);\n\t\n\tif (state.shape != null && (rendering == null || rendering))\n\t{\n\t\tthis.redrawLabel(state, shapeChanged);\n\t\tthis.redrawCellOverlays(state, shapeChanged);\n\t\tthis.redrawControl(state, shapeChanged);\n\t}\n};\n\n/**\n * Function: redrawShape\n * \n * Redraws the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be redrawn.\n */\nmxCellRenderer.prototype.redrawShape = function(state, force, rendering)\n{\n\tvar model = state.view.graph.model;\n\tvar shapeChanged = false;\n\n\t// Forces creation of new shape if shape style has changed\n\tif (state.shape != null && state.shape.style != null && state.style != null &&\n\t\tstate.shape.style[mxConstants.STYLE_SHAPE] != state.style[mxConstants.STYLE_SHAPE])\n\t{\n\t\tstate.shape.destroy();\n\t\tstate.shape = null;\n\t}\n\t\n\tif (state.shape == null && state.view.graph.container != null &&\n\t\tstate.cell != state.view.currentRoot &&\n\t\t(model.isVertex(state.cell) || model.isEdge(state.cell)))\n\t{\n\t\tstate.shape = this.createShape(state);\n\t\t\n\t\tif (state.shape != null)\n\t\t{\n\t\t\tstate.shape.minSvgStrokeWidth = this.minSvgStrokeWidth;\n\t\t\tstate.shape.antiAlias = this.antiAlias;\n\t\n\t\t\tthis.createIndicatorShape(state);\n\t\t\tthis.initializeShape(state);\n\t\t\tthis.createCellOverlays(state);\n\t\t\tthis.installListeners(state);\n\t\t\t\n\t\t\t// Forces a refresh of the handler if one exists\n\t\t\tstate.view.graph.selectionCellsHandler.updateHandler(state);\n\t\t}\n\t}\n\telse if (!force && state.shape != null && (!mxUtils.equalEntries(state.shape.style,\n\t\tstate.style) || this.checkPlaceholderStyles(state)))\n\t{\n\t\tstate.shape.resetStyles();\n\t\tthis.configureShape(state);\n\t\t// LATER: Ignore update for realtime to fix reset of current gesture\n\t\tstate.view.graph.selectionCellsHandler.updateHandler(state);\n\t\tforce = true;\n\t}\n\n\tif (state.shape != null)\n\t{\n\t\t// Handles changes of the collapse icon\n\t\tthis.createControl(state);\n\t\t\n\t\t// Redraws the cell if required, ignores changes to bounds if points are\n\t\t// defined as the bounds are updated for the given points inside the shape\n\t\tif (force || this.isShapeInvalid(state, state.shape))\n\t\t{\n\t\t\tif (state.absolutePoints != null)\n\t\t\t{\n\t\t\t\tstate.shape.points = state.absolutePoints.slice();\n\t\t\t\tstate.shape.bounds = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape.points = null;\n\t\t\t\tstate.shape.bounds = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\t}\n\n\t\t\tstate.shape.scale = state.view.scale;\n\t\t\t\n\t\t\tif (rendering == null || rendering)\n\t\t\t{\n\t\t\t\tthis.doRedrawShape(state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape.updateBoundingBox();\n\t\t\t}\n\t\t\t\n\t\t\tshapeChanged = true;\n\t\t}\n\t}\n\n\treturn shapeChanged;\n};\n\n/**\n * Function: doRedrawShape\n * \n * Invokes redraw on the shape of the given state.\n */\nmxCellRenderer.prototype.doRedrawShape = function(state)\n{\n\tstate.shape.redraw();\n};\n\n/**\n * Function: isShapeInvalid\n * \n * Returns true if the given shape must be repainted.\n */\nmxCellRenderer.prototype.isShapeInvalid = function(state, shape)\n{\n\treturn shape.bounds == null || shape.scale != state.view.scale ||\n\t\t(state.absolutePoints == null && !shape.bounds.equals(state)) ||\n\t\t(state.absolutePoints != null && !mxUtils.equalPoints(shape.points, state.absolutePoints))\n};\n\n/**\n * Function: destroy\n * \n * Destroys the shapes associated with the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shapes should be destroyed.\n */\nmxCellRenderer.prototype.destroy = function(state)\n{\n\tif (state.shape != null)\n\t{\n\t\tif (state.text != null)\n\t\t{\t\t\n\t\t\tstate.text.destroy();\n\t\t\tstate.text = null;\n\t\t}\n\t\t\n\t\tif (state.overlays != null)\n\t\t{\n\t\t\tstate.overlays.visit(function(id, shape)\n\t\t\t{\n\t\t\t\tshape.destroy();\n\t\t\t});\n\t\t\t\n\t\t\tstate.overlays = null;\n\t\t}\n\n\t\tif (state.control != null)\n\t\t{\n\t\t\tstate.control.destroy();\n\t\t\tstate.control = null;\n\t\t}\n\t\t\n\t\tstate.shape.destroy();\n\t\tstate.shape = null;\n\t}\n};\n\n__mxOutput.mxCellRenderer = typeof mxCellRenderer !== 'undefined' ? mxCellRenderer : undefined;\n"]}