{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/view/mxCellState.js"],"names":["mxCellState","view","cell","style","origin","mxPoint","absoluteOffset","prototype","mxRectangle","constructor","invalid","absolutePoints","visibleSourceState","visibleTargetState","terminalDistance","length","segments","shape","text","unscaledWidth","getPerimeterBounds","border","bounds","x","y","width","height","stencil","aspect","computeAspect","w0","h0","grow","setAbsoluteTerminalPoint","point","isSource","push","setCursor","cursor","getVisibleTerminal","source","tmp","getVisibleTerminalState","setVisibleTerminalState","terminalState","getCellBounds","cellBounds","getPaintBounds","paintBounds","updateCachedBounds","tr","translate","s","scale","fromRectangle","isPaintBoundsInverted","rotate90","setState","state","boundingBox","clone","i","destroy","graph","cellRenderer","__mxOutput","undefined"],"mappings":"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","file":"mxCellState.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellState\n * \n * Represents the current state of a cell in a given <mxGraphView>.\n * \n * For edges, the edge label position is stored in <absoluteOffset>.\n * \n * The size for oversize labels can be retrieved using the boundingBox property\n * of the <text> field as shown below.\n * \n * (code)\n * var bbox = (state.text != null) ? state.text.boundingBox : null;\n * (end)\n * \n * Constructor: mxCellState\n * \n * Constructs a new object that represents the current state of the given\n * cell in the specified view.\n * \n * Parameters:\n * \n * view - <mxGraphView> that contains the state.\n * cell - <mxCell> that this state represents.\n * style - Array of key, value pairs that constitute the style.\n */\nfunction mxCellState(view, cell, style)\n{\n\tthis.view = view;\n\tthis.cell = cell;\n\tthis.style = style;\n\t\n\tthis.origin = new mxPoint();\n\tthis.absoluteOffset = new mxPoint();\n};\n\n/**\n * Extends mxRectangle.\n */\nmxCellState.prototype = new mxRectangle();\nmxCellState.prototype.constructor = mxCellState;\n\n/**\n * Variable: view\n * \n * Reference to the enclosing <mxGraphView>.\n */\nmxCellState.prototype.view = null;\n\n/**\n * Variable: cell\n *\n * Reference to the <mxCell> that is represented by this state.\n */\nmxCellState.prototype.cell = null;\n\n/**\n * Variable: style\n * \n * Contains an array of key, value pairs that represent the style of the\n * cell.\n */\nmxCellState.prototype.style = null;\n\n/**\n * Variable: invalid\n * \n * Specifies if the state is invalid. Default is true.\n */\nmxCellState.prototype.invalid = true;\n\n/**\n * Variable: origin\n *\n * <mxPoint> that holds the origin for all child cells. Default is a new\n * empty <mxPoint>.\n */\nmxCellState.prototype.origin = null;\n\n/**\n * Variable: absolutePoints\n * \n * Holds an array of <mxPoints> that represent the absolute points of an\n * edge.\n */\nmxCellState.prototype.absolutePoints = null;\n\n/**\n * Variable: absoluteOffset\n *\n * <mxPoint> that holds the absolute offset. For edges, this is the\n * absolute coordinates of the label position. For vertices, this is the\n * offset of the label relative to the top, left corner of the vertex. \n */\nmxCellState.prototype.absoluteOffset = null;\n\n/**\n * Variable: visibleSourceState\n * \n * Caches the visible source terminal state.\n */\nmxCellState.prototype.visibleSourceState = null;\n\n/**\n * Variable: visibleTargetState\n * \n * Caches the visible target terminal state.\n */\nmxCellState.prototype.visibleTargetState = null;\n\n/**\n * Variable: terminalDistance\n * \n * Caches the distance between the end points for an edge.\n */\nmxCellState.prototype.terminalDistance = 0;\n\n/**\n * Variable: length\n *\n * Caches the length of an edge.\n */\nmxCellState.prototype.length = 0;\n\n/**\n * Variable: segments\n * \n * Array of numbers that represent the cached length of each segment of the\n * edge.\n */\nmxCellState.prototype.segments = null;\n\n/**\n * Variable: shape\n * \n * Holds the <mxShape> that represents the cell graphically.\n */\nmxCellState.prototype.shape = null;\n\n/**\n * Variable: text\n * \n * Holds the <mxText> that represents the label of the cell. Thi smay be\n * null if the cell has no label.\n */\nmxCellState.prototype.text = null;\n\n/**\n * Variable: unscaledWidth\n * \n * Holds the unscaled width of the state.\n */\nmxCellState.prototype.unscaledWidth = null;\n\n/**\n * Function: getPerimeterBounds\n * \n * Returns the <mxRectangle> that should be used as the perimeter of the\n * cell.\n * \n * Parameters:\n * \n * border - Optional border to be added around the perimeter bounds.\n * bounds - Optional <mxRectangle> to be used as the initial bounds.\n */\nmxCellState.prototype.getPerimeterBounds = function(border, bounds)\n{\n\tborder = border || 0;\n\tbounds = (bounds != null) ? bounds : new mxRectangle(this.x, this.y, this.width, this.height);\n\t\n\tif (this.shape != null && this.shape.stencil != null && this.shape.stencil.aspect == 'fixed')\n\t{\n\t\tvar aspect = this.shape.stencil.computeAspect(this.style, bounds.x, bounds.y, bounds.width, bounds.height);\n\t\t\n\t\tbounds.x = aspect.x;\n\t\tbounds.y = aspect.y;\n\t\tbounds.width = this.shape.stencil.w0 * aspect.width;\n\t\tbounds.height = this.shape.stencil.h0 * aspect.height;\n\t}\n\t\n\tif (border != 0)\n\t{\n\t\tbounds.grow(border);\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: setAbsoluteTerminalPoint\n * \n * Sets the first or last point in <absolutePoints> depending on isSource.\n * \n * Parameters:\n * \n * point - <mxPoint> that represents the terminal point.\n * isSource - Boolean that specifies if the first or last point should\n * be assigned.\n */\nmxCellState.prototype.setAbsoluteTerminalPoint = function(point, isSource)\n{\n\tif (isSource)\n\t{\n\t\tif (this.absolutePoints == null)\n\t\t{\n\t\t\tthis.absolutePoints = [];\n\t\t}\n\t\t\n\t\tif (this.absolutePoints.length == 0)\n\t\t{\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.absolutePoints[0] = point;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (this.absolutePoints == null)\n\t\t{\n\t\t\tthis.absolutePoints = [];\n\t\t\tthis.absolutePoints.push(null);\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse if (this.absolutePoints.length == 1)\n\t\t{\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.absolutePoints[this.absolutePoints.length - 1] = point;\n\t\t}\n\t}\n};\n\n/**\n * Function: setCursor\n * \n * Sets the given cursor on the shape and text shape.\n */\nmxCellState.prototype.setCursor = function(cursor)\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.setCursor(cursor);\n\t}\n\t\n\tif (this.text != null)\n\t{\n\t\tthis.text.setCursor(cursor);\n\t}\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Returns the visible source or target terminal cell.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source or target cell should be\n * returned.\n */\nmxCellState.prototype.getVisibleTerminal = function(source)\n{\n\tvar tmp = this.getVisibleTerminalState(source);\n\t\n\treturn (tmp != null) ? tmp.cell : null;\n};\n\n/**\n * Function: getVisibleTerminalState\n * \n * Returns the visible source or target terminal state.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source or target state should be\n * returned.\n */\nmxCellState.prototype.getVisibleTerminalState = function(source)\n{\n\treturn (source) ? this.visibleSourceState : this.visibleTargetState;\n};\n\n/**\n * Function: setVisibleTerminalState\n * \n * Sets the visible source or target terminal state.\n * \n * Parameters:\n * \n * terminalState - <mxCellState> that represents the terminal.\n * source - Boolean that specifies if the source or target state should be set.\n */\nmxCellState.prototype.setVisibleTerminalState = function(terminalState, source)\n{\n\tif (source)\n\t{\n\t\tthis.visibleSourceState = terminalState;\n\t}\n\telse\n\t{\n\t\tthis.visibleTargetState = terminalState;\n\t}\n};\n\n/**\n * Function: getCellBounds\n * \n * Returns the unscaled, untranslated bounds.\n */\nmxCellState.prototype.getCellBounds = function()\n{\n\treturn this.cellBounds;\n};\n\n/**\n * Function: getPaintBounds\n * \n * Returns the unscaled, untranslated paint bounds. This is the same as\n * <getCellBounds> but with a 90 degree rotation if the shape's\n * isPaintBoundsInverted returns true.\n */\nmxCellState.prototype.getPaintBounds = function()\n{\n\treturn this.paintBounds;\n};\n\n/**\n * Function: updateCachedBounds\n * \n * Updates the cellBounds and paintBounds.\n */\nmxCellState.prototype.updateCachedBounds = function()\n{\n\tvar tr = this.view.translate;\n\tvar s = this.view.scale;\n\tthis.cellBounds = new mxRectangle(this.x / s - tr.x, this.y / s - tr.y, this.width / s, this.height / s);\n\tthis.paintBounds = mxRectangle.fromRectangle(this.cellBounds);\n\t\n\tif (this.shape != null && this.shape.isPaintBoundsInverted())\n\t{\n\t\tthis.paintBounds.rotate90();\n\t}\n};\n\n/**\n * Destructor: setState\n * \n * Copies all fields from the given state to this state.\n */\nmxCellState.prototype.setState = function(state)\n{\n\tthis.view = state.view;\n\tthis.cell = state.cell;\n\tthis.style = state.style;\n\tthis.absolutePoints = state.absolutePoints;\n\tthis.origin = state.origin;\n\tthis.absoluteOffset = state.absoluteOffset;\n\tthis.boundingBox = state.boundingBox;\n\tthis.terminalDistance = state.terminalDistance;\n\tthis.segments = state.segments;\n\tthis.length = state.length;\n\tthis.x = state.x;\n\tthis.y = state.y;\n\tthis.width = state.width;\n\tthis.height = state.height;\n\tthis.unscaledWidth = state.unscaledWidth;\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of this <mxPoint>.\n */\nmxCellState.prototype.clone = function()\n{\n \tvar clone = new mxCellState(this.view, this.cell, this.style);\n\n\t// Clones the absolute points\n\tif (this.absolutePoints != null)\n\t{\n\t\tclone.absolutePoints = [];\n\t\t\n\t\tfor (var i = 0; i < this.absolutePoints.length; i++)\n\t\t{\n\t\t\tclone.absolutePoints[i] = this.absolutePoints[i].clone();\n\t\t}\n\t}\n\n\tif (this.origin != null)\n\t{\n\t\tclone.origin = this.origin.clone();\n\t}\n\n\tif (this.absoluteOffset != null)\n\t{\n\t\tclone.absoluteOffset = this.absoluteOffset.clone();\n\t}\n\n\tif (this.boundingBox != null)\n\t{\n\t\tclone.boundingBox = this.boundingBox.clone();\n\t}\n\n\tclone.terminalDistance = this.terminalDistance;\n\tclone.segments = this.segments;\n\tclone.length = this.length;\n\tclone.x = this.x;\n\tclone.y = this.y;\n\tclone.width = this.width;\n\tclone.height = this.height;\n\tclone.unscaledWidth = this.unscaledWidth;\n\t\n\treturn clone;\n};\n\n/**\n * Destructor: destroy\n * \n * Destroys the state and all associated resources.\n */\nmxCellState.prototype.destroy = function()\n{\n\tthis.view.graph.cellRenderer.destroy(this);\n};\n\n__mxOutput.mxCellState = typeof mxCellState !== 'undefined' ? mxCellState : undefined;\n"]}