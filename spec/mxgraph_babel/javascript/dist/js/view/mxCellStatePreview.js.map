{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/view/mxCellStatePreview.js"],"names":["mxCellStatePreview","graph","deltas","mxDictionary","prototype","count","isEmpty","moveState","state","dx","dy","add","includeEdges","delta","get","cell","point","mxPoint","put","x","y","addEdges","show","visitor","visit","mxUtils","bind","key","translateState","revalidateState","model","getModel","isVertex","view","updateCellState","geo","getGeometry","relative","childCount","getChildCount","i","getState","getChildAt","isEdge","getCellGeometry","pState","getParent","cellRenderer","redraw","edgeCount","getEdgeCount","s","getEdgeAt","__mxOutput","undefined"],"mappings":"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","file":"mxCellStatePreview.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxCellStatePreview\n * \n * Implements a live preview for moving cells.\n * \n * Constructor: mxCellStatePreview\n * \n * Constructs a move preview for the given graph.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxCellStatePreview(graph)\n{\n\tthis.deltas = new mxDictionary();\n\tthis.graph = graph;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellStatePreview.prototype.graph = null;\n\n/**\n * Variable: deltas\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellStatePreview.prototype.deltas = null;\n\n/**\n * Variable: count\n * \n * Contains the number of entries in the map.\n */\nmxCellStatePreview.prototype.count = 0;\n\n/**\n * Function: isEmpty\n * \n * Returns true if this contains no entries.\n */\nmxCellStatePreview.prototype.isEmpty = function()\n{\n\treturn this.count == 0;\n};\n\n/**\n * Function: moveState\n */\nmxCellStatePreview.prototype.moveState = function(state, dx, dy, add, includeEdges)\n{\n\tadd = (add != null) ? add : true;\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tvar delta = this.deltas.get(state.cell);\n\n\tif (delta == null)\n\t{\n\t\t// Note: Deltas stores the point and the state since the key is a string.\n\t\tdelta = {point: new mxPoint(dx, dy), state: state};\n\t\tthis.deltas.put(state.cell, delta);\n\t\tthis.count++;\n\t}\n\telse if (add)\n\t{\n\t\tdelta.point.x += dx;\n\t\tdelta.point.y += dy;\n\t}\n\telse\n\t{\n\t\tdelta.point.x = dx;\n\t\tdelta.point.y = dy;\n\t}\n\t\n\tif (includeEdges)\n\t{\n\t\tthis.addEdges(state);\n\t}\n\t\n\treturn delta.point;\n};\n\n/**\n * Function: show\n */\nmxCellStatePreview.prototype.show = function(visitor)\n{\n\tthis.deltas.visit(mxUtils.bind(this, function(key, delta)\n\t{\n\t\tthis.translateState(delta.state, delta.point.x, delta.point.y);\n\t}));\n\t\n\tthis.deltas.visit(mxUtils.bind(this, function(key, delta)\n\t{\n\t\tthis.revalidateState(delta.state, delta.point.x, delta.point.y, visitor);\n\t}));\n};\n\n/**\n * Function: translateState\n */\nmxCellStatePreview.prototype.translateState = function(state, dx, dy)\n{\n\tif (state != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tif (model.isVertex(state.cell))\n\t\t{\n\t\t\tstate.view.updateCellState(state);\n\t\t\tvar geo = model.getGeometry(state.cell);\n\t\t\t\n\t\t\t// Moves selection cells and non-relative vertices in\n\t\t\t// the first phase so that edge terminal points will\n\t\t\t// be updated in the second phase\n\t\t\tif ((dx != 0 || dy != 0) && geo != null && (!geo.relative || this.deltas.get(state.cell) != null))\n\t\t\t{\n\t\t\t\tstate.x += dx;\n\t\t\t\tstate.y += dy;\n\t\t\t}\n\t\t}\n\t    \n\t    var childCount = model.getChildCount(state.cell);\n\t    \n\t    for (var i = 0; i < childCount; i++)\n\t    {\n\t    \tthis.translateState(state.view.getState(model.getChildAt(state.cell, i)), dx, dy);\n\t    }\n\t}\n};\n\n/**\n * Function: revalidateState\n */\nmxCellStatePreview.prototype.revalidateState = function(state, dx, dy, visitor)\n{\n\tif (state != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\t// Updates the edge terminal points and restores the\n\t\t// (relative) positions of any (relative) children\n\t\tif (model.isEdge(state.cell))\n\t\t{\n\t\t\tstate.view.updateCellState(state);\n\t\t}\n\n\t\tvar geo = this.graph.getCellGeometry(state.cell);\n\t\tvar pState = state.view.getState(model.getParent(state.cell));\n\t\t\n\t\t// Moves selection vertices which are relative\n\t\tif ((dx != 0 || dy != 0) && geo != null && geo.relative &&\n\t\t\tmodel.isVertex(state.cell) && (pState == null ||\n\t\t\tmodel.isVertex(pState.cell) || this.deltas.get(state.cell) != null))\n\t\t{\n\t\t\tstate.x += dx;\n\t\t\tstate.y += dy;\n\t\t}\n\t\t\n\t\tthis.graph.cellRenderer.redraw(state);\n\t\n\t\t// Invokes the visitor on the given state\n\t\tif (visitor != null)\n\t\t{\n\t\t\tvisitor(state);\n\t\t}\n\t\t\t\t\t\t\n\t    var childCount = model.getChildCount(state.cell);\n\t    \n\t    for (var i = 0; i < childCount; i++)\n\t    {\n\t    \tthis.revalidateState(this.graph.view.getState(model.getChildAt(state.cell, i)), dx, dy, visitor);\n\t    }\n\t}\n};\n\n/**\n * Function: addEdges\n */\nmxCellStatePreview.prototype.addEdges = function(state)\n{\n\tvar model = this.graph.getModel();\n\tvar edgeCount = model.getEdgeCount(state.cell);\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar s = state.view.getState(model.getEdgeAt(state.cell, i));\n\n\t\tif (s != null)\n\t\t{\n\t\t\tthis.moveState(s, 0, 0);\n\t\t}\n\t}\n};\n\n__mxOutput.mxCellStatePreview = typeof mxCellStatePreview !== 'undefined' ? mxCellStatePreview : undefined;\n"]}