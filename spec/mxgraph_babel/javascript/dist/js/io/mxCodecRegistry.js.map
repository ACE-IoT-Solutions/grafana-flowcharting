{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/io/mxCodecRegistry.js"],"names":["mxCodecRegistry","codecs","aliases","register","codec","name","getName","classname","mxUtils","getFunctionName","template","constructor","addAlias","codecname","getCodec","ctor","tmp","mxObjectCodec","e","__mxOutput","undefined"],"mappings":";;;;;;;;;AAIIA,kB,GACJ;AACC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCAC,YAAQ,EAvCT;;AAyCC;;;;;AAKAC,aAAS,EA9CV;;AAgDC;;;;;;;;;;AAUAC,cAAU,kBAASC,KAAT,EACV;AACC,SAAIA,SAAS,IAAb,EACA;AACC,UAAIC,OAAOD,MAAME,OAAN,EAAX;AACAN,sBAAgBC,MAAhB,CAAuBI,IAAvB,IAA+BD,KAA/B;;AAEA,UAAIG,YAAYC,QAAQC,eAAR,CAAwBL,MAAMM,QAAN,CAAeC,WAAvC,CAAhB;;AAEA,UAAIJ,aAAaF,IAAjB,EACA;AACCL,uBAAgBY,QAAhB,CAAyBL,SAAzB,EAAoCF,IAApC;AACA;AACD;;AAED,YAAOD,KAAP;AACA,KA1EF;;AA4EC;;;;;AAKAQ,cAAU,kBAASL,SAAT,EAAoBM,SAApB,EACV;AACCb,qBAAgBE,OAAhB,CAAwBK,SAAxB,IAAqCM,SAArC;AACA,KApFF;;AAsFC;;;;;;;;;;AAUAC,cAAU,kBAASC,IAAT,EACV;AACC,SAAIX,QAAQ,IAAZ;;AAEA,SAAIW,QAAQ,IAAZ,EACA;AACC,UAAIV,OAAOG,QAAQC,eAAR,CAAwBM,IAAxB,CAAX;AACA,UAAIC,MAAMhB,gBAAgBE,OAAhB,CAAwBG,IAAxB,CAAV;;AAEA,UAAIW,OAAO,IAAX,EACA;AACCX,cAAOW,GAAP;AACA;;AAEDZ,cAAQJ,gBAAgBC,MAAhB,CAAuBI,IAAvB,CAAR;;AAEA;AACA;AACA,UAAID,SAAS,IAAb,EACA;AACC,WACA;AACCA,gBAAQ,IAAIa,aAAJ,CAAkB,IAAIF,IAAJ,EAAlB,CAAR;AACAf,wBAAgBG,QAAhB,CAAyBC,KAAzB;AACA,QAJD,CAKA,OAAOc,CAAP,EACA;AACC;AACA;AACD;AACD;;AAED,YAAOd,KAAP;AACA;;AAjIF,I;;;AAqIAe,cAAWnB,eAAX,GAA6B,OAAOA,eAAP,KAA2B,WAA3B,GAAyCA,eAAzC,GAA2DoB,SAAxF","file":"mxCodecRegistry.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxCodecRegistry =\n{\n\t/**\n\t * Class: mxCodecRegistry\n\t *\n\t * Singleton class that acts as a global registry for codecs.\n\t *\n\t * Adding an <mxCodec>:\n\t *\n\t * 1. Define a default codec with a new instance of the \n\t * object to be handled.\n\t *\n\t * (code)\n\t * var codec = new mxObjectCodec(new mxGraphModel());\n\t * (end)\n\t *\n\t * 2. Define the functions required for encoding and decoding\n\t * objects.\n\t *\n\t * (code)\n\t * codec.encode = function(enc, obj) { ... }\n\t * codec.decode = function(dec, node, into) { ... }\n\t * (end)\n\t *\n\t * 3. Register the codec in the <mxCodecRegistry>.\n\t *\n\t * (code)\n\t * mxCodecRegistry.register(codec);\n\t * (end)\n\t *\n\t * <mxObjectCodec.decode> may be used to either create a new \n\t * instance of an object or to configure an existing instance, \n\t * in which case the into argument points to the existing\n\t * object. In this case, we say the codec \"configures\" the\n\t * object.\n\t * \n\t * Variable: codecs\n\t *\n\t * Maps from constructor names to codecs.\n\t */\n\tcodecs: [],\n\t\n\t/**\n\t * Variable: aliases\n\t *\n\t * Maps from classnames to codecnames.\n\t */\n\taliases: [],\n\n\t/**\n\t * Function: register\n\t *\n\t * Registers a new codec and associates the name of the template\n\t * constructor in the codec with the codec object.\n\t *\n\t * Parameters:\n\t *\n\t * codec - <mxObjectCodec> to be registered.\n\t */\n\tregister: function(codec)\n\t{\n\t\tif (codec != null)\n\t\t{\n\t\t\tvar name = codec.getName();\n\t\t\tmxCodecRegistry.codecs[name] = codec;\n\t\t\t\n\t\t\tvar classname = mxUtils.getFunctionName(codec.template.constructor);\n\n\t\t\tif (classname != name)\n\t\t\t{\n\t\t\t\tmxCodecRegistry.addAlias(classname, name);\n\t\t\t}\n\t\t}\n\n\t\treturn codec;\n\t},\n\n\t/**\n\t * Function: addAlias\n\t *\n\t * Adds an alias for mapping a classname to a codecname.\n\t */\n\taddAlias: function(classname, codecname)\n\t{\n\t\tmxCodecRegistry.aliases[classname] = codecname;\n\t},\n\n\t/**\n\t * Function: getCodec\n\t *\n\t * Returns a codec that handles objects that are constructed\n\t * using the given constructor.\n\t *\n\t * Parameters:\n\t *\n\t * ctor - JavaScript constructor function. \n\t */\n\tgetCodec: function(ctor)\n\t{\n\t\tvar codec = null;\n\t\t\n\t\tif (ctor != null)\n\t\t{\n\t\t\tvar name = mxUtils.getFunctionName(ctor);\n\t\t\tvar tmp = mxCodecRegistry.aliases[name];\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tname = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tcodec = mxCodecRegistry.codecs[name];\n\t\t\t\n\t\t\t// Registers a new default codec for the given constructor\n\t\t\t// if no codec has been previously defined.\n\t\t\tif (codec == null)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tcodec = new mxObjectCodec(new ctor());\n\t\t\t\t\tmxCodecRegistry.register(codec);\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn codec;\n\t}\n\n};\n\n__mxOutput.mxCodecRegistry = typeof mxCodecRegistry !== 'undefined' ? mxCodecRegistry : undefined;\n"]}