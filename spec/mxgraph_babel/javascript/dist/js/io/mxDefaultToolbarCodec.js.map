{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/io/mxDefaultToolbarCodec.js"],"names":["mxDefaultToolbarCodec","mxCodecRegistry","register","codec","mxObjectCodec","mxDefaultToolbar","encode","enc","obj","decode","dec","node","into","editor","firstChild","nodeType","mxConstants","NODETYPE_ELEMENT","processInclude","nodeName","addSeparator","toolbar","addBreak","addLine","as","getAttribute","mxResources","get","icon","pressedIcon","action","mode","template","toggle","text","mxUtils","getTextContent","elt","addItem","funct","allowEval","eval","addMode","length","cell","templates","style","graph","cloneCell","setStyle","insertFunction","addPrototype","children","getChildNodes","combo","addActionCombo","i","child","addOption","lab","act","addActionOption","select","create","value","clone","options","selectedIndex","cellStyle","mxLog","warn","img","addCombo","mxEvent","addListener","selectMode","evt","pt","convertPoint","container","getClientX","getClientY","addVertex","x","y","noReset","tmp","option","id","setAttribute","nextSibling","__mxOutput","undefined"],"mappings":"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","file":"mxDefaultToolbarCodec.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultToolbarCodec\n *\n * Custom codec for configuring <mxDefaultToolbar>s. This class is created\n * and registered dynamically at load time and used implicitely via\n * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n * data for existing toolbars handlers, it does not encode or create toolbars.\n */\nvar mxDefaultToolbarCodec = mxCodecRegistry.register(function()\n{\n\tvar codec = new mxObjectCodec(new mxDefaultToolbar());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Adds a new item to the toolbar. See below for attributes.\n\t * separator - Adds a vertical separator. No attributes.\n\t * hr - Adds a horizontal separator. No attributes.\n\t * br - Adds a linefeed. No attributes. \n\t *\n\t * Attributes:\n\t *\n\t * as - Resource key for the label.\n\t * action - Name of the action to execute in enclosing editor.\n\t * mode - Modename (see below).\n\t * template - Template name for cell insertion.\n\t * style - Optional style to override the template style.\n\t * icon - Icon (relative/absolute URL).\n\t * pressedIcon - Optional icon for pressed state (relative/absolute URL).\n\t * id - Optional ID to be used for the created DOM element.\n\t * toggle - Optional 0 or 1 to disable toggling of the element. Default is\n\t * 1 (true).\n\t *\n\t * The action, mode and template attributes are mutually exclusive. The\n\t * style can only be used with the template attribute. The add node may\n\t * contain another sequence of add nodes with as and action attributes\n\t * to create a combo box in the toolbar. If the icon is specified then\n\t * a list of the child node is expected to have its template attribute\n\t * set and the action is ignored instead.\n\t * \n\t * Nodes with a specified template may define a function to be used for\n\t * inserting the cloned template into the graph. Here is an example of such\n\t * a node:\n\t * \n\t * (code)\n\t * <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"><![CDATA[\n\t *   function (editor, cell, evt, targetCell)\n\t *   {\n\t *     var pt = mxUtils.convertPoint(\n\t *       editor.graph.container, mxEvent.getClientX(evt),\n\t *         mxEvent.getClientY(evt));\n\t *     return editor.addVertex(targetCell, cell, pt.x, pt.y);\n\t *   }\n\t * ]]></add>\n\t * (end)\n\t * \n\t * In the above function, editor is the enclosing <mxEditor> instance, cell\n\t * is the clone of the template, evt is the mouse event that represents the\n\t * drop and targetCell is the cell under the mousepointer where the drop\n\t * occurred. The targetCell is retrieved using <mxGraph.getCellAt>.\n\t *\n\t * Futhermore, nodes with the mode attribute may define a function to\n\t * be executed upon selection of the respective toolbar icon. In the\n\t * example below, the default edge style is set when this specific\n\t * connect-mode is activated:\n\t *\n\t * (code)\n\t * <add as=\"connect\" mode=\"connect\"><![CDATA[\n\t *   function (editor)\n\t *   {\n\t *     if (editor.defaultEdge != null)\n\t *     {\n\t *       editor.defaultEdge.style = 'straightEdge';\n\t *     }\n\t *   }\n\t * ]]></add>\n\t * (end)\n\t * \n\t * Both functions require <mxDefaultToolbarCodec.allowEval> to be set to true.\n\t *\n\t * Modes:\n\t *\n\t * select - Left mouse button used for rubberband- & cell-selection.\n\t * connect - Allows connecting vertices by inserting new edges.\n\t * pan - Disables selection and switches to panning on the left button.\n\t *\n\t * Example:\n\t *\n\t * To add items to the toolbar:\n\t * \n\t * (code)\n\t * <mxDefaultToolbar as=\"toolbar\">\n\t *   <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n\t *   <br/><hr/>\n\t *   <add as=\"select\" mode=\"select\" icon=\"images/select.gif\"/>\n\t *   <add as=\"connect\" mode=\"connect\" icon=\"images/connect.gif\"/>\n\t * </mxDefaultToolbar>\n\t * (end)\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tif (into != null)\n\t\t{\n\t\t\tvar editor = into.editor;\n\t\t\tnode = node.firstChild;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\tif (!this.processInclude(dec, node, into))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (node.nodeName == 'separator')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.addSeparator();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'br')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.toolbar.addBreak();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'hr')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.toolbar.addLine();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'add')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\t\t\tas = mxResources.get(as) || as;\n\t\t\t\t\t\t\tvar icon = node.getAttribute('icon');\n\t\t\t\t\t\t\tvar pressedIcon = node.getAttribute('pressedIcon');\n\t\t\t\t\t\t\tvar action = node.getAttribute('action');\n\t\t\t\t\t\t\tvar mode = node.getAttribute('mode');\n\t\t\t\t\t\t\tvar template = node.getAttribute('template');\n\t\t\t\t\t\t\tvar toggle = node.getAttribute('toggle') != '0';\n\t\t\t\t\t\t\tvar text = mxUtils.getTextContent(node);\n\t\t\t\t\t\t\tvar elt = null;\n\n\t\t\t\t\t\t\tif (action != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telt = into.addItem(as, icon, action, pressedIcon);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (mode != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar funct = (mxDefaultToolbarCodec.allowEval) ? mxUtils.eval(text) : null;\n\t\t\t\t\t\t\t\telt = into.addMode(as, icon, mode, pressedIcon, funct);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (template != null || (text != null && text.length > 0))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar cell = editor.templates[template];\n\t\t\t\t\t\t\t\tvar style = node.getAttribute('style');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (cell != null && style != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcell = editor.graph.cloneCell(cell);\n\t\t\t\t\t\t\t\t\tcell.setStyle(style);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar insertFunction = null;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (text != null && text.length > 0 && mxDefaultToolbarCodec.allowEval)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tinsertFunction = mxUtils.eval(text);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\telt = into.addPrototype(as, icon, cell, pressedIcon, insertFunction, toggle);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar children = mxUtils.getChildNodes(node);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (children.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (icon == null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar combo = into.addActionCombo(as);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (var i=0; i<children.length; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (child.nodeName == 'separator')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addOption(combo, '---');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if (child.nodeName == 'add')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar lab = child.getAttribute('as');\n\t\t\t\t\t\t\t\t\t\t\t\tvar act = child.getAttribute('action');\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addActionOption(combo, lab, act);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar select = null;\n\t\t\t\t\t\t\t\t\t\tvar create = function()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar template = editor.templates[select.value];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (template != null)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar clone = template.clone();\n\t\t\t\t\t\t\t\t\t\t\t\tvar style = select.options[select.selectedIndex].cellStyle;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tif (style != null)\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tclone.setStyle(style);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn clone;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tmxLog.warn('Template '+template+' not found');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tvar img = into.addPrototype(as, icon, create, null, null, toggle);\n\t\t\t\t\t\t\t\t\t\tselect = into.addCombo();\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// Selects the toolbar icon if a selection change\n\t\t\t\t\t\t\t\t\t\t// is made in the corresponding combobox.\n\t\t\t\t\t\t\t\t\t\tmxEvent.addListener(select, 'change', function()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tinto.toolbar.selectMode(img, function(evt)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar pt = mxUtils.convertPoint(editor.graph.container,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn editor.addVertex(null, funct(), pt.x, pt.y);\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tinto.toolbar.noReset = false;\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// Adds the entries to the combobox\n\t\t\t\t\t\t\t\t\t\tfor (var i=0; i<children.length; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (child.nodeName == 'separator')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addOption(select, '---');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if (child.nodeName == 'add')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar lab = child.getAttribute('as');\n\t\t\t\t\t\t\t\t\t\t\t\tvar tmp = child.getAttribute('template');\n\t\t\t\t\t\t\t\t\t\t\t\tvar option = into.addOption(select, lab, tmp || template);\n\t\t\t\t\t\t\t\t\t\t\t\toption.cellStyle = child.getAttribute('style');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Assigns an ID to the created element to access it later.\n\t\t\t\t\t\t\tif (elt != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar id = node.getAttribute('id');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (id != null && id.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\telt.setAttribute('id', id);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n/**\n * Variable: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content. Default is true. Set this to false if stylesheets\n * may contain user input\n */\nmxDefaultToolbarCodec.allowEval = true;\n\n__mxOutput.mxDefaultToolbarCodec = typeof mxDefaultToolbarCodec !== 'undefined' ? mxDefaultToolbarCodec : undefined;\n"]}