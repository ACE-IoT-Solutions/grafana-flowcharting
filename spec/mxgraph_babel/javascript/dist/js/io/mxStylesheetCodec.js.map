{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/io/mxStylesheetCodec.js"],"names":["mxStylesheetCodec","mxCodecRegistry","register","codec","mxObjectCodec","mxStylesheet","encode","enc","obj","node","document","createElement","getName","i","styles","style","styleNode","setAttribute","j","value","getStringValue","entry","appendChild","childNodes","length","key","type","mxStyleRegistry","decode","dec","into","template","constructor","id","getAttribute","objects","firstChild","processInclude","nodeName","as","extend","mxUtils","clone","mxLog","warn","Object","nodeType","mxConstants","NODETYPE_ELEMENT","text","getTextContent","allowEval","eval","isNumeric","parseFloat","nextSibling","putCellStyle","__mxOutput","undefined"],"mappings":"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","file":"mxStylesheetCodec.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStylesheetCodec\n *\n * Codec for <mxStylesheet>s. This class is created and registered\n * dynamically at load time and used implicitely via <mxCodec>\n * and the <mxCodecRegistry>.\n */\nvar mxStylesheetCodec = mxCodecRegistry.register(function()\n{\n\tvar codec = new mxObjectCodec(new mxStylesheet());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Encodes a stylesheet. See <decode> for a description of the\n\t * format.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\tvar node = enc.document.createElement(this.getName());\n\t\t\n\t\tfor (var i in obj.styles)\n\t\t{\n\t\t\tvar style = obj.styles[i];\n\t\t\tvar styleNode = enc.document.createElement('add');\n\t\t\t\n\t\t\tif (i != null)\n\t\t\t{\n\t\t\t\tstyleNode.setAttribute('as', i);\n\t\t\t\t\n\t\t\t\tfor (var j in style)\n\t\t\t\t{\n\t\t\t\t\tvar value = this.getStringValue(j, style[j]);\n\t\t\t\t\t\n\t\t\t\t\tif (value != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar entry = enc.document.createElement('add');\n\t\t\t\t\t\tentry.setAttribute('value', value);\n\t\t\t\t\t\tentry.setAttribute('as', j);\n\t\t\t\t\t\tstyleNode.appendChild(entry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (styleNode.childNodes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tnode.appendChild(styleNode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t    return node;\n\t};\n\n\t/**\n\t * Function: getStringValue\n\t *\n\t * Returns the string for encoding the given value.\n\t */\n\tcodec.getStringValue = function(key, value)\n\t{\n\t\tvar type = typeof(value);\n\t\t\n\t\tif (type == 'function')\n\t\t{\n\t\t\tvalue = mxStyleRegistry.getName(style[j]);\n\t\t}\n\t\telse if (type == 'object')\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\treturn value;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Adds a new style.\n\t *\n\t * Attributes:\n\t *\n\t * as - Name of the style.\n\t * extend - Name of the style to inherit from.\n\t *\n\t * Each node contains another sequence of add and remove nodes with the following\n\t * attributes:\n\t *\n\t * as - Name of the style (see <mxConstants>).\n\t * value - Value for the style.\n\t *\n\t * Instead of the value-attribute, one can put Javascript expressions into\n\t * the node as follows if <mxStylesheetCodec.allowEval> is true:\n\t * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n\t *\n\t * A remove node will remove the entry with the name given in the as-attribute\n\t * from the style.\n\t * \n\t * Example:\n\t *\n\t * (code)\n\t * <mxStylesheet as=\"stylesheet\">\n\t *   <add as=\"text\">\n\t *     <add as=\"fontSize\" value=\"12\"/>\n\t *   </add>\n\t *   <add as=\"defaultVertex\" extend=\"text\">\n\t *     <add as=\"shape\" value=\"rectangle\"/>\n\t *   </add>\n\t * </mxStylesheet>\n\t * (end)\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tvar obj = into || new this.template.constructor();\n\t\tvar id = node.getAttribute('id');\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tdec.objects[id] = obj;\n\t\t}\n\t\t\n\t\tnode = node.firstChild;\n\t\t\n\t\twhile (node != null)\n\t\t{\n\t\t\tif (!this.processInclude(dec, node, obj) && node.nodeName == 'add')\n\t\t\t{\n\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\n\t\t\t\tif (as != null)\n\t\t\t\t{\n\t\t\t\t\tvar extend = node.getAttribute('extend');\n\t\t\t\t\tvar style = (extend != null) ? mxUtils.clone(obj.styles[extend]) : null;\n\t\t\t\t\t\n\t\t\t\t\tif (style == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (extend != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxLog.warn('mxStylesheetCodec.decode: stylesheet ' +\n\t\t\t\t\t\t\t\textend + ' not found to extend');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tstyle = new Object();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar entry = node.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (entry != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (entry.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t \tvar key = entry.getAttribute('as');\n\t\t\t\t\t\t \t\n\t\t\t\t\t\t \tif (entry.nodeName == 'add')\n\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \tvar text = mxUtils.getTextContent(entry);\n\t\t\t\t\t\t\t \tvar value = null;\n\t\t\t\t\t\t\t \t\n\t\t\t\t\t\t\t \tif (text != null && text.length > 0 && mxStylesheetCodec.allowEval)\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tvalue = mxUtils.eval(text);\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t\t \telse\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tvalue = entry.getAttribute('value');\n\t\t\t\t\t\t\t \t\t\n\t\t\t\t\t\t\t \t\tif (mxUtils.isNumeric(value))\n\t\t\t\t\t\t\t \t\t{\n\t\t\t\t\t\t\t\t\t\tvalue = parseFloat(value);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t \t}\n\n\t\t\t\t\t\t\t \tif (value != null)\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tstyle[key] = value;\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \telse if (entry.nodeName == 'remove')\n\t\t\t\t\t\t \t{\n\t\t\t\t\t\t \t\tdelete style[key];\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tentry = entry.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tobj.putCellStyle(as, style);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.nextSibling;\n\t\t}\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n/**\n * Variable: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content. Default is true. Set this to false if stylesheets\n * may contain user input.\n */\nmxStylesheetCodec.allowEval = true;\n\n__mxOutput.mxStylesheetCodec = typeof mxStylesheetCodec !== 'undefined' ? mxStylesheetCodec : undefined;\n"]}