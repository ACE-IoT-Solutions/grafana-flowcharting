{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/io/mxGraphViewCodec.js"],"names":["mxCodecRegistry","register","codec","mxObjectCodec","mxGraphView","encode","enc","view","encodeCell","graph","getModel","getRoot","cell","model","state","getState","parent","getParent","childCount","getChildCount","geo","getCellGeometry","name","isEdge","isVertex","node","document","createElement","lab","getLabel","setAttribute","isHtmlLabel","bounds","getGraphBounds","Math","round","x","y","width","height","scale","i","style","value","mxStyleRegistry","getName","abs","absolutePoints","length","pts","offset","absoluteOffset","childNode","getChildAt","appendChild","__mxOutput","mxGraphViewCodec","undefined"],"mappings":"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","file":"mxGraphViewCodec.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxGraphViewCodec\n\t *\n\t * Custom encoder for <mxGraphView>s. This class is created\n\t * and registered dynamically at load time and used implicitely via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only writes views\n\t * into a XML format that can be used to create an image for\n\t * the graph, that is, it contains absolute coordinates with\n\t * computed perimeters, edge styles and cell styles.\n\t */\n\tvar codec = new mxObjectCodec(new mxGraphView());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Encodes the given <mxGraphView> using <encodeCell>\n\t * starting at the model's root. This returns the\n\t * top-level graph node of the recursive encoding.\n\t */\n\tcodec.encode = function(enc, view)\n\t{\n\t\treturn this.encodeCell(enc, view,\n\t\t\tview.graph.getModel().getRoot());\n\t};\n\n\t/**\n\t * Function: encodeCell\n\t *\n\t * Recursively encodes the specifed cell. Uses layer\n\t * as the default nodename. If the cell's parent is\n\t * null, then graph is used for the nodename. If\n\t * <mxGraphModel.isEdge> returns true for the cell,\n\t * then edge is used for the nodename, else if\n\t * <mxGraphModel.isVertex> returns true for the cell,\n\t * then vertex is used for the nodename.\n\t *\n\t * <mxGraph.getLabel> is used to create the label\n\t * attribute for the cell. For graph nodes and vertices\n\t * the bounds are encoded into x, y, width and height.\n\t * For edges the points are encoded into a points\n\t * attribute as a space-separated list of comma-separated\n\t * coordinate pairs (eg. x0,y0 x1,y1 ... xn,yn). All\n\t * values from the cell style are added as attribute\n\t * values to the node. \n\t */\n\tcodec.encodeCell = function(enc, view, cell)\n\t{\n\t\tvar model = view.graph.getModel();\n\t\tvar state = view.getState(cell);\n\t\tvar parent = model.getParent(cell);\n\t\t\n\t\tif (parent == null || state != null)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\tvar geo = view.graph.getCellGeometry(cell);\n\t\t\tvar name = null;\n\t\t\t\n\t\t\tif (parent == model.getRoot())\n\t\t\t{\n\t\t\t\tname = 'layer';\n\t\t\t}\n\t\t\telse if (parent == null)\n\t\t\t{\n\t\t\t\tname = 'graph';\n\t\t\t}\n\t\t\telse if (model.isEdge(cell))\n\t\t\t{\n\t\t\t\tname = 'edge';\n\t\t\t}\n\t\t\telse if (childCount > 0 && geo != null)\n\t\t\t{\n\t\t\t\tname = 'group';\n\t\t\t}\n\t\t\telse if (model.isVertex(cell))\n\t\t\t{\n\t\t\t\tname = 'vertex';\n\t\t\t}\n\t\t\t\n\t\t\tif (name != null)\n\t\t\t{\n\t\t\t\tvar node = enc.document.createElement(name);\n\t\t\t\tvar lab = view.graph.getLabel(cell);\n\t\t\t\t\n\t\t\t\tif (lab != null)\n\t\t\t\t{\n\t\t\t\t\tnode.setAttribute('label', view.graph.getLabel(cell));\n\t\t\t\t\t\n\t\t\t\t\tif (view.graph.isHtmlLabel(cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('html', true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tif (parent == null)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = view.getGraphBounds();\n\t\t\t\t\t\n\t\t\t\t\tif (bounds != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('x', Math.round(bounds.x));\n\t\t\t\t\t\tnode.setAttribute('y', Math.round(bounds.y));\n\t\t\t\t\t\tnode.setAttribute('width', Math.round(bounds.width));\n\t\t\t\t\t\tnode.setAttribute('height', Math.round(bounds.height));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tnode.setAttribute('scale', view.scale);\n\t\t\t\t}\n\t\t\t\telse if (state != null && geo != null)\n\t\t\t\t{\n\t\t\t\t\t// Writes each key, value in the style pair to an attribute\n\t\t\t\t    for (var i in state.style)\n\t\t\t\t    {\n\t\t\t\t    \tvar value = state.style[i];\n\t\t\n\t\t\t\t    \t// Tries to turn objects and functions into strings\n\t\t\t\t\t    if (typeof(value) == 'function' &&\n\t\t\t\t\t\t\ttypeof(value) == 'object')\n\t\t\t\t\t\t{\n\t\t\t\t\t    \tvalue = mxStyleRegistry.getName(value);\n\t\t\t\t        }\n\t\t\t\t    \t\n\t\t\t\t    \tif (value != null &&\n\t\t\t\t    \t\ttypeof(value) != 'function' &&\n\t\t\t\t\t\t\ttypeof(value) != 'object')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute(i, value);\n\t\t\t\t        }\n\t\t\t\t    }\n\t\t\t\t    \n\t\t\t\t\tvar abs = state.absolutePoints;\n\t\t\t\t\t\n\t\t\t\t\t// Writes the list of points into one attribute\n\t\t\t\t\tif (abs != null && abs.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pts = Math.round(abs[0].x) + ',' + Math.round(abs[0].y);\n\t\t\n\t\t\t\t\t\tfor (var i=1; i<abs.length; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpts += ' ' + Math.round(abs[i].x) + ',' +\n\t\t\t\t\t\t\t\tMath.round(abs[i].y);\n\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\tnode.setAttribute('points', pts);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Writes the bounds into 4 attributes\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('x', Math.round(state.x));\n\t\t\t\t\t\tnode.setAttribute('y', Math.round(state.y));\n\t\t\t\t\t\tnode.setAttribute('width', Math.round(state.width));\n\t\t\t\t\t\tnode.setAttribute('height', Math.round(state.height));\t\t\t\t\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tvar offset = state.absoluteOffset;\n\t\t\t\t\t\n\t\t\t\t\t// Writes the offset into 2 attributes\n\t\t\t\t\tif (offset != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (offset.x != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute('dx', Math.round(offset.x));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (offset.y != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute('dy', Math.round(offset.y));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tfor (var i=0; i<childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tvar childNode = this.encodeCell(enc,\n\t\t\t\t\t\t\tview, model.getChildAt(cell, i));\n\t\t\t\t\t\n\t\t\t\t\tif (childNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.appendChild(childNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxGraphViewCodec = typeof mxGraphViewCodec !== 'undefined' ? mxGraphViewCodec : undefined;\n"]}