{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/io/mxRootChangeCodec.js"],"names":["mxCodecRegistry","register","codec","mxObjectCodec","mxRootChange","afterEncode","enc","obj","node","encodeCell","root","beforeDecode","dec","firstChild","nodeType","mxConstants","NODETYPE_ELEMENT","cloneNode","tmp","decodeCell","tmp2","nextSibling","parentNode","removeChild","afterDecode","previous","__mxOutput","mxRootChangeCodec","undefined"],"mappings":";;;;;;;;AAAA;;;;AAIAA,mBAAgBC,QAAhB,CAAyB,YACzB;AACC;;;;;;;;;;;;;AAaA,QAAIC,QAAQ,IAAIC,aAAJ,CAAkB,IAAIC,YAAJ,EAAlB,EACX,CAAC,OAAD,EAAU,UAAV,EAAsB,MAAtB,CADW,CAAZ;;AAGA;;;;;AAKAF,UAAMG,WAAN,GAAoB,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EACpB;AACCF,SAAIG,UAAJ,CAAeF,IAAIG,IAAnB,EAAyBF,IAAzB;;AAEA,YAAOA,IAAP;AACA,KALD;;AAOA;;;;;;AAMAN,UAAMS,YAAN,GAAqB,UAASC,GAAT,EAAcJ,IAAd,EAAoBD,GAApB,EACrB;AACC,SAAIC,KAAKK,UAAL,IAAmB,IAAnB,IACHL,KAAKK,UAAL,CAAgBC,QAAhB,IAA4BC,YAAYC,gBADzC,EAEA;AACC;AACAR,aAAOA,KAAKS,SAAL,CAAe,IAAf,CAAP;;AAEA,UAAIC,MAAMV,KAAKK,UAAf;AACAN,UAAIG,IAAJ,GAAWE,IAAIO,UAAJ,CAAeD,GAAf,EAAoB,KAApB,CAAX;;AAEA,UAAIE,OAAOF,IAAIG,WAAf;AACAH,UAAII,UAAJ,CAAeC,WAAf,CAA2BL,GAA3B;AACAA,YAAME,IAAN;;AAEA,aAAOF,OAAO,IAAd,EACA;AACCE,cAAOF,IAAIG,WAAX;AACAT,WAAIO,UAAJ,CAAeD,GAAf;AACAA,WAAII,UAAJ,CAAeC,WAAf,CAA2BL,GAA3B;AACAA,aAAME,IAAN;AACA;AACD;;AAED,YAAOZ,IAAP;AACA,KAzBD;;AA2BA;;;;;AAKAN,UAAMsB,WAAN,GAAoB,UAASZ,GAAT,EAAcJ,IAAd,EAAoBD,GAApB,EACpB;AACCA,SAAIkB,QAAJ,GAAelB,IAAIG,IAAnB;;AAEA,YAAOH,GAAP;AACA,KALD;;AAOA;AACA,WAAOL,KAAP;AAEA,IA9EwB,EAAzB;;AAgFAwB,cAAWC,iBAAX,GAA+B,OAAOA,iBAAP,KAA6B,WAA7B,GAA2CA,iBAA3C,GAA+DC,SAA9F","file":"mxRootChangeCodec.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxRootChangeCodec\n\t *\n\t * Codec for <mxRootChange>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t * - root\n\t */\n\tvar codec = new mxObjectCodec(new mxRootChange(),\n\t\t['model', 'previous', 'root']);\n\n\t/**\n\t * Function: onEncode\n\t *\n\t * Encodes the child recursively.\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tenc.encodeCell(obj.root, node);\n\t\t\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the optional children as cells\n\t * using the respective decoder.\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tif (node.firstChild != null &&\n\t\t\tnode.firstChild.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Makes sure the original node isn't modified\n\t\t\tnode = node.cloneNode(true);\n\t\t\t\n\t\t\tvar tmp = node.firstChild;\n\t\t\tobj.root = dec.decodeCell(tmp, false);\n\n\t\t\tvar tmp2 = tmp.nextSibling;\n\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\ttmp = tmp2;\n\t\t\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\ttmp2 = tmp.nextSibling;\n\t\t\t\tdec.decodeCell(tmp);\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\ttmp = tmp2;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\t\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\tobj.previous = obj.root;\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxRootChangeCodec = typeof mxRootChangeCodec !== 'undefined' ? mxRootChangeCodec : undefined;\n"]}