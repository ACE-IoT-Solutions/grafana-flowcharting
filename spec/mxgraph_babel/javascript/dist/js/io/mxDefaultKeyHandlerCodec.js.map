{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/io/mxDefaultKeyHandlerCodec.js"],"names":["mxCodecRegistry","register","codec","mxObjectCodec","mxDefaultKeyHandler","encode","enc","obj","decode","dec","node","into","editor","firstChild","processInclude","nodeName","as","getAttribute","action","control","bindAction","nextSibling","__mxOutput","mxDefaultKeyHandlerCodec","undefined"],"mappings":";;;;;;;;AAAA;;;;AAIAA,mBAAgBC,QAAhB,CAAyB,YACzB;AACC;;;;;;;;AAQA,QAAIC,QAAQ,IAAIC,aAAJ,CAAkB,IAAIC,mBAAJ,EAAlB,CAAZ;;AAEA;;;;;AAKAF,UAAMG,MAAN,GAAe,UAASC,GAAT,EAAcC,GAAd,EACf;AACC,YAAO,IAAP;AACA,KAHD;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCAL,UAAMM,MAAN,GAAe,UAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EACf;AACC,SAAIA,QAAQ,IAAZ,EACA;AACC,UAAIC,SAASD,KAAKC,MAAlB;AACAF,aAAOA,KAAKG,UAAZ;;AAEA,aAAOH,QAAQ,IAAf,EACA;AACC,WAAI,CAAC,KAAKI,cAAL,CAAoBL,GAApB,EAAyBC,IAAzB,EAA+BC,IAA/B,CAAD,IACHD,KAAKK,QAAL,IAAiB,KADlB,EAEA;AACC,YAAIC,KAAKN,KAAKO,YAAL,CAAkB,IAAlB,CAAT;AACA,YAAIC,SAASR,KAAKO,YAAL,CAAkB,QAAlB,CAAb;AACA,YAAIE,UAAUT,KAAKO,YAAL,CAAkB,SAAlB,CAAd;;AAEAN,aAAKS,UAAL,CAAgBJ,EAAhB,EAAoBE,MAApB,EAA4BC,OAA5B;AACA;;AAEDT,cAAOA,KAAKW,WAAZ;AACA;AACD;;AAED,YAAOV,IAAP;AACA,KAxBD;;AA0BA;AACA,WAAOT,KAAP;AAEA,IAnFwB,EAAzB;;AAqFAoB,cAAWC,wBAAX,GAAsC,OAAOA,wBAAP,KAAoC,WAApC,GAAkDA,wBAAlD,GAA6EC,SAAnH","file":"mxDefaultKeyHandlerCodec.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxDefaultKeyHandlerCodec\n\t *\n\t * Custom codec for configuring <mxDefaultKeyHandler>s. This class is created\n\t * and registered dynamically at load time and used implicitely via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n\t * data for existing key handlers, it does not encode or create key handlers.\n\t */\n\tvar codec = new mxObjectCodec(new mxDefaultKeyHandler());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Binds a keystroke to an actionname.\n\t *\n\t * Attributes:\n\t *\n\t * as - Keycode.\n\t * action - Actionname to execute in editor.\n\t * control - Optional boolean indicating if\n\t * \t\tthe control key must be pressed.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <mxDefaultKeyHandler as=\"keyHandler\">\n\t *   <add as=\"88\" control=\"true\" action=\"cut\"/>\n\t *   <add as=\"67\" control=\"true\" action=\"copy\"/>\n\t *   <add as=\"86\" control=\"true\" action=\"paste\"/>\n\t * </mxDefaultKeyHandler>\n\t * (end)\n\t *\n\t * The keycodes are for the x, c and v keys.\n\t *\n\t * See also: <mxDefaultKeyHandler.bindAction>,\n\t * http://www.js-examples.com/page/tutorials__key_codes.html\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tif (into != null)\n\t\t{\n\t\t\tvar editor = into.editor;\n\t\t\tnode = node.firstChild;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tif (!this.processInclude(dec, node, into) &&\n\t\t\t\t\tnode.nodeName == 'add')\n\t\t\t\t{\n\t\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\tvar action = node.getAttribute('action');\n\t\t\t\t\tvar control = node.getAttribute('control');\n\t\t\t\t\t\n\t\t\t\t\tinto.bindAction(as, action, control);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxDefaultKeyHandlerCodec = typeof mxDefaultKeyHandlerCodec !== 'undefined' ? mxDefaultKeyHandlerCodec : undefined;\n"]}