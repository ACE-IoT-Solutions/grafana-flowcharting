{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/editor/mxDefaultKeyHandler.js"],"names":["mxDefaultKeyHandler","editor","handler","mxKeyHandler","graph","old","escape","evt","apply","arguments","hideProperties","fireEvent","mxEventObject","mxEvent","ESCAPE","prototype","bindAction","code","action","control","keyHandler","mxUtils","bind","execute","bindControlKey","bindKey","destroy","__mxOutput","undefined"],"mappings":";;;;;AAAA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,WAASA,mBAAT,CAA6BC,MAA7B,EACA;AACC,QAAIA,UAAU,IAAd,EACA;AACC,WAAKA,MAAL,GAAcA,MAAd;AACA,WAAKC,OAAL,GAAe,IAAIC,YAAJ,CAAiBF,OAAOG,KAAxB,CAAf;;AAEA;AACA;AACA;AACA,UAAIC,MAAM,KAAKH,OAAL,CAAaI,MAAvB;;AAEA,WAAKJ,OAAL,CAAaI,MAAb,GAAsB,UAASC,GAAT,EACtB;AACCF,YAAIG,KAAJ,CAAU,IAAV,EAAgBC,SAAhB;AACAR,eAAOS,cAAP;AACAT,eAAOU,SAAP,CAAiB,IAAIC,aAAJ,CAAkBC,QAAQC,MAA1B,EAAkC,OAAlC,EAA2CP,GAA3C,CAAjB;AACA,OALD;AAMA;AACD,G;;;AAAA;;AAED;;;;;AAKAP,0BAAoBe,SAApB,CAA8Bd,MAA9B,GAAuC,IAAvC;;AAEA;;;;;AAKAD,0BAAoBe,SAApB,CAA8Bb,OAA9B,GAAwC,IAAxC;;AAEA;;;;;;;;;;;;;;AAcAF,0BAAoBe,SAApB,CAA8BC,UAA9B,GAA2C,UAAUC,IAAV,EAAgBC,MAAhB,EAAwBC,OAAxB,EAC3C;AACC,YAAIC,aAAaC,QAAQC,IAAR,CAAa,IAAb,EAAmB,YACpC;AACC,eAAKrB,MAAL,CAAYsB,OAAZ,CAAoBL,MAApB;AACA,SAHgB,CAAjB;;AAKA;AACA,YAAIC,OAAJ,EACA;AACC,eAAKjB,OAAL,CAAasB,cAAb,CAA4BP,IAA5B,EAAkCG,UAAlC;AACA;;AAED;AALA,aAOA;AACC,iBAAKlB,OAAL,CAAauB,OAAb,CAAqBR,IAArB,EAA2BG,UAA3B;AACA;AACD,OAlBD;;AAoBA;;;;;;;AAOApB,0BAAoBe,SAApB,CAA8BW,OAA9B,GAAwC,YACxC;AACC,aAAKxB,OAAL,CAAawB,OAAb;AACA,aAAKxB,OAAL,GAAe,IAAf;AACA,OAJD;;AAMAyB,iBAAW3B,mBAAX,GAAiC,OAAOA,mBAAP,KAA+B,WAA/B,GAA6CA,mBAA7C,GAAmE4B,SAApG","file":"mxDefaultKeyHandler.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultKeyHandler\n *\n * Binds keycodes to actionnames in an editor. This aggregates an internal\n * <handler> and extends the implementation of <mxKeyHandler.escape> to not\n * only cancel the editing, but also hide the properties dialog and fire an\n * <mxEditor.escape> event via <editor>. An instance of this class is created\n * by <mxEditor> and stored in <mxEditor.keyHandler>.\n * \n * Example:\n * \n * Bind the delete key to the delete action in an existing editor.\n * \n * (code)\n * var keyHandler = new mxDefaultKeyHandler(editor);\n * keyHandler.bindAction(46, 'delete');\n * (end)\n *\n * Codec:\n * \n * This class uses the <mxDefaultKeyHandlerCodec> to read configuration\n * data into an existing instance. See <mxDefaultKeyHandlerCodec> for a\n * description of the configuration format.\n * \n * Keycodes:\n * \n * See <mxKeyHandler>.\n * \n * An <mxEvent.ESCAPE> event is fired via the editor if the escape key is\n * pressed.\n * \n * Constructor: mxDefaultKeyHandler\n *\n * Constructs a new default key handler for the <mxEditor.graph> in the\n * given <mxEditor>. (The editor may be null if a prototypical instance for\n * a <mxDefaultKeyHandlerCodec> is created.)\n * \n * Parameters:\n * \n * editor - Reference to the enclosing <mxEditor>.\n */\nfunction mxDefaultKeyHandler(editor)\n{\n\tif (editor != null)\n\t{\n\t\tthis.editor = editor;\n\t\tthis.handler = new mxKeyHandler(editor.graph);\n\t\t\n\t\t// Extends the escape function of the internal key\n\t\t// handle to hide the properties dialog and fire\n\t\t// the escape event via the editor instance\n\t\tvar old = this.handler.escape;\n\t\t\n\t\tthis.handler.escape = function(evt)\n\t\t{\n\t\t\told.apply(this, arguments);\n\t\t\teditor.hideProperties();\n\t\t\teditor.fireEvent(new mxEventObject(mxEvent.ESCAPE, 'event', evt));\n\t\t};\n\t}\n};\n\t\n/**\n * Variable: editor\n *\n * Reference to the enclosing <mxEditor>.\n */\nmxDefaultKeyHandler.prototype.editor = null;\n\n/**\n * Variable: handler\n *\n * Holds the <mxKeyHandler> for key event handling.\n */\nmxDefaultKeyHandler.prototype.handler = null;\n\n/**\n * Function: bindAction\n *\n * Binds the specified keycode to the given action in <editor>. The\n * optional control flag specifies if the control key must be pressed\n * to trigger the action.\n *\n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * action - Name of the action to execute in <editor>.\n * control - Optional boolean that specifies if control must be pressed.\n * Default is false.\n */\nmxDefaultKeyHandler.prototype.bindAction = function (code, action, control)\n{\n\tvar keyHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.execute(action);\n\t});\n\n\t// Binds the function to control-down keycode\n\tif (control)\n\t{\n\t\tthis.handler.bindControlKey(code, keyHandler);\n\t}\n\n\t// Binds the function to the normal keycode\n\telse\n\t{\n\t\tthis.handler.bindKey(code, keyHandler);\t\t\t\t\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the <handler> associated with this object. This does normally\n * not need to be called, the <handler> is destroyed automatically when the\n * window unloads (in IE) by <mxEditor>.\n */\nmxDefaultKeyHandler.prototype.destroy = function ()\n{\n\tthis.handler.destroy();\n\tthis.handler = null;\n};\n\n__mxOutput.mxDefaultKeyHandler = typeof mxDefaultKeyHandler !== 'undefined' ? mxDefaultKeyHandler : undefined;\n"]}