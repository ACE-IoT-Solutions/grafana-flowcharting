{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/editor/mxDefaultPopupMenu.js"],"names":["mxDefaultPopupMenu","config","prototype","imageBasePath","createMenu","editor","menu","cell","evt","conditions","createConditions","item","firstChild","addItems","parent","addSeparator","nodeName","condition","getAttribute","as","mxResources","get","funct","mxUtils","eval","getTextContent","action","icon","iconCls","enabledCond","enabled","row","addAction","nextSibling","lab","clickHandler","call","execute","addItem","model","graph","getModel","childCount","getChildCount","getSelectionCount","getRoot","getParent","getDefaultParent","isCell","isCellFoldable","isValidRoot","isSwimlane","condNodes","getElementsByTagName","i","length","name","__mxOutput","undefined"],"mappings":"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","file":"mxDefaultPopupMenu.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultPopupMenu\n *\n * Creates popupmenus for mouse events. This object holds an XML node\n * which is a description of the popup menu to be created. In\n * <createMenu>, the configuration is applied to the context and\n * the resulting menu items are added to the menu dynamically. See\n * <createMenu> for a description of the configuration format.\n * \n * This class does not create the DOM nodes required for the popup menu, it\n * only parses an XML description to invoke the respective methods on an\n * <mxPopupMenu> each time the menu is displayed.\n *\n * Codec:\n * \n * This class uses the <mxDefaultPopupMenuCodec> to read configuration\n * data into an existing instance, however, the actual parsing is done\n * by this class during program execution, so the format is described\n * below.\n * \n * Constructor: mxDefaultPopupMenu\n *\n * Constructs a new popupmenu-factory based on given configuration.\n *\n * Paramaters:\n *\n * config - XML node that contains the configuration data.\n */\nfunction mxDefaultPopupMenu(config)\n{\n\tthis.config = config;\n};\n\n/**\n * Variable: imageBasePath\n *\n * Base path for all icon attributes in the config. Default is null.\n */\nmxDefaultPopupMenu.prototype.imageBasePath = null;\n\n/**\n * Variable: config\n *\n * XML node used as the description of new menu items. This node is\n * used in <createMenu> to dynamically create the menu items if their\n * respective conditions evaluate to true for the given arguments.\n */\nmxDefaultPopupMenu.prototype.config = null;\n\n/**\n * Function: createMenu\n *\n * This function is called from <mxEditor> to add items to the\n * given menu based on <config>. The config is a sequence of\n * the following nodes and attributes.\n *\n * Child Nodes: \n *\n * add - Adds a new menu item. See below for attributes.\n * separator - Adds a separator. No attributes.\n * condition - Adds a custom condition. Name attribute.\n * \n * The add-node may have a child node that defines a function to be invoked\n * before the action is executed (or instead of an action to be executed).\n *\n * Attributes:\n *\n * as - Resource key for the label (needs entry in property file).\n * action - Name of the action to execute in enclosing editor.\n * icon - Optional icon (relative/absolute URL).\n * iconCls - Optional CSS class for the icon.\n * if - Optional name of condition that must be true (see below).\n * enabled-if - Optional name of condition that specifies if the menu item\n * should be enabled.\n * name - Name of custom condition. Only for condition nodes.\n *\n * Conditions:\n *\n * nocell - No cell under the mouse.\n * ncells - More than one cell selected.\n * notRoot - Drilling position is other than home.\n * cell - Cell under the mouse.\n * notEmpty - Exactly one cell with children under mouse.\n * expandable - Exactly one expandable cell under mouse.\n * collapsable - Exactly one collapsable cell under mouse.\n * validRoot - Exactly one cell which is a possible root under mouse.\n * swimlane - Exactly one cell which is a swimlane under mouse.\n *\n * Example:\n *\n * To add a new item for a given action to the popupmenu:\n * \n * (code)\n * <mxDefaultPopupMenu as=\"popupHandler\">\n *   <add as=\"delete\" action=\"delete\" icon=\"images/delete.gif\" if=\"cell\"/>\n * </mxDefaultPopupMenu>\n * (end)\n * \n * To add a new item for a custom function:\n * \n * (code)\n * <mxDefaultPopupMenu as=\"popupHandler\">\n *   <add as=\"action1\"><![CDATA[\n *\t\tfunction (editor, cell, evt)\n *\t\t{\n *\t\t\teditor.execute('action1', cell, 'myArg');\n *\t\t}\n *   ]]></add>\n * </mxDefaultPopupMenu>\n * (end)\n * \n * The above example invokes action1 with an additional third argument via\n * the editor instance. The third argument is passed to the function that\n * defines action1. If the add-node has no action-attribute, then only the\n * function defined in the text content is executed, otherwise first the\n * function and then the action defined in the action-attribute is\n * executed. The function in the text content has 3 arguments, namely the\n * <mxEditor> instance, the <mxCell> instance under the mouse, and the\n * native mouse event.\n *\n * Custom Conditions:\n *\n * To add a new condition for popupmenu items:\n *  \n * (code)\n * <condition name=\"condition1\"><![CDATA[\n *   function (editor, cell, evt)\n *   {\n *     return cell != null;\n *   }\n * ]]></condition>\n * (end)\n * \n * The new condition can then be used in any item as follows:\n * \n * (code)\n * <add as=\"action1\" action=\"action1\" icon=\"action1.gif\" if=\"condition1\"/>\n * (end)\n * \n * The order in which the items and conditions appear is not significant as\n * all connditions are evaluated before any items are created.\n * \n * Parameters:\n *\n * editor - Enclosing <mxEditor> instance.\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * cell - Optional <mxCell> which is under the mousepointer.\n * evt - Optional mouse event which triggered the menu. \n */\nmxDefaultPopupMenu.prototype.createMenu = function(editor, menu, cell, evt)\n{\n\tif (this.config != null)\n\t{\n\t\tvar conditions = this.createConditions(editor, cell, evt);\n\t\tvar item = this.config.firstChild;\n\n\t\tthis.addItems(editor, menu, cell, evt, conditions, item, null);\n\t}\n};\n\n/**\n * Function: addItems\n * \n * Recursively adds the given items and all of its children into the given menu.\n * \n * Parameters:\n *\n * editor - Enclosing <mxEditor> instance.\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * cell - Optional <mxCell> which is under the mousepointer.\n * evt - Optional mouse event which triggered the menu.\n * conditions - Array of names boolean conditions.\n * item - XML node that represents the current menu item.\n * parent - DOM node that represents the parent menu item.\n */\nmxDefaultPopupMenu.prototype.addItems = function(editor, menu, cell, evt, conditions, item, parent)\n{\n\tvar addSeparator = false;\n\t\n\twhile (item != null)\n\t{\n\t\tif (item.nodeName == 'add')\n\t\t{\n\t\t\tvar condition = item.getAttribute('if');\n\t\t\t\n\t\t\tif (condition == null || conditions[condition])\n\t\t\t{\n\t\t\t\tvar as = item.getAttribute('as');\n\t\t\t\tas = mxResources.get(as) || as;\n\t\t\t\tvar funct = mxUtils.eval(mxUtils.getTextContent(item));\n\t\t\t\tvar action = item.getAttribute('action');\n\t\t\t\tvar icon = item.getAttribute('icon');\n\t\t\t\tvar iconCls = item.getAttribute('iconCls');\n\t\t\t\tvar enabledCond = item.getAttribute('enabled-if');\n\t\t\t\tvar enabled = enabledCond == null || conditions[enabledCond];\n\t\t\t\t\n\t\t\t\tif (addSeparator)\n\t\t\t\t{\n\t\t\t\t\tmenu.addSeparator(parent);\n\t\t\t\t\taddSeparator = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (icon != null && this.imageBasePath)\n\t\t\t\t{\n\t\t\t\t\ticon = this.imageBasePath + icon;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar row = this.addAction(menu, editor, as, icon, funct, action, cell, parent, iconCls, enabled);\n\t\t\t\tthis.addItems(editor, menu, cell, evt, conditions, item.firstChild, row);\n\t\t\t}\n\t\t}\n\t\telse if (item.nodeName == 'separator')\n\t\t{\n\t\t\taddSeparator = true;\n\t\t}\n\t\t\n\t\titem = item.nextSibling;\n\t}\n};\n\n/**\n * Function: addAction\n *\n * Helper method to bind an action to a new menu item.\n * \n * Parameters:\n *\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * editor - Enclosing <mxEditor> instance.\n * lab - String that represents the label of the menu item.\n * icon - Optional URL that represents the icon of the menu item.\n * action - Optional name of the action to execute in the given editor.\n * funct - Optional function to execute before the optional action. The\n * function takes an <mxEditor>, the <mxCell> under the mouse and the\n * mouse event that triggered the call.\n * cell - Optional <mxCell> to use as an argument for the action.\n * parent - DOM node that represents the parent menu item.\n * iconCls - Optional CSS class for the menu icon.\n * enabled - Optional boolean that specifies if the menu item is enabled.\n * Default is true.\n */\nmxDefaultPopupMenu.prototype.addAction = function(menu, editor, lab, icon, funct, action, cell, parent, iconCls, enabled)\n{\n\tvar clickHandler = function(evt)\n\t{\n\t\tif (typeof(funct) == 'function')\n\t\t{\n\t\t\tfunct.call(editor, editor, cell, evt);\n\t\t}\n\t\t\n\t\tif (action != null)\n\t\t{\n\t\t\teditor.execute(action, cell, evt);\n\t\t}\n\t};\n\t\n\treturn menu.addItem(lab, icon, clickHandler, parent, iconCls, enabled);\n};\n\n/**\n * Function: createConditions\n * \n * Evaluates the default conditions for the given context.\n */\nmxDefaultPopupMenu.prototype.createConditions = function(editor, cell, evt)\n{\n\t// Creates array with conditions\n\tvar model = editor.graph.getModel();\n\tvar childCount = model.getChildCount(cell);\n\t\n\t// Adds some frequently used conditions\n\tvar conditions = [];\n\tconditions['nocell'] = cell == null;\n\tconditions['ncells'] = editor.graph.getSelectionCount() > 1;\n\tconditions['notRoot'] = model.getRoot() !=\n\t\tmodel.getParent(editor.graph.getDefaultParent());\n\tconditions['cell'] = cell != null;\n\t\n\tvar isCell = cell != null && editor.graph.getSelectionCount() == 1;\n\tconditions['nonEmpty'] = isCell && childCount > 0;\n\tconditions['expandable'] = isCell && editor.graph.isCellFoldable(cell, false);\n\tconditions['collapsable'] = isCell && editor.graph.isCellFoldable(cell, true);\n\tconditions['validRoot'] = isCell && editor.graph.isValidRoot(cell);\n\tconditions['emptyValidRoot'] = conditions['validRoot'] && childCount == 0;\n\tconditions['swimlane'] = isCell && editor.graph.isSwimlane(cell);\n\n\t// Evaluates dynamic conditions from config file\n\tvar condNodes = this.config.getElementsByTagName('condition');\n\t\n\tfor (var i=0; i<condNodes.length; i++)\n\t{\n\t\tvar funct = mxUtils.eval(mxUtils.getTextContent(condNodes[i]));\n\t\tvar name = condNodes[i].getAttribute('name');\n\t\t\n\t\tif (name != null && typeof(funct) == 'function')\n\t\t{\n\t\t\tconditions[name] = funct(editor, cell, evt);\n\t\t}\n\t}\n\t\n\treturn conditions;\n};\n\n__mxOutput.mxDefaultPopupMenu = typeof mxDefaultPopupMenu !== 'undefined' ? mxDefaultPopupMenu : undefined;\n"]}