{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/editor/mxEditor.js"],"names":["mxEditor","config","actions","addActions","document","body","cycleAttributeValues","popupHandler","mxDefaultPopupMenu","undoManager","mxUndoManager","graph","createGraph","toolbar","createToolbar","keyHandler","mxDefaultKeyHandler","configure","swimlaneIndicatorColorAttribute","cycleAttributeName","onInit","mxClient","IS_IE","mxEvent","addListener","window","mxUtils","bind","destroy","mxLoadResources","mxResources","add","basePath","defaultBundles","push","prototype","mxEventSource","constructor","askZoomResource","language","lastSavedResource","currentFileResource","propertiesResource","tasksResource","helpResource","outlineResource","outline","graphRenderHint","status","dblClickAction","swimlaneRequired","disableContextMenu","insertFunction","forcedInserting","templates","defaultEdge","defaultEdgeStyle","defaultGroup","groupBorderSize","filename","linefeed","postParameterName","escapePostData","urlPost","urlImage","horizontalFlow","layoutDiagram","swimlaneSpacing","maintainSwimlanes","layoutSwimlanes","cycleAttributeIndex","tasks","tasksWindowImage","tasksTop","help","helpWindowImage","urlHelp","helpWidth","helpHeight","propertiesWidth","propertiesHeight","movePropertiesDialog","validating","modified","isModified","setModified","value","addAction","editor","save","preview","mxPrintPreview","open","show","url","getUrlImage","IS_LOCAL","execute","node","getViewXml","xml","getXml","submit","encodeURIComponent","refresh","isEnabled","mxClipboard","cut","copy","paste","removeCells","setSelectionCell","groupCells","setSelectionCells","ungroupCells","removeCellsFromParent","undo","redo","zoomIn","zoomOut","zoomActual","fit","cell","showProperties","selectAll","clearSelection","selectVertices","selectEdges","isCellEditable","startEditingAtCell","orderCells","enterGroup","exitGroup","home","selectPreviousCell","selectNextCell","selectParentCell","selectChildCell","foldCells","cells","getChildVertices","toggleCellStyleFlags","mxConstants","STYLE_FONTSTYLE","FONT_BOLD","FONT_ITALIC","FONT_UNDERLINE","alignCells","ALIGN_LEFT","ALIGN_CENTER","ALIGN_RIGHT","ALIGN_TOP","ALIGN_MIDDLE","ALIGN_BOTTOM","setCellStyles","STYLE_ALIGN","STYLE_VERTICAL_ALIGN","current","getView","scale","parseFloat","prompt","get","isNaN","setScale","setVisible","isVisible","showTasks","showHelp","showOutline","mxLog","dec","mxCodec","ownerDocument","decode","resetHistory","resetFirstTime","cookie","lastSnapshot","Date","getTime","clear","ignoredChanges","actionname","funct","evt","action","args","arguments","apply","e","error","message","addTemplate","name","template","getTemplate","mxGraph","setTooltips","setPanning","installDblClickHandler","installUndoHandler","installDrillHandler","installChangeHandler","installInsertHandler","popupMenuHandler","factoryMethod","menu","createPopupMenu","connectionHandler","source","target","createEdge","createSwimlaneManager","createLayoutManager","swimlaneMgr","mxSwimlaneManager","isHorizontal","layoutMgr","mxLayoutManager","self","getLayout","layout","model","getModel","getParent","isSwimlane","swimlaneLayout","createSwimlaneLayout","isValidRoot","diagramLayout","createDiagramLayout","setGraphContainer","container","init","rubberband","mxRubberband","IS_QUIRKS","mxDivResizer","DOUBLE_CLICK","sender","getProperty","consume","listener","edit","undoableEditHappened","UNDO","undoHandler","changes","getSelectionCellsForChanges","REDO","fireEvent","mxEventObject","ROOT","DOWN","UP","validateGraph","i","length","change","mxRootChange","mxValueChange","root","mxCellAttributeChange","CHANGE","insertHandler","mouseDown","me","isPopupTrigger","getState","getEvent","getCell","isActive","mouseMove","mouseUp","addMouseListener","gs","gridSize","mxStackLayout","isVertexIgnored","mxCompactTreeLayout","mxDefaultToolbar","setToolbarContainer","setStatusContainer","SAVE","tstamp","toLocaleString","setStatus","OPEN","innerHTML","setTitleContainer","getTitle","treeLayout","horizontal","title","getCurrentRoot","convertValueToString","prefix","getRootTitle","getRoot","border","createGroup","cloneCell","load","readGraphModel","documentElement","getUrlPost","data","writeGraphModel","postDiagram","post","req","POST","enc","encode","swapStyles","first","second","style","getStylesheet","styles","putCellStyle","getSelectionCell","stopEditing","offset","getOffset","x","y","properties","getX","getY","bounds","getCellBounds","Math","min","width","hideProperties","createProperties","mxWindow","isPropertiesVisible","getValue","isNode","form","mxForm","id","addText","getId","setAttribute","geo","yField","xField","widthField","heightField","isVertex","getGeometry","height","tmp","getStyle","attrs","attributes","texts","val","addTextarea","nodeName","okFunction","beginUpdate","clone","setGeometry","setStyle","isAutoSizeCell","updateCellSize","endUpdate","cancelFunction","addButtons","table","div","createElement","padding","paddingLeft","w","clientWidth","wnd","setClosable","destroyOnClose","release","createTasks","getSelectionModel","setImage","refreshTasks","content","frame","backgroundColor","h","clientHeight","setMaximizable","setResizable","IS_NS","handler","offsetHeight","RESIZE_END","MAXIMIZE","NORMALIZE","SHOW","create","overflow","position","background","cursor","documentMode","filter","mxOutline","update","setMode","modename","panningHandler","useLeftButtonForPanning","setConnectable","createMenu","mxCell","setEdge","mxGeometry","relative","getEdgeStyle","consumeCycleAttribute","cycleAttribute","addVertex","parent","vertex","isValidDropTarget","getSwimlaneAt","pgeo","swimlaneNesting","state","origin","isConstrainedMoving","snap","translate","getDefaultParent","BEFORE_ADD_VERTEX","addCell","constrainChild","ADD_VERTEX","scrollCellToVisible","AFTER_ADD_VERTEX","destroyed","__mxOutput","undefined"],"mappings":"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","file":"mxEditor.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEditor\n *\n * Extends <mxEventSource> to implement a application wrapper for a graph that\n * adds <actions>, I/O using <mxCodec>, auto-layout using <mxLayoutManager>,\n * command history using <undoManager>, and standard dialogs and widgets, eg.\n * properties, help, outline, toolbar, and popupmenu. It also adds <templates>\n * to be used as cells in toolbars, auto-validation using the <validation>\n * flag, attribute cycling using <cycleAttributeValues>, higher-level events\n * such as <root>, and backend integration using <urlPost> and <urlImage>. \n * \n * Actions:\n * \n * Actions are functions stored in the <actions> array under their names. The\n * functions take the <mxEditor> as the first, and an optional <mxCell> as the\n * second argument and are invoked using <execute>. Any additional arguments\n * passed to execute are passed on to the action as-is.\n * \n * A list of built-in actions is available in the <addActions> description.\n * \n * Read/write Diagrams:\n * \n * To read a diagram from an XML string, for example from a textfield within the \n * page, the following code is used:\n * \n * (code)\n * var doc = mxUtils.parseXML(xmlString);\n * var node = doc.documentElement;\n * editor.readGraphModel(node);\n * (end)\n * \n * For reading a diagram from a remote location, use the <open> method.\n * \n * To save diagrams in XML on a server, you can set the <urlPost> variable. \n * This variable will be used in <getUrlPost> to construct a URL for the post \n * request that is issued in the <save> method. The post request contains the \n * XML representation of the diagram as returned by <writeGraphModel> in the \n * xml parameter.\n * \n * On the server side, the post request is processed using standard\n * technologies such as Java Servlets, CGI, .NET or ASP.\n * \n * Here are some examples of processing a post request in various languages.\n * \n * - Java: URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\")\n * \n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image, but not\n * if the XML is passed back to the client-side.\n * \n * - .NET: HttpUtility.UrlDecode(context.Request.Params[\"xml\"])\n * - PHP: urldecode($_POST[\"xml\"])\n * \n * Creating images:\n * \n * A backend (Java, PHP or C#) is required for creating images. The\n * distribution contains an example for each backend (ImageHandler.java,\n * ImageHandler.cs and graph.php). More information about using a backend\n * to create images can be found in the readme.html files. Note that the\n * preview is implemented using VML/SVG in the browser and does not require\n * a backend. The backend is only required to creates images (bitmaps).\n * \n * Special characters:\n * \n * Note There are five characters that should always appear in XML content as\n * escapes, so that they do not interact with the syntax of the markup. These\n * are part of the language for all documents based on XML and for HTML.\n * \n * - &lt; (<)\n * - &gt; (>)\n * - &amp; (&)\n * - &quot; (\")\n * - &apos; (')\n * \n * Although it is part of the XML language, &apos; is not defined in HTML.\n * For this reason the XHTML specification recommends instead the use of\n * &#39; if text may be passed to a HTML user agent.\n * \n * If you are having problems with special characters on the server-side then\n * you may want to try the <escapePostData> flag.\n * \n * For converting decimal escape sequences inside strings, a user has provided\n * us with the following function:\n * \n * (code)\n * function html2js(text)\n * {\n *   var entitySearch = /&#[0-9]+;/;\n *   var entity;\n *   \n *   while (entity = entitySearch.exec(text))\n *   {\n *     var charCode = entity[0].substring(2, entity[0].length -1);\n *     text = text.substring(0, entity.index)\n *            + String.fromCharCode(charCode)\n *            + text.substring(entity.index + entity[0].length);\n *   }\n *   \n *   return text;\n * }\n * (end)\n * \n * Otherwise try using hex escape sequences and the built-in unescape function\n * for converting such strings.\n * \n * Local Files:\n * \n * For saving and opening local files, no standardized method exists that\n * works across all browsers. The recommended way of dealing with local files\n * is to create a backend that streams the XML data back to the browser (echo)\n * as an attachment so that a Save-dialog is displayed on the client-side and\n * the file can be saved to the local disk.\n * \n * For example, in PHP the code that does this looks as follows.\n * \n * (code)\n * $xml = stripslashes($_POST[\"xml\"]);\n * header(\"Content-Disposition: attachment; filename=\\\"diagram.xml\\\"\");\n * echo($xml);\n * (end)\n * \n * To open a local file, the file should be uploaded via a form in the browser\n * and then opened from the server in the editor.\n * \n * Cell Properties:\n * \n * The properties displayed in the properties dialog are the attributes and \n * values of the cell's user object, which is an XML node. The XML node is \n * defined in the templates section of the config file.\n * \n * The templates are stored in <mxEditor.templates> and contain cells which\n * are cloned at insertion time to create new vertices by use of drag and\n * drop from the toolbar. Each entry in the toolbar for adding a new vertex\n * must refer to an existing template.\n * \n * In the following example, the task node is a business object and only the \n * mxCell node and its mxGeometry child contain graph information:\n * \n * (code)\n * <Task label=\"Task\" description=\"\">\n *   <mxCell vertex=\"true\">\n *     <mxGeometry as=\"geometry\" width=\"72\" height=\"32\"/>\n *   </mxCell>\n * </Task> \n * (end)\n * \n * The idea is that the XML representation is inverse from the in-memory \n * representation: The outer XML node is the user object and the inner node is \n * the cell. This means the user object of the cell is the Task node with no \n * children for the above example:\n * \n * (code)\n * <Task label=\"Task\" description=\"\"/>\n * (end)\n * \n * The Task node can have any tag name, attributes and child nodes. The \n * <mxCodec> will use the XML hierarchy as the user object, while removing the \n * \"known annotations\", such as the mxCell node. At save-time the cell data \n * will be \"merged\" back into the user object. The user object is only modified \n * via the properties dialog during the lifecycle of the cell.\n * \n * In the default implementation of <createProperties>, the user object's\n * attributes are put into a form for editing. Attributes are changed using\n * the <mxCellAttributeChange> action in the model. The dialog can be replaced \n * by overriding the <createProperties> hook or by replacing the showProperties\n * action in <actions>. Alternatively, the entry in the config file's popupmenu\n * section can be modified to invoke a different action.\n * \n * If you want to displey the properties dialog on a doubleclick, you can set\n * <mxEditor.dblClickAction> to showProperties as follows:\n * \n * (code)\n * editor.dblClickAction = 'showProperties';\n * (end)\n * \n * Popupmenu and Toolbar:\n * \n * The toolbar and popupmenu are typically configured using the respective\n * sections in the config file, that is, the popupmenu is defined as follows:\n * \n * (code)\n * <mxEditor>\n *   <mxDefaultPopupMenu as=\"popupHandler\">\n * \t\t<add as=\"cut\" action=\"cut\" icon=\"images/cut.gif\"/>\n *      ...\n * (end)\n * \n * New entries can be added to the toolbar by inserting an add-node into the\n * above configuration. Existing entries may be removed and changed by\n * modifying or removing the respective entries in the configuration.\n * The configuration is read by the <mxDefaultPopupMenuCodec>, the format of the\n * configuration is explained in <mxDefaultPopupMenu.decode>.\n * \n * The toolbar is defined in the mxDefaultToolbar section. Items can be added\n * and removed in this section.\n * \n * (code)\n * <mxEditor>\n *   <mxDefaultToolbar>\n *     <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n *     <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"/>\n *     ...\n * (end)\n * \n * The format of the configuration is described in\n * <mxDefaultToolbarCodec.decode>.\n * \n * Ids:\n * \n * For the IDs, there is an implicit behaviour in <mxCodec>: It moves the Id\n * from the cell to the user object at encoding time and vice versa at decoding\n * time. For example, if the Task node from above has an id attribute, then\n * the <mxCell.id> of the corresponding cell will have this value. If there\n * is no Id collision in the model, then the cell may be retrieved using this\n * Id with the <mxGraphModel.getCell> function. If there is a collision, a new\n * Id will be created for the cell using <mxGraphModel.createId>. At encoding\n * time, this new Id will replace the value previously stored under the id\n * attribute in the Task node.\n * \n * See <mxEditorCodec>, <mxDefaultToolbarCodec> and <mxDefaultPopupMenuCodec>\n * for information about configuring the editor and user interface.\n * \n * Programmatically inserting cells:\n * \n * For inserting a new cell, say, by clicking a button in the document,\n * the following code can be used. This requires an reference to the editor.\n * \n * (code)\n * var userObject = new Object();\n * var parent = editor.graph.getDefaultParent();\n * var model = editor.graph.model;\n * model.beginUpdate();\n * try\n * {\n *   editor.graph.insertVertex(parent, null, userObject, 20, 20, 80, 30);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * (end)\n * \n * If a template cell from the config file should be inserted, then a clone\n * of the template can be created as follows. The clone is then inserted using\n * the add function instead of addVertex.\n * \n * (code)\n * var template = editor.templates['task'];\n * var clone = editor.graph.model.cloneCell(template);\n * (end)\n * \n * Resources:\n *\n * resources/editor - Language resources for mxEditor\n *\n * Callback: onInit\n *\n * Called from within the constructor. In the callback,\n * \"this\" refers to the editor instance.\n *\n * Cookie: mxgraph=seen\n *\n * Set when the editor is started. Never expires. Use\n * <resetFirstTime> to reset this cookie. This cookie\n * only exists if <onInit> is implemented.\n *\n * Event: mxEvent.OPEN\n *\n * Fires after a file was opened in <open>. The <code>filename</code> property\n * contains the filename that was used. The same value is also available in\n * <filename>.\n *\n * Event: mxEvent.SAVE\n *\n * Fires after the current file was saved in <save>. The <code>url</code>\n * property contains the URL that was used for saving.\n *\n * Event: mxEvent.POST\n * \n * Fires if a successful response was received in <postDiagram>. The\n * <code>request</code> property contains the <mxXmlRequest>, the\n * <code>url</code> and <code>data</code> properties contain the URL and the\n * data that were used in the post request. \n *\n * Event: mxEvent.ROOT\n *\n * Fires when the current root has changed, or when the title of the current\n * root has changed. This event has no properties.\n *\n * Event: mxEvent.BEFORE_ADD_VERTEX\n * \n * Fires before a vertex is added in <addVertex>. The <code>vertex</code>\n * property contains the new vertex and the <code>parent</code> property\n * contains its parent.\n * \n * Event: mxEvent.ADD_VERTEX\n * \n * Fires between begin- and endUpdate in <addVertex>. The <code>vertex</code>\n * property contains the vertex that is being inserted.\n * \n * Event: mxEvent.AFTER_ADD_VERTEX\n * \n * Fires after a vertex was inserted and selected in <addVertex>. The\n * <code>vertex</code> property contains the new vertex.\n * \n * Example:\n * \n * For starting an in-place edit after a new vertex has been added to the\n * graph, the following code can be used.\n * \n * (code)\n * editor.addListener(mxEvent.AFTER_ADD_VERTEX, function(sender, evt)\n * {\n *   var vertex = evt.getProperty('vertex');\n * \n *   if (editor.graph.isCellEditable(vertex))\n *   {\n *   \teditor.graph.startEditingAtCell(vertex);\n *   }\n * });\n * (end)\n * \n * Event: mxEvent.ESCAPE\n * \n * Fires when the escape key is pressed. The <code>event</code> property\n * contains the key event.\n * \n * Constructor: mxEditor\n *\n * Constructs a new editor. This function invokes the <onInit> callback\n * upon completion.\n *\n * Example:\n *\n * (code)\n * var config = mxUtils.load('config/diagrameditor.xml').getDocumentElement();\n * var editor = new mxEditor(config);\n * (end)\n * \n * Parameters:\n * \n * config - Optional XML node that contains the configuration.\n */\nfunction mxEditor(config)\n{\n\tthis.actions = [];\n\tthis.addActions();\n\n\t// Executes the following only if a document has been instanciated.\n\t// That is, don't execute when the editorcodec is setup.\n\tif (document.body != null)\n\t{\n\t\t// Defines instance fields\n\t\tthis.cycleAttributeValues = [];\n\t\tthis.popupHandler = new mxDefaultPopupMenu();\n\t\tthis.undoManager = new mxUndoManager();\n\n\t\t// Creates the graph and toolbar without the containers\n\t\tthis.graph = this.createGraph();\n\t\tthis.toolbar = this.createToolbar();\n\n\t\t// Creates the global keyhandler (requires graph instance)\n\t\tthis.keyHandler = new mxDefaultKeyHandler(this);\n\n\t\t// Configures the editor using the URI\n\t\t// which was passed to the ctor\n\t\tthis.configure(config);\n\t\t\n\t\t// Assigns the swimlaneIndicatorColorAttribute on the graph\n\t\tthis.graph.swimlaneIndicatorColorAttribute = this.cycleAttributeName;\n\n\t\t// Checks if the <onInit> hook has been set\n\t\tif (this.onInit != null)\n\t\t{\n\t\t\t// Invokes the <onInit> hook\n\t\t\tthis.onInit();\n\t\t}\n\t\t\n\t\t// Automatic deallocation of memory\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}));\n\t\t}\n\t}\n};\n\n/**\n * Installs the required language resources at class\n * loading time.\n */\nif (mxLoadResources)\n{\n\tmxResources.add(mxClient.basePath + '/resources/editor');\n}\nelse\n{\n\tmxClient.defaultBundles.push(mxClient.basePath + '/resources/editor');\n}\n\n/**\n * Extends mxEventSource.\n */\nmxEditor.prototype = new mxEventSource();\nmxEditor.prototype.constructor = mxEditor;\n\n/**\n * Group: Controls and Handlers\n */\n\t\n/**\n * Variable: askZoomResource\n * \n * Specifies the resource key for the zoom dialog. If the resource for this\n * key does not exist then the value is used as the error message. Default\n * is 'askZoom'.\n */\nmxEditor.prototype.askZoomResource = (mxClient.language != 'none') ? 'askZoom' : '';\n\t\n/**\n * Variable: lastSavedResource\n * \n * Specifies the resource key for the last saved info. If the resource for\n * this key does not exist then the value is used as the error message.\n * Default is 'lastSaved'.\n */\nmxEditor.prototype.lastSavedResource = (mxClient.language != 'none') ? 'lastSaved' : '';\n\t\n/**\n * Variable: currentFileResource\n * \n * Specifies the resource key for the current file info. If the resource for\n * this key does not exist then the value is used as the error message.\n * Default is 'lastSaved'.\n */\nmxEditor.prototype.currentFileResource = (mxClient.language != 'none') ? 'currentFile' : '';\n\t\n/**\n * Variable: propertiesResource\n * \n * Specifies the resource key for the properties window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'properties'.\n */\nmxEditor.prototype.propertiesResource = (mxClient.language != 'none') ? 'properties' : '';\n\t\n/**\n * Variable: tasksResource\n * \n * Specifies the resource key for the tasks window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'tasks'.\n */\nmxEditor.prototype.tasksResource = (mxClient.language != 'none') ? 'tasks' : '';\n\t\n/**\n * Variable: helpResource\n * \n * Specifies the resource key for the help window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'help'.\n */\nmxEditor.prototype.helpResource = (mxClient.language != 'none') ? 'help' : '';\n\t\n/**\n * Variable: outlineResource\n * \n * Specifies the resource key for the outline window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'outline'.\n */\nmxEditor.prototype.outlineResource = (mxClient.language != 'none') ? 'outline' : '';\n\t\n/**\n * Variable: outline\n * \n * Reference to the <mxWindow> that contains the outline. The <mxOutline>\n * is stored in outline.outline.\n */\nmxEditor.prototype.outline = null;\n\n/**\n * Variable: graph\n *\n * Holds a <mxGraph> for displaying the diagram. The graph\n * is created in <setGraphContainer>.\n */\nmxEditor.prototype.graph = null;\n\n/**\n * Variable: graphRenderHint\n *\n * Holds the render hint used for creating the\n * graph in <setGraphContainer>. See <mxGraph>.\n * Default is null.\n */\nmxEditor.prototype.graphRenderHint = null;\n\n/**\n * Variable: toolbar\n *\n * Holds a <mxDefaultToolbar> for displaying the toolbar. The\n * toolbar is created in <setToolbarContainer>.\n */\nmxEditor.prototype.toolbar = null;\n\n/**\n * Variable: status\n *\n * DOM container that holds the statusbar. Default is null.\n * Use <setStatusContainer> to set this value.\n */\nmxEditor.prototype.status = null;\n\n/**\n * Variable: popupHandler\n *\n * Holds a <mxDefaultPopupMenu> for displaying\n * popupmenus.\n */\nmxEditor.prototype.popupHandler = null;\n\n/**\n * Variable: undoManager\n *\n * Holds an <mxUndoManager> for the command history.\n */\nmxEditor.prototype.undoManager = null;\n\n/**\n * Variable: keyHandler\n *\n * Holds a <mxDefaultKeyHandler> for handling keyboard events.\n * The handler is created in <setGraphContainer>.\n */\nmxEditor.prototype.keyHandler = null;\n\n/**\n * Group: Actions and Options\n */\n\n/**\n * Variable: actions\n *\n * Maps from actionnames to actions, which are functions taking\n * the editor and the cell as arguments. Use <addAction>\n * to add or replace an action and <execute> to execute an action\n * by name, passing the cell to be operated upon as the second\n * argument.\n */\nmxEditor.prototype.actions = null;\n\n/**\n * Variable: dblClickAction\n *\n * Specifies the name of the action to be executed\n * when a cell is double clicked. Default is edit.\n * \n * To handle a singleclick, use the following code.\n * \n * (code)\n * editor.graph.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var e = evt.getProperty('event');\n *   var cell = evt.getProperty('cell');\n * \n *   if (cell != null && !e.isConsumed())\n *   {\n *     // Do something useful with cell...\n *     e.consume();\n *   }\n * });\n * (end)\n */\nmxEditor.prototype.dblClickAction = 'edit';\n\n/**\n * Variable: swimlaneRequired\n * \n * Specifies if new cells must be inserted\n * into an existing swimlane. Otherwise, cells\n * that are not swimlanes can be inserted as\n * top-level cells. Default is false.\n */\nmxEditor.prototype.swimlaneRequired = false;\n\n/**\n * Variable: disableContextMenu\n *\n * Specifies if the context menu should be disabled in the graph container.\n * Default is true.\n */\nmxEditor.prototype.disableContextMenu = true;\n\n/**\n * Group: Templates\n */\n\n/**\n * Variable: insertFunction\n *\n * Specifies the function to be used for inserting new\n * cells into the graph. This is assigned from the\n * <mxDefaultToolbar> if a vertex-tool is clicked.\n */\nmxEditor.prototype.insertFunction = null;\n\n/**\n * Variable: forcedInserting\n *\n * Specifies if a new cell should be inserted on a single\n * click even using <insertFunction> if there is a cell \n * under the mousepointer, otherwise the cell under the \n * mousepointer is selected. Default is false.\n */\nmxEditor.prototype.forcedInserting = false;\n\n/**\n * Variable: templates\n * \n * Maps from names to protoype cells to be used\n * in the toolbar for inserting new cells into\n * the diagram.\n */\nmxEditor.prototype.templates = null;\n\n/**\n * Variable: defaultEdge\n * \n * Prototype edge cell that is used for creating\n * new edges.\n */\nmxEditor.prototype.defaultEdge = null;\n\n/**\n * Variable: defaultEdgeStyle\n * \n * Specifies the edge style to be returned in <getEdgeStyle>.\n * Default is null.\n */\nmxEditor.prototype.defaultEdgeStyle = null;\n\n/**\n * Variable: defaultGroup\n * \n * Prototype group cell that is used for creating\n * new groups.\n */\nmxEditor.prototype.defaultGroup = null;\n\n/**\n * Variable: graphRenderHint\n *\n * Default size for the border of new groups. If null,\n * then then <mxGraph.gridSize> is used. Default is\n * null.\n */\nmxEditor.prototype.groupBorderSize = null;\n\n/**\n * Group: Backend Integration\n */\n\n/**\n * Variable: filename\n *\n * Contains the URL of the last opened file as a string.\n * Default is null.\n */\nmxEditor.prototype.filename = null;\n\n/**\n * Variable: lineFeed\n *\n * Character to be used for encoding linefeeds in <save>. Default is '&#xa;'.\n */\nmxEditor.prototype.linefeed = '&#xa;';\n\n/**\n * Variable: postParameterName\n *\n * Specifies if the name of the post parameter that contains the diagram\n * data in a post request to the server. Default is xml.\n */\nmxEditor.prototype.postParameterName = 'xml';\n\n/**\n * Variable: escapePostData\n *\n * Specifies if the data in the post request for saving a diagram\n * should be converted using encodeURIComponent. Default is true.\n */\nmxEditor.prototype.escapePostData = true;\n\n/**\n * Variable: urlPost\n *\n * Specifies the URL to be used for posting the diagram\n * to a backend in <save>.\n */\nmxEditor.prototype.urlPost = null;\n\n/**\n * Variable: urlImage\n *\n * Specifies the URL to be used for creating a bitmap of\n * the graph in the image action.\n */\nmxEditor.prototype.urlImage = null;\n\n/**\n * Group: Autolayout\n */\n\n/**\n * Variable: horizontalFlow\n *\n * Specifies the direction of the flow\n * in the diagram. This is used in the\n * layout algorithms. Default is false,\n * ie. vertical flow.\n */\nmxEditor.prototype.horizontalFlow = false;\n\n/**\n * Variable: layoutDiagram\n *\n * Specifies if the top-level elements in the\n * diagram should be layed out using a vertical\n * or horizontal stack depending on the setting\n * of <horizontalFlow>. The spacing between the\n * swimlanes is specified by <swimlaneSpacing>.\n * Default is false.\n * \n * If the top-level elements are swimlanes, then\n * the intra-swimlane layout is activated by\n * the <layoutSwimlanes> switch.\n */\nmxEditor.prototype.layoutDiagram = false;\n\n/**\n * Variable: swimlaneSpacing\n *\n * Specifies the spacing between swimlanes if\n * automatic layout is turned on in\n * <layoutDiagram>. Default is 0.\n */\nmxEditor.prototype.swimlaneSpacing = 0;\n\n/**\n * Variable: maintainSwimlanes\n * \n * Specifies if the swimlanes should be kept at the same\n * width or height depending on the setting of\n * <horizontalFlow>.  Default is false.\n * \n * For horizontal flows, all swimlanes\n * have the same height and for vertical flows, all swimlanes\n * have the same width. Furthermore, the swimlanes are\n * automatically \"stacked\" if <layoutDiagram> is true.\n */\nmxEditor.prototype.maintainSwimlanes = false;\n\n/**\n * Variable: layoutSwimlanes\n *\n * Specifies if the children of swimlanes should\n * be layed out, either vertically or horizontally\n * depending on <horizontalFlow>.\n * Default is false.\n */\nmxEditor.prototype.layoutSwimlanes = false;\n\n/**\n * Group: Attribute Cycling\n */\n \n/**\n * Variable: cycleAttributeValues\n * \n * Specifies the attribute values to be cycled when\n * inserting new swimlanes. Default is an empty\n * array.\n */\nmxEditor.prototype.cycleAttributeValues = null;\n\n/**\n * Variable: cycleAttributeIndex\n * \n * Index of the last consumed attribute index. If a new\n * swimlane is inserted, then the <cycleAttributeValues>\n * at this index will be used as the value for\n * <cycleAttributeName>. Default is 0.\n */\nmxEditor.prototype.cycleAttributeIndex = 0;\n\n/**\n * Variable: cycleAttributeName\n * \n * Name of the attribute to be assigned a <cycleAttributeValues>\n * when inserting new swimlanes. Default is fillColor.\n */\nmxEditor.prototype.cycleAttributeName = 'fillColor';\n\n/**\n * Group: Windows\n */\n\n/**\n * Variable: tasks\n * \n * Holds the <mxWindow> created in <showTasks>.\n */\nmxEditor.prototype.tasks = null;\n\n/**\n * Variable: tasksWindowImage\n *\n * Icon for the tasks window.\n */\nmxEditor.prototype.tasksWindowImage = null;\n\n/**\n * Variable: tasksTop\n * \n * Specifies the top coordinate of the tasks window in pixels.\n * Default is 20.\n */\nmxEditor.prototype.tasksTop = 20;\n\n/**\n * Variable: help\n * \n * Holds the <mxWindow> created in <showHelp>.\n */\nmxEditor.prototype.help = null;\n\n/**\n * Variable: helpWindowImage\n *\n * Icon for the help window.\n */\nmxEditor.prototype.helpWindowImage = null;\n\n/**\n * Variable: urlHelp\n *\n * Specifies the URL to be used for the contents of the\n * Online Help window. This is usually specified in the\n * resources file under urlHelp for language-specific\n * online help support.\n */\nmxEditor.prototype.urlHelp = null;\n\n/**\n * Variable: helpWidth\n * \n * Specifies the width of the help window in pixels.\n * Default is 300.\n */\nmxEditor.prototype.helpWidth = 300;\n\t\n/**\n * Variable: helpWidth\n * \n * Specifies the width of the help window in pixels.\n * Default is 260.\n */\nmxEditor.prototype.helpHeight = 260;\n\n/**\n * Variable: propertiesWidth\n * \n * Specifies the width of the properties window in pixels.\n * Default is 240.\n */\nmxEditor.prototype.propertiesWidth = 240;\n\t\t\n/**\n * Variable: propertiesHeight\n * \n * Specifies the height of the properties window in pixels.\n * If no height is specified then the window will be automatically\n * sized to fit its contents. Default is null.\n */\nmxEditor.prototype.propertiesHeight = null;\n\t\t\n/**\n * Variable: movePropertiesDialog\n *\n * Specifies if the properties dialog should be automatically\n * moved near the cell it is displayed for, otherwise the\n * dialog is not moved. This value is only taken into \n * account if the dialog is already visible. Default is false.\n */\nmxEditor.prototype.movePropertiesDialog = false;\n\n/**\n * Variable: validating\n *\n * Specifies if <mxGraph.validateGraph> should automatically be invoked after\n * each change. Default is false.\n */\nmxEditor.prototype.validating = false;\n\n/**\n * Variable: modified\n *\n * True if the graph has been modified since it was last saved.\n */\nmxEditor.prototype.modified = false;\n\n/**\n * Function: isModified\n * \n * Returns <modified>.\n */\nmxEditor.prototype.isModified = function ()\n{\n\treturn this.modified;\n};\n\n/**\n * Function: setModified\n * \n * Sets <modified> to the specified boolean value.\n */\nmxEditor.prototype.setModified = function (value)\n{\n\tthis.modified = value;\n};\n\n/**\n * Function: addActions\n *\n * Adds the built-in actions to the editor instance.\n *\n * save - Saves the graph using <urlPost>.\n * print - Shows the graph in a new print preview window.\n * show - Shows the graph in a new window.\n * exportImage - Shows the graph as a bitmap image using <getUrlImage>.\n * refresh - Refreshes the graph's display.\n * cut - Copies the current selection into the clipboard\n * and removes it from the graph.\n * copy - Copies the current selection into the clipboard.\n * paste - Pastes the clipboard into the graph.\n * delete - Removes the current selection from the graph.\n * group - Puts the current selection into a new group.\n * ungroup - Removes the selected groups and selects the children.\n * undo - Undoes the last change on the graph model.\n * redo - Redoes the last change on the graph model.\n * zoom - Sets the zoom via a dialog.\n * zoomIn - Zooms into the graph.\n * zoomOut - Zooms out of the graph\n * actualSize - Resets the scale and translation on the graph.\n * fit - Changes the scale so that the graph fits into the window.\n * showProperties - Shows the properties dialog.\n * selectAll - Selects all cells.\n * selectNone - Clears the selection.\n * selectVertices - Selects all vertices.\n * selectEdges = Selects all edges.\n * edit - Starts editing the current selection cell.\n * enterGroup - Drills down into the current selection cell.\n * exitGroup - Moves up in the drilling hierachy\n * home - Moves to the topmost parent in the drilling hierarchy\n * selectPrevious - Selects the previous cell.\n * selectNext - Selects the next cell.\n * selectParent - Selects the parent of the selection cell.\n * selectChild - Selects the first child of the selection cell.\n * collapse - Collapses the currently selected cells.\n * expand - Expands the currently selected cells.\n * bold - Toggle bold text style.\n * italic - Toggle italic text style.\n * underline - Toggle underline text style.\n * alignCellsLeft - Aligns the selection cells at the left.\n * alignCellsCenter - Aligns the selection cells in the center.\n * alignCellsRight - Aligns the selection cells at the right.\n * alignCellsTop - Aligns the selection cells at the top.\n * alignCellsMiddle - Aligns the selection cells in the middle.\n * alignCellsBottom - Aligns the selection cells at the bottom.\n * alignFontLeft - Sets the horizontal text alignment to left.\n * alignFontCenter - Sets the horizontal text alignment to center.\n * alignFontRight - Sets the horizontal text alignment to right.\n * alignFontTop - Sets the vertical text alignment to top.\n * alignFontMiddle - Sets the vertical text alignment to middle.\n * alignFontBottom - Sets the vertical text alignment to bottom.\n * toggleTasks - Shows or hides the tasks window.\n * toggleHelp - Shows or hides the help window.\n * toggleOutline - Shows or hides the outline window.\n * toggleConsole - Shows or hides the console window.\n */\nmxEditor.prototype.addActions = function ()\n{\n\tthis.addAction('save', function(editor)\n\t{\n\t\teditor.save();\n\t});\n\t\n\tthis.addAction('print', function(editor)\n\t{\n\t\tvar preview = new mxPrintPreview(editor.graph, 1);\n\t\tpreview.open();\n\t});\n\t\n\tthis.addAction('show', function(editor)\n\t{\n\t\tmxUtils.show(editor.graph, null, 10, 10);\n\t});\n\n\tthis.addAction('exportImage', function(editor)\n\t{\n\t\tvar url = editor.getUrlImage();\n\t\t\n\t\tif (url == null || mxClient.IS_LOCAL)\n\t\t{\n\t\t\teditor.execute('show');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar node = mxUtils.getViewXml(editor.graph, 1);\n\t\t\tvar xml = mxUtils.getXml(node, '\\n');\n\n\t\t\tmxUtils.submit(url, editor.postParameterName + '=' +\n\t\t\t\tencodeURIComponent(xml), document, '_blank');\n\t\t}\n\t});\n\t\n\tthis.addAction('refresh', function(editor)\n\t{\n\t\teditor.graph.refresh();\n\t});\n\t\n\tthis.addAction('cut', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.cut(editor.graph);\n\t\t}\n\t});\n\t\n\tthis.addAction('copy', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.copy(editor.graph);\n\t\t}\n\t});\n\t\n\tthis.addAction('paste', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.paste(editor.graph);\n\t\t}\n\t});\n\t\n\tthis.addAction('delete', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.removeCells();\n\t\t}\n\t});\n\t\n\tthis.addAction('group', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setSelectionCell(editor.groupCells());\n\t\t}\n\t});\n\t\n\tthis.addAction('ungroup', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setSelectionCells(editor.graph.ungroupCells());\n\t\t}\n\t});\n\t\n\tthis.addAction('removeFromParent', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.removeCellsFromParent();\n\t\t}\n\t});\n\t\n\tthis.addAction('undo', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.undo();\n\t\t}\n\t});\n\t\n\tthis.addAction('redo', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.redo();\n\t\t}\n\t});\n\t\n\tthis.addAction('zoomIn', function(editor)\n\t{\n\t\teditor.graph.zoomIn();\n\t});\n\t\n\tthis.addAction('zoomOut', function(editor)\n\t{\n\t\teditor.graph.zoomOut();\n\t});\n\t\n\tthis.addAction('actualSize', function(editor)\n\t{\n\t\teditor.graph.zoomActual();\n\t});\n\t\n\tthis.addAction('fit', function(editor)\n\t{\n\t\teditor.graph.fit();\n\t});\n\t\n\tthis.addAction('showProperties', function(editor, cell)\n\t{\n\t\teditor.showProperties(cell);\n\t});\n\t\n\tthis.addAction('selectAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectAll();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectNone', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.clearSelection();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectVertices', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectVertices();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectEdges', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectEdges();\n\t\t}\n\t});\n\t\n\tthis.addAction('edit', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled() &&\n\t\t\teditor.graph.isCellEditable(cell))\n\t\t{\n\t\t\teditor.graph.startEditingAtCell(cell);\n\t\t}\n\t});\n\t\n\tthis.addAction('toBack', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.orderCells(true);\n\t\t}\n\t});\n\t\n\tthis.addAction('toFront', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.orderCells(false);\n\t\t}\n\t});\n\t\n\tthis.addAction('enterGroup', function(editor, cell)\n\t{\n\t\teditor.graph.enterGroup(cell);\n\t});\n\t\n\tthis.addAction('exitGroup', function(editor)\n\t{\n\t\teditor.graph.exitGroup();\n\t});\n\t\n\tthis.addAction('home', function(editor)\n\t{\n\t\teditor.graph.home();\n\t});\n\t\n\tthis.addAction('selectPrevious', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectPreviousCell();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectNext', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectNextCell();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectParent', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectParentCell();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectChild', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectChildCell();\n\t\t}\n\t});\n\t\n\tthis.addAction('collapse', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.foldCells(true);\n\t\t}\n\t});\n\t\n\tthis.addAction('collapseAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tvar cells = editor.graph.getChildVertices();\n\t\t\teditor.graph.foldCells(true, false, cells);\n\t\t}\n\t});\n\t\n\tthis.addAction('expand', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.foldCells(false);\n\t\t}\n\t});\n\t\n\tthis.addAction('expandAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tvar cells = editor.graph.getChildVertices();\n\t\t\teditor.graph.foldCells(false, false, cells);\n\t\t}\n\t});\n\t\n\tthis.addAction('bold', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_BOLD);\n\t\t}\n\t});\n\t\n\tthis.addAction('italic', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_ITALIC);\n\t\t}\n\t});\n\t\n\tthis.addAction('underline', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_UNDERLINE);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsLeft', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_LEFT);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignCellsCenter', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_CENTER);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignCellsRight', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_RIGHT);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignCellsTop', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_TOP);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignCellsMiddle', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_MIDDLE);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignCellsBottom', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_BOTTOM);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignFontLeft', function(editor)\n\t{\n\t\t\n\t\teditor.graph.setCellStyles(\n\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\tmxConstants.ALIGN_LEFT);\n\t});\n\t\n\tthis.addAction('alignFontCenter', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\t\tmxConstants.ALIGN_CENTER);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignFontRight', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\t\tmxConstants.ALIGN_RIGHT);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignFontTop', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_TOP);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignFontMiddle', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_MIDDLE);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignFontBottom', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_BOTTOM);\n\t\t}\n\t});\n\t\n\tthis.addAction('zoom', function(editor)\n\t{\n\t\tvar current = editor.graph.getView().scale*100;\n\t\tvar scale = parseFloat(mxUtils.prompt(\n\t\t\tmxResources.get(editor.askZoomResource) ||\n\t\t\teditor.askZoomResource,\n\t\t\tcurrent))/100;\n\n\t\tif (!isNaN(scale))\n\t\t{\n\t\t\teditor.graph.getView().setScale(scale);\n\t\t}\n\t});\n\t\n\tthis.addAction('toggleTasks', function(editor)\n\t{\n\t\tif (editor.tasks != null)\n\t\t{\n\t\t\teditor.tasks.setVisible(!editor.tasks.isVisible());\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.showTasks();\n\t\t}\n\t});\n\t\n\tthis.addAction('toggleHelp', function(editor)\n\t{\n\t\tif (editor.help != null)\n\t\t{\n\t\t\teditor.help.setVisible(!editor.help.isVisible());\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.showHelp();\n\t\t}\n\t});\n\t\n\tthis.addAction('toggleOutline', function(editor)\n\t{\n\t\tif (editor.outline == null)\n\t\t{\n\t\t\teditor.showOutline();\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.outline.setVisible(!editor.outline.isVisible());\n\t\t}\n\t});\n\t\n\tthis.addAction('toggleConsole', function(editor)\n\t{\n\t\tmxLog.setVisible(!mxLog.isVisible());\n\t});\n};\n\n/**\n * Function: configure\n *\n * Configures the editor using the specified node. To load the\n * configuration from a given URL the following code can be used to obtain\n * the XML node.\n * \n * (code)\n * var node = mxUtils.load(url).getDocumentElement();\n * (end)\n * \n * Parameters:\n * \n * node - XML node that contains the configuration.\n */\nmxEditor.prototype.configure = function (node)\n{\n\tif (node != null)\n\t{\n\t\t// Creates a decoder for the XML data\n\t\t// and uses it to configure the editor\n\t\tvar dec = new mxCodec(node.ownerDocument);\n\t\tdec.decode(node, this);\n\t\t\n\t\t// Resets the counters, modified state and\n\t\t// command history\n\t\tthis.resetHistory();\n\t}\n};\n\n/**\n * Function: resetFirstTime\n * \n * Resets the cookie that is used to remember if the editor has already\n * been used.\n */\nmxEditor.prototype.resetFirstTime = function ()\n{\n\tdocument.cookie =\n\t\t'mxgraph=seen; expires=Fri, 27 Jul 2001 02:47:11 UTC; path=/';\n};\n\n/**\n * Function: resetHistory\n * \n * Resets the command history, modified state and counters.\n */\nmxEditor.prototype.resetHistory = function ()\n{\n\tthis.lastSnapshot = new Date().getTime();\n\tthis.undoManager.clear();\n\tthis.ignoredChanges = 0;\n\tthis.setModified(false);\n};\n\n/**\n * Function: addAction\n * \n * Binds the specified actionname to the specified function.\n * \n * Parameters:\n * \n * actionname - String that specifies the name of the action\n * to be added.\n * funct - Function that implements the new action. The first\n * argument of the function is the editor it is used\n * with, the second argument is the cell it operates\n * upon.\n * \n * Example:\n * (code)\n * editor.addAction('test', function(editor, cell)\n * {\n * \t\tmxUtils.alert(\"test \"+cell);\n * });\n * (end)\n */\nmxEditor.prototype.addAction = function (actionname, funct)\n{\n\tthis.actions[actionname] = funct;\n};\n\n/**\n * Function: execute\n * \n * Executes the function with the given name in <actions> passing the\n * editor instance and given cell as the first and second argument. All\n * additional arguments are passed to the action as well. This method\n * contains a try-catch block and displays an error message if an action\n * causes an exception. The exception is re-thrown after the error\n * message was displayed.\n * \n * Example:\n * \n * (code)\n * editor.execute(\"showProperties\", cell);\n * (end)\n */\nmxEditor.prototype.execute = function (actionname, cell, evt)\n{\n\tvar action = this.actions[actionname];\n\t\n\tif (action != null)\n\t{\n\t\ttry\n\t\t{\n\t\t\t// Creates the array of arguments by replacing the actionname\n\t\t\t// with the editor instance in the args of this function\n\t\t\tvar args = arguments;\n\t\t\targs[0] = this;\n\t\t\t\n\t\t\t// Invokes the function on the editor using the args\n\t\t\taction.apply(this, args);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxUtils.error('Cannot execute ' + actionname +\n\t\t\t\t': ' + e.message, 280, true);\n\t\t\t\n\t\t\tthrow e;\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxUtils.error('Cannot find action '+actionname, 280, true);\n\t}\n};\n\n/**\n * Function: addTemplate\n * \n * Adds the specified template under the given name in <templates>.\n */\nmxEditor.prototype.addTemplate = function (name, template)\n{\n\tthis.templates[name] = template;\n};\n\n/**\n * Function: getTemplate\n * \n * Returns the template for the given name.\n */\nmxEditor.prototype.getTemplate = function (name)\n{\n\treturn this.templates[name];\n};\n\n/**\n * Function: createGraph\n * \n * Creates the <graph> for the editor. The graph is created with no\n * container and is initialized from <setGraphContainer>.\n */\nmxEditor.prototype.createGraph = function ()\n{\n\tvar graph = new mxGraph(null, null, this.graphRenderHint);\n\t\n\t// Enables rubberband, tooltips, panning\n\tgraph.setTooltips(true);\n\tgraph.setPanning(true);\n\n\t// Overrides the dblclick method on the graph to\n\t// invoke the dblClickAction for a cell and reset\n\t// the selection tool in the toolbar\n\tthis.installDblClickHandler(graph);\n\t\n\t// Installs the command history\n\tthis.installUndoHandler(graph);\n\n\t// Installs the handlers for the root event\n\tthis.installDrillHandler(graph);\n\t\n\t// Installs the handler for validation\n\tthis.installChangeHandler(graph);\n\n\t// Installs the handler for calling the\n\t// insert function and consume the\n\t// event if an insert function is defined\n\tthis.installInsertHandler(graph);\n\n\t// Redirects the function for creating the\n\t// popupmenu items\n\tgraph.popupMenuHandler.factoryMethod =\n\t\tmxUtils.bind(this, function(menu, cell, evt)\n\t\t{\n\t\t\treturn this.createPopupMenu(menu, cell, evt);\n\t\t});\n\n\t// Redirects the function for creating\n\t// new connections in the diagram\n\tgraph.connectionHandler.factoryMethod =\n\t\tmxUtils.bind(this, function(source, target)\n\t\t{\n\t\t\treturn this.createEdge(source, target);\n\t\t});\n\t\n\t// Maintains swimlanes and installs autolayout\n\tthis.createSwimlaneManager(graph);\n\tthis.createLayoutManager(graph);\n\t\n\treturn graph;\n};\n\n/**\n * Function: createSwimlaneManager\n * \n * Sets the graph's container using <mxGraph.init>.\n */\nmxEditor.prototype.createSwimlaneManager = function (graph)\n{\n\tvar swimlaneMgr = new mxSwimlaneManager(graph, false);\n\n\tswimlaneMgr.isHorizontal = mxUtils.bind(this, function()\n\t{\n\t\treturn this.horizontalFlow;\n\t});\n\t\n\tswimlaneMgr.isEnabled = mxUtils.bind(this, function()\n\t{\n\t\treturn this.maintainSwimlanes;\n\t});\n\t\n\treturn swimlaneMgr;\n};\n\n/**\n * Function: createLayoutManager\n * \n * Creates a layout manager for the swimlane and diagram layouts, that\n * is, the locally defined inter- and intraswimlane layouts.\n */\nmxEditor.prototype.createLayoutManager = function (graph)\n{\n\tvar layoutMgr = new mxLayoutManager(graph);\n\t\n\tvar self = this; // closure\n\tlayoutMgr.getLayout = function(cell)\n\t{\n\t\tvar layout = null;\n\t\tvar model = self.graph.getModel();\n\t\t\n\t\tif (model.getParent(cell) != null)\n\t\t{\n\t\t\t// Executes the swimlane layout if a child of\n\t\t\t// a swimlane has been changed. The layout is\n\t\t\t// lazy created in createSwimlaneLayout.\n\t\t\tif (self.layoutSwimlanes &&\n\t\t\t\tgraph.isSwimlane(cell))\n\t\t\t{\n\t\t\t\tif (self.swimlaneLayout == null)\n\t\t\t\t{\n\t\t\t\t\tself.swimlaneLayout = self.createSwimlaneLayout();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlayout = self.swimlaneLayout;\n\t\t\t}\n\t\t\t\n\t\t\t// Executes the diagram layout if the modified\n\t\t\t// cell is a top-level cell. The layout is\n\t\t\t// lazy created in createDiagramLayout.\n\t\t\telse if (self.layoutDiagram &&\n\t\t\t\t(graph.isValidRoot(cell) ||\n\t\t\t\tmodel.getParent(model.getParent(cell)) == null))\n\t\t\t{\n\t\t\t\tif (self.diagramLayout == null)\n\t\t\t\t{\n\t\t\t\t\tself.diagramLayout = self.createDiagramLayout();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlayout = self.diagramLayout;\n\t\t\t}\n\t\t}\n\t\t\t\n\t\treturn layout;\n\t};\n\t\n\treturn layoutMgr;\n};\n\n/**\n * Function: setGraphContainer\n * \n * Sets the graph's container using <mxGraph.init>.\n */\nmxEditor.prototype.setGraphContainer = function (container)\n{\n\tif (this.graph.container == null)\n\t{\n\t\t// Creates the graph instance inside the given container and render hint\n\t\t//this.graph = new mxGraph(container, null, this.graphRenderHint);\n\t\tthis.graph.init(container);\n\n\t\t// Install rubberband selection as the last\n\t\t// action handler in the chain\n\t\tthis.rubberband = new mxRubberband(this.graph);\n\n\t\t// Disables the context menu\n\t\tif (this.disableContextMenu)\n\t\t{\n\t\t\tmxEvent.disableContextMenu(container);\n\t\t}\n\n\t\t// Workaround for stylesheet directives in IE\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tnew mxDivResizer(container);\n\t\t}\n\t}\n};\n\n/**\n * Function: installDblClickHandler\n * \n * Overrides <mxGraph.dblClick> to invoke <dblClickAction>\n * on a cell and reset the selection tool in the toolbar.\n */\nmxEditor.prototype.installDblClickHandler = function (graph)\n{\n\t// Installs a listener for double click events\n\tgraph.addListener(mxEvent.DOUBLE_CLICK,\n\t\tmxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar cell = evt.getProperty('cell');\n\t\t\t\n\t\t\tif (cell != null &&\n\t\t\t\tgraph.isEnabled() &&\n\t\t\t\tthis.dblClickAction != null)\n\t\t\t{\n\t\t\t\tthis.execute(this.dblClickAction, cell);\n\t\t\t\tevt.consume();\n\t\t\t}\n\t\t})\n\t);\n};\n\t\t\n/**\n * Function: installUndoHandler\n * \n * Adds the <undoManager> to the graph model and the view.\n */\nmxEditor.prototype.installUndoHandler = function (graph)\n{\t\t\t\t\n\tvar listener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tvar edit = evt.getProperty('edit');\n\t\tthis.undoManager.undoableEditHappened(edit);\n\t});\n\t\n\tgraph.getModel().addListener(mxEvent.UNDO, listener);\n\tgraph.getView().addListener(mxEvent.UNDO, listener);\n\n\t// Keeps the selection state in sync\n\tvar undoHandler = function(sender, evt)\n\t{\n\t\tvar changes = evt.getProperty('edit').changes;\n\t\tgraph.setSelectionCells(graph.getSelectionCellsForChanges(changes));\n\t};\n\t\n\tthis.undoManager.addListener(mxEvent.UNDO, undoHandler);\n\tthis.undoManager.addListener(mxEvent.REDO, undoHandler);\n};\n\t\t\n/**\n * Function: installDrillHandler\n * \n * Installs listeners for dispatching the <root> event.\n */\nmxEditor.prototype.installDrillHandler = function (graph)\n{\t\t\t\t\n\tvar listener = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t});\n\t\n\tgraph.getView().addListener(mxEvent.DOWN, listener);\n\tgraph.getView().addListener(mxEvent.UP, listener);\n};\n\n/**\n * Function: installChangeHandler\n * \n * Installs the listeners required to automatically validate\n * the graph. On each change of the root, this implementation\n * fires a <root> event.\n */\nmxEditor.prototype.installChangeHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\t// Updates the modified state\n\t\tthis.setModified(true);\n\n\t\t// Automatically validates the graph\n\t\t// after each change\n\t\tif (this.validating == true)\n\t\t{\n\t\t\tgraph.validateGraph();\n\t\t}\n\n\t\t// Checks if the root has been changed\n\t\tvar changes = evt.getProperty('edit').changes;\n\t\t\n\t\tfor (var i = 0; i < changes.length; i++)\n\t\t{\n\t\t\tvar change = changes[i];\n\t\t\t\n\t\t\tif (change instanceof mxRootChange ||\n\t\t\t\t(change instanceof mxValueChange &&\n\t\t\t\tchange.cell == this.graph.model.root) ||\n\t\t\t\t(change instanceof mxCellAttributeChange &&\n\t\t\t\tchange.cell == this.graph.model.root))\n\t\t\t{\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\t\n\tgraph.getModel().addListener(mxEvent.CHANGE, listener);\n};\n\n/**\n * Function: installInsertHandler\n * \n * Installs the handler for invoking <insertFunction> if\n * one is defined.\n */\nmxEditor.prototype.installInsertHandler = function (graph)\n{\n\tvar self = this; // closure\n\tvar insertHandler =\n\t{\n\t\tmouseDown: function(sender, me)\n\t\t{\n\t\t\tif (self.insertFunction != null &&\n\t\t\t\t!me.isPopupTrigger() &&\n\t\t\t\t(self.forcedInserting ||\n\t\t\t\tme.getState() == null))\n\t\t\t{\n\t\t\t\tself.graph.clearSelection();\n\t\t\t\tself.insertFunction(me.getEvent(), me.getCell());\n\n\t\t\t\t// Consumes the rest of the events\n\t\t\t\t// for this gesture (down, move, up)\n\t\t\t\tthis.isActive = true;\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t},\n\t\t\n\t\tmouseMove: function(sender, me)\n\t\t{\n\t\t\tif (this.isActive)\n\t\t\t{\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t},\n\t\t\n\t\tmouseUp: function(sender, me)\n\t\t{\n\t\t\tif (this.isActive)\n\t\t\t{\n\t\t\t\tthis.isActive = false;\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t}\n\t};\n\t\n\tgraph.addMouseListener(insertHandler);\n};\n\n/**\n * Function: createDiagramLayout\n * \n * Creates the layout instance used to layout the\n * swimlanes in the diagram.\n */\nmxEditor.prototype.createDiagramLayout = function ()\n{\n\tvar gs = this.graph.gridSize;\n\tvar layout = new mxStackLayout(this.graph, !this.horizontalFlow,\n\t\t this.swimlaneSpacing, 2*gs, 2*gs);\n\t\n\t// Overrides isIgnored to only take into account swimlanes\n\tlayout.isVertexIgnored = function(cell)\n\t{\n\t\treturn !layout.graph.isSwimlane(cell);\n\t};\n\t\n\treturn layout;\n};\n\n/**\n * Function: createSwimlaneLayout\n * \n * Creates the layout instance used to layout the\n * children of each swimlane.\n */\nmxEditor.prototype.createSwimlaneLayout = function ()\n{\n\treturn new mxCompactTreeLayout(this.graph, this.horizontalFlow);\n};\n\n/**\n * Function: createToolbar\n * \n * Creates the <toolbar> with no container.\n */\nmxEditor.prototype.createToolbar = function ()\n{\n\treturn new mxDefaultToolbar(null, this);\n};\n\n/**\n * Function: setToolbarContainer\n * \n * Initializes the toolbar for the given container.\n */\nmxEditor.prototype.setToolbarContainer = function (container)\n{\n\tthis.toolbar.init(container);\n\t\n\t// Workaround for stylesheet directives in IE\n\tif (mxClient.IS_QUIRKS)\n\t{\n\t\tnew mxDivResizer(container);\n\t}\n};\n\n/**\n * Function: setStatusContainer\n * \n * Creates the <status> using the specified container.\n * \n * This implementation adds listeners in the editor to \n * display the last saved time and the current filename \n * in the status bar.\n * \n * Parameters:\n * \n * container - DOM node that will contain the statusbar.\n */\nmxEditor.prototype.setStatusContainer = function (container)\n{\n\tif (this.status == null)\n\t{\n\t\tthis.status = container;\n\t\t\n\t\t// Prints the last saved time in the status bar\n\t\t// when files are saved\n\t\tthis.addListener(mxEvent.SAVE, mxUtils.bind(this, function()\n\t\t{\n\t\t\tvar tstamp = new Date().toLocaleString();\n\t\t\tthis.setStatus((mxResources.get(this.lastSavedResource) ||\n\t\t\t\tthis.lastSavedResource)+': '+tstamp);\n\t\t}));\n\t\t\n\t\t// Updates the statusbar to display the filename\n\t\t// when new files are opened\n\t\tthis.addListener(mxEvent.OPEN, mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.setStatus((mxResources.get(this.currentFileResource) ||\n\t\t\t\tthis.currentFileResource)+': '+this.filename);\n\t\t}));\n\t\t\n\t\t// Workaround for stylesheet directives in IE\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tnew mxDivResizer(container);\n\t\t}\n\t}\n};\n\n/**\n * Function: setStatus\n * \n * Display the specified message in the status bar.\n * \n * Parameters:\n * \n * message - String the specified the message to\n * be displayed.\n */\nmxEditor.prototype.setStatus = function (message)\n{\n\tif (this.status != null && message != null)\n\t{\n\t\tthis.status.innerHTML = message;\n\t}\n};\n\n/**\n * Function: setTitleContainer\n * \n * Creates a listener to update the inner HTML of the\n * specified DOM node with the value of <getTitle>.\n * \n * Parameters:\n * \n * container - DOM node that will contain the title.\n */\nmxEditor.prototype.setTitleContainer = function (container)\n{\n\tthis.addListener(mxEvent.ROOT, mxUtils.bind(this, function(sender)\n\t{\n\t\tcontainer.innerHTML = this.getTitle();\n\t}));\n\n\t// Workaround for stylesheet directives in IE\n\tif (mxClient.IS_QUIRKS)\n\t{\n\t\tnew mxDivResizer(container);\n\t}\n};\n\n/**\n * Function: treeLayout\n * \n * Executes a vertical or horizontal compact tree layout\n * using the specified cell as an argument. The cell may\n * either be a group or the root of a tree.\n * \n * Parameters:\n * \n * cell - <mxCell> to use in the compact tree layout.\n * horizontal - Optional boolean to specify the tree's\n * orientation. Default is true.\n */\nmxEditor.prototype.treeLayout = function (cell, horizontal)\n{\n\tif (cell != null)\n\t{\n\t\tvar layout = new mxCompactTreeLayout(this.graph, horizontal);\n\t\tlayout.execute(cell);\n\t}\n};\n\n/**\n * Function: getTitle\n * \n * Returns the string value for the current root of the\n * diagram.\n */\nmxEditor.prototype.getTitle = function ()\n{\n\tvar title = '';\n\tvar graph = this.graph;\n\tvar cell = graph.getCurrentRoot();\n\t\n\twhile (cell != null &&\n\t\t   graph.getModel().getParent(\n\t\t\t\tgraph.getModel().getParent(cell)) != null)\n\t{\n\t\t// Append each label of a valid root\n\t\tif (graph.isValidRoot(cell))\n\t\t{\n\t\t\ttitle = ' > ' +\n\t\t\tgraph.convertValueToString(cell) + title;\n\t\t}\n\t\t\n\t\tcell = graph.getModel().getParent(cell);\n\t}\n\t\n\tvar prefix = this.getRootTitle();\n\t\n\treturn prefix + title;\n};\n\n/**\n * Function: getRootTitle\n * \n * Returns the string value of the root cell in\n * <mxGraph.model>.\n */\nmxEditor.prototype.getRootTitle = function ()\n{\n\tvar root = this.graph.getModel().getRoot();\n\treturn this.graph.convertValueToString(root);\n};\n\n/**\n * Function: undo\n * \n * Undo the last change in <graph>.\n */\nmxEditor.prototype.undo = function ()\n{\n\tthis.undoManager.undo();\n};\n\n/**\n * Function: redo\n * \n * Redo the last change in <graph>.\n */\nmxEditor.prototype.redo = function ()\n{\n\tthis.undoManager.redo();\n};\n\n/**\n * Function: groupCells\n * \n * Invokes <createGroup> to create a new group cell and the invokes\n * <mxGraph.groupCells>, using the grid size of the graph as the spacing\n * in the group's content area.\n */\nmxEditor.prototype.groupCells = function ()\n{\n\tvar border = (this.groupBorderSize != null) ?\n\t\tthis.groupBorderSize :\n\t\tthis.graph.gridSize;\n\treturn this.graph.groupCells(this.createGroup(), border);\n};\n\n/**\n * Function: createGroup\n * \n * Creates and returns a clone of <defaultGroup> to be used\n * as a new group cell in <group>.\n */\nmxEditor.prototype.createGroup = function ()\n{\n\tvar model = this.graph.getModel();\n\t\n\treturn model.cloneCell(this.defaultGroup);\n};\n\n/**\n * Function: open\n * \n * Opens the specified file synchronously and parses it using\n * <readGraphModel>. It updates <filename> and fires an <open>-event after\n * the file has been opened. Exceptions should be handled as follows:\n * \n * (code)\n * try\n * {\n *   editor.open(filename);\n * }\n * catch (e)\n * {\n *   mxUtils.error('Cannot open ' + filename +\n *     ': ' + e.message, 280, true);\n * }\n * (end)\n *\n * Parameters:\n * \n * filename - URL of the file to be opened.\n */\nmxEditor.prototype.open = function (filename)\n{\n\tif (filename != null)\n\t{\n\t\tvar xml = mxUtils.load(filename).getXml();\n\t\tthis.readGraphModel(xml.documentElement);\n\t\tthis.filename = filename;\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.OPEN, 'filename', filename));\n\t}\n};\n\n/**\n * Function: readGraphModel\n * \n * Reads the specified XML node into the existing graph model and resets\n * the command history and modified state.\n */\nmxEditor.prototype.readGraphModel = function (node)\n{\n\tvar dec = new mxCodec(node.ownerDocument);\n\tdec.decode(node, this.graph.getModel());\n\tthis.resetHistory();\n};\n\n/**\n * Function: save\n * \n * Posts the string returned by <writeGraphModel> to the given URL or the\n * URL returned by <getUrlPost>. The actual posting is carried out by\n * <postDiagram>. If the URL is null then the resulting XML will be\n * displayed using <mxUtils.popup>. Exceptions should be handled as\n * follows:\n * \n * (code)\n * try\n * {\n *   editor.save();\n * }\n * catch (e)\n * {\n *   mxUtils.error('Cannot save : ' + e.message, 280, true);\n * }\n * (end)\n */\nmxEditor.prototype.save = function (url, linefeed)\n{\n\t// Gets the URL to post the data to\n\turl = url || this.getUrlPost();\n\n\t// Posts the data if the URL is not empty\n\tif (url != null && url.length > 0)\n\t{\n\t\tvar data = this.writeGraphModel(linefeed);\n\t\tthis.postDiagram(url, data);\n\t\t\n\t\t// Resets the modified flag\n\t\tthis.setModified(false);\n\t}\n\t\n\t// Dispatches a save event\n\tthis.fireEvent(new mxEventObject(mxEvent.SAVE, 'url', url));\n};\n\n/**\n * Function: postDiagram\n * \n * Hook for subclassers to override the posting of a diagram\n * represented by the given node to the given URL. This fires\n * an asynchronous <post> event if the diagram has been posted.\n * \n * Example:\n * \n * To replace the diagram with the diagram in the response, use the\n * following code.\n * \n * (code)\n * editor.addListener(mxEvent.POST, function(sender, evt)\n * {\n *   // Process response (replace diagram)\n *   var req = evt.getProperty('request');\n *   var root = req.getDocumentElement();\n *   editor.graph.readGraphModel(root)\n * });\n * (end)\n */\nmxEditor.prototype.postDiagram = function (url, data)\n{\n\tif (this.escapePostData)\n\t{\n\t\tdata = encodeURIComponent(data);\n\t}\n\n\tmxUtils.post(url, this.postParameterName+'='+data,\n\t\tmxUtils.bind(this, function(req)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.POST,\n\t\t\t\t'request', req, 'url', url, 'data', data));\n\t\t})\n\t);\n};\n\n/**\n * Function: writeGraphModel\n * \n * Hook to create the string representation of the diagram. The default\n * implementation uses an <mxCodec> to encode the graph model as\n * follows:\n * \n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(this.graph.getModel());\n * return mxUtils.getXml(node, this.linefeed);\n * (end)\n * \n * Parameters:\n * \n * linefeed - Optional character to be used as the linefeed. Default is\n * <linefeed>.\n */\nmxEditor.prototype.writeGraphModel = function (linefeed)\n{\n\tlinefeed = (linefeed != null) ? linefeed : this.linefeed;\n\tvar enc = new mxCodec();\n\tvar node = enc.encode(this.graph.getModel());\n\n\treturn mxUtils.getXml(node, linefeed);\n};\n\n/**\n * Function: getUrlPost\n * \n * Returns the URL to post the diagram to. This is used\n * in <save>. The default implementation returns <urlPost>,\n * adding <code>?draft=true</code>.\n */\nmxEditor.prototype.getUrlPost = function ()\n{\n\treturn this.urlPost;\n};\n\n/**\n * Function: getUrlImage\n * \n * Returns the URL to create the image with. This is typically\n * the URL of a backend which accepts an XML representation\n * of a graph view to create an image. The function is used\n * in the image action to create an image. This implementation\n * returns <urlImage>.\n */\nmxEditor.prototype.getUrlImage = function ()\n{\n\treturn this.urlImage;\n};\n\n/**\n * Function: swapStyles\n * \n * Swaps the styles for the given names in the graph's\n * stylesheet and refreshes the graph.\n */\nmxEditor.prototype.swapStyles = function (first, second)\n{\n\tvar style = this.graph.getStylesheet().styles[second];\n\tthis.graph.getView().getStylesheet().putCellStyle(\n\t\tsecond, this.graph.getStylesheet().styles[first]);\n\tthis.graph.getStylesheet().putCellStyle(first, style);\n\tthis.graph.refresh();\n};\n\n/**\n * Function: showProperties\n * \n * Creates and shows the properties dialog for the given\n * cell. The content area of the dialog is created using\n * <createProperties>.\n */\nmxEditor.prototype.showProperties = function (cell)\n{\n\tcell = cell || this.graph.getSelectionCell();\n\t\n\t// Uses the root node for the properties dialog\n\t// if not cell was passed in and no cell is\n\t// selected\n\tif (cell == null)\n\t{\n\t\tcell = this.graph.getCurrentRoot();\n\t\t\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.graph.getModel().getRoot();\n\t\t}\n\t}\n\t\n\tif (cell != null)\n\t{\n\t\t// Makes sure there is no in-place editor in the\n\t\t// graph and computes the location of the dialog\n\t\tthis.graph.stopEditing(true);\n\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\tvar x = offset.x+10;\n\t\tvar y = offset.y;\n\t\t\n\t\t// Avoids moving the dialog if it is alredy open\n\t\tif (this.properties != null && !this.movePropertiesDialog)\n\t\t{\n\t\t\tx = this.properties.getX();\n\t\t\ty = this.properties.getY();\n\t\t}\n\t\t\n\t\t// Places the dialog near the cell for which it\n\t\t// displays the properties\n\t\telse\n\t\t{\n\t\t\tvar bounds = this.graph.getCellBounds(cell);\n\t\t\t\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tx += bounds.x+Math.min(200, bounds.width);\n\t\t\t\ty += bounds.y;\t\t\t\t\n\t\t\t}\t\t\t\n\t\t}\n\t\t\n\t\t// Hides the existing properties dialog and creates a new one with the\n\t\t// contents created in the hook method\n\t\tthis.hideProperties();\n\t\tvar node = this.createProperties(cell);\n\t\t\n\t\tif (node != null)\n\t\t{\n\t\t\t// Displays the contents in a window and stores a reference to the\n\t\t\t// window for later hiding of the window\n\t\t\tthis.properties = new mxWindow(mxResources.get(this.propertiesResource) ||\n\t\t\t\tthis.propertiesResource, node, x, y, this.propertiesWidth, this.propertiesHeight, false);\n\t\t\tthis.properties.setVisible(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: isPropertiesVisible\n * \n * Returns true if the properties dialog is currently visible.\n */\nmxEditor.prototype.isPropertiesVisible = function ()\n{\n\treturn this.properties != null;\n};\n\n/**\n * Function: createProperties\n * \n * Creates and returns the DOM node that represents the contents\n * of the properties dialog for the given cell. This implementation\n * works for user objects that are XML nodes and display all the\n * node attributes in a form.\n */\nmxEditor.prototype.createProperties = function (cell)\n{\n\tvar model = this.graph.getModel();\n\tvar value = model.getValue(cell);\n\t\n\tif (mxUtils.isNode(value))\n\t{\n\t\t// Creates a form for the user object inside\n\t\t// the cell\n\t\tvar form = new mxForm('properties');\n\t\t\n\t\t// Adds a readonly field for the cell id\n\t\tvar id = form.addText('ID', cell.getId());\n\t\tid.setAttribute('readonly', 'true');\n\n\t\tvar geo = null;\n\t\tvar yField = null;\n\t\tvar xField = null;\n\t\tvar widthField = null;\n\t\tvar heightField = null;\n\n\t\t// Adds fields for the location and size\n\t\tif (model.isVertex(cell))\n\t\t{\n\t\t\tgeo = model.getGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tyField = form.addText('top', geo.y);\n\t\t\t\txField = form.addText('left', geo.x);\n\t\t\t\twidthField = form.addText('width', geo.width);\n\t\t\t\theightField = form.addText('height', geo.height);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Adds a field for the cell style\t\t\t\n\t\tvar tmp = model.getStyle(cell);\n\t\tvar style = form.addText('Style', tmp || '');\n\t\t\n\t\t// Creates textareas for each attribute of the\n\t\t// user object within the cell\n\t\tvar attrs = value.attributes;\n\t\tvar texts = [];\n\t\t\n\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t{\n\t\t\t// Creates a textarea with more lines for\n\t\t\t// the cell label\n\t\t\tvar val = attrs[i].value;\n\t\t\ttexts[i] = form.addTextarea(attrs[i].nodeName, val,\n\t\t\t\t(attrs[i].nodeName == 'label') ? 4 : 2);\n\t\t}\n\t\t\n\t\t// Adds an OK and Cancel button to the dialog\n\t\t// contents and implements the respective\n\t\t// actions below\n\t\t\n\t\t// Defines the function to be executed when the\n\t\t// OK button is pressed in the dialog\n\t\tvar okFunction = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Hides the dialog\n\t\t\tthis.hideProperties();\n\t\t\t\n\t\t\t// Supports undo for the changes on the underlying\n\t\t\t// XML structure / XML node attribute changes.\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\tgeo.x = parseFloat(xField.value);\n\t\t\t\t\tgeo.y = parseFloat(yField.value);\n\t\t\t\t\tgeo.width = parseFloat(widthField.value);\n\t\t\t\t\tgeo.height = parseFloat(heightField.value);\n\t\t\t\t\t\n\t\t\t\t\tmodel.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Applies the style\n\t\t\t\tif (style.value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tmodel.setStyle(cell, style.value);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmodel.setStyle(cell, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Creates an undoable change for each\n\t\t\t\t// attribute and executes it using the\n\t\t\t\t// model, which will also make the change\n\t\t\t\t// part of the current transaction\n\t\t\t\tfor (var i=0; i<attrs.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar edit = new mxCellAttributeChange(\n\t\t\t\t\t\tcell, attrs[i].nodeName,\n\t\t\t\t\t\ttexts[i].value);\n\t\t\t\t\tmodel.execute(edit);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Checks if the graph wants cells to \n\t\t\t\t// be automatically sized and updates\n\t\t\t\t// the size as an undoable step if\n\t\t\t\t// the feature is enabled\n\t\t\t\tif (this.graph.isAutoSizeCell(cell))\n\t\t\t\t{\n\t\t\t\t\tthis.graph.updateCellSize(cell);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t});\n\t\t\n\t\t// Defines the function to be executed when the\n\t\t// Cancel button is pressed in the dialog\n\t\tvar cancelFunction = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Hides the dialog\n\t\t\tthis.hideProperties();\n\t\t});\n\t\t\n\t\tform.addButtons(okFunction, cancelFunction);\n\t\t\n\t\treturn form.table;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: hideProperties\n * \n * Hides the properties dialog.\n */\nmxEditor.prototype.hideProperties = function ()\n{\n\tif (this.properties != null)\n\t{\n\t\tthis.properties.destroy();\n\t\tthis.properties = null;\n\t}\n};\n\n/**\n * Function: showTasks\n * \n * Shows the tasks window. The tasks window is created using <createTasks>. The\n * default width of the window is 200 pixels, the y-coordinate of the location\n * can be specifies in <tasksTop> and the x-coordinate is right aligned with a\n * 20 pixel offset from the right border. To change the location of the tasks\n * window, the following code can be used:\n * \n * (code)\n * var oldShowTasks = mxEditor.prototype.showTasks;\n * mxEditor.prototype.showTasks = function()\n * {\n *   oldShowTasks.apply(this, arguments); // \"supercall\"\n *   \n *   if (this.tasks != null)\n *   {\n *     this.tasks.setLocation(10, 10);\n *   }\n * };\n * (end)\n */\nmxEditor.prototype.showTasks = function ()\n{\n\tif (this.tasks == null)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.padding = '4px';\n\t\tdiv.style.paddingLeft = '20px';\n\t\tvar w = document.body.clientWidth;\n\t\tvar wnd = new mxWindow(\n\t\t\tmxResources.get(this.tasksResource) ||\n\t\t\tthis.tasksResource,\n\t\t\tdiv, w - 220, this.tasksTop, 200);\n\t\twnd.setClosable(true);\n\t\twnd.destroyOnClose = false;\n\t\t\n\t\t// Installs a function to update the contents\n\t\t// of the tasks window on every change of the\n\t\t// model, selection or root.\n\t\tvar funct = mxUtils.bind(this, function(sender)\n\t\t{\n\t\t\tmxEvent.release(div);\n\t\t\tdiv.innerHTML = '';\n\t\t\tthis.createTasks(div);\n\t\t});\n\t\t\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, funct);\n\t\tthis.graph.getSelectionModel().addListener(mxEvent.CHANGE, funct);\n\t\tthis.graph.addListener(mxEvent.ROOT, funct);\n\t\t\n\t\t// Assigns the icon to the tasks window\n\t\tif (this.tasksWindowImage != null)\n\t\t{\n\t\t\twnd.setImage(this.tasksWindowImage);\n\t\t}\n\t\t\n\t\tthis.tasks = wnd;\n\t\tthis.createTasks(div);\n\t}\n\t\n\tthis.tasks.setVisible(true);\n};\n\t\t\n/**\n * Function: refreshTasks\n * \n * Updates the contents of the tasks window using <createTasks>.\n */\nmxEditor.prototype.refreshTasks = function (div)\n{\n\tif (this.tasks != null)\n\t{\n\t\tvar div = this.tasks.content;\n\t\tmxEvent.release(div);\n\t\tdiv.innerHTML = '';\n\t\tthis.createTasks(div);\n\t}\n};\n\t\t\n/**\n * Function: createTasks\n * \n * Updates the contents of the given DOM node to\n * display the tasks associated with the current\n * editor state. This is invoked whenever there\n * is a possible change of state in the editor.\n * Default implementation is empty.\n */\nmxEditor.prototype.createTasks = function (div)\n{\n\t// override\n};\n\t\n/**\n * Function: showHelp\n * \n * Shows the help window. If the help window does not exist\n * then it is created using an iframe pointing to the resource\n * for the <code>urlHelp</code> key or <urlHelp> if the resource\n * is undefined.\n */\nmxEditor.prototype.showHelp = function (tasks)\n{\n\tif (this.help == null)\n\t{\n\t\tvar frame = document.createElement('iframe');\n\t\tframe.setAttribute('src', mxResources.get('urlHelp') || this.urlHelp);\n\t\tframe.setAttribute('height', '100%');\n\t\tframe.setAttribute('width', '100%');\n\t\tframe.setAttribute('frameBorder', '0');\n\t\tframe.style.backgroundColor = 'white';\n\t\n\t\tvar w = document.body.clientWidth;\n\t\tvar h = (document.body.clientHeight || document.documentElement.clientHeight);\n\t\t\n\t\tvar wnd = new mxWindow(mxResources.get(this.helpResource) || this.helpResource,\n\t\t\tframe, (w-this.helpWidth)/2, (h-this.helpHeight)/3, this.helpWidth, this.helpHeight);\n\t\twnd.setMaximizable(true);\n\t\twnd.setClosable(true);\n\t\twnd.destroyOnClose = false;\n\t\twnd.setResizable(true);\n\n\t\t// Assigns the icon to the help window\n\t\tif (this.helpWindowImage != null)\n\t\t{\n\t\t\twnd.setImage(this.helpWindowImage);\n\t\t}\n\t\t\n\t\t// Workaround for ignored iframe height 100% in FF\n\t\tif (mxClient.IS_NS)\n\t\t{\n\t\t\tvar handler = function(sender)\n\t\t\t{\n\t\t\t\tvar h = wnd.div.offsetHeight;\n\t\t\t\tframe.setAttribute('height', (h-26)+'px');\n\t\t\t};\n\t\t\t\n\t\t\twnd.addListener(mxEvent.RESIZE_END, handler);\n\t\t\twnd.addListener(mxEvent.MAXIMIZE, handler);\n\t\t\twnd.addListener(mxEvent.NORMALIZE, handler);\n\t\t\twnd.addListener(mxEvent.SHOW, handler);\n\t\t}\n\t\t\n\t\tthis.help = wnd;\n\t}\n\t\n\tthis.help.setVisible(true);\n};\n\n/**\n * Function: showOutline\n * \n * Shows the outline window. If the window does not exist, then it is\n * created using an <mxOutline>.\n */\nmxEditor.prototype.showOutline = function ()\n{\n\tvar create = this.outline == null;\n\t\n\tif (create)\n\t{\n\t\tvar div = document.createElement('div');\n\t\t\n\t\tdiv.style.overflow = 'hidden';\n\t\tdiv.style.position = 'relative';\n\t\tdiv.style.width = '100%';\n\t\tdiv.style.height = '100%';\n\t\tdiv.style.background = 'white';\n\t\tdiv.style.cursor = 'move';\n\t\t\n\t\tif (document.documentMode == 8)\n\t\t{\n\t\t\tdiv.style.filter = 'progid:DXImageTransform.Microsoft.alpha(opacity=100)';\n\t\t}\n\t\t\n\t\tvar wnd = new mxWindow(\n\t\t\tmxResources.get(this.outlineResource) ||\n\t\t\tthis.outlineResource,\n\t\t\tdiv, 600, 480, 200, 200, false);\n\t\t\t\t\n\t\t// Creates the outline in the specified div\n\t\t// and links it to the existing graph\n\t\tvar outline = new mxOutline(this.graph, div);\t\t\t\n\t\twnd.setClosable(true);\n\t\twnd.setResizable(true);\n\t\twnd.destroyOnClose = false;\n\t\t\n\t\twnd.addListener(mxEvent.RESIZE_END, function()\n\t\t{\n\t\t\toutline.update();\n\t\t});\n\t\t\n\t\tthis.outline = wnd;\n\t\tthis.outline.outline = outline;\n\t}\n\t\n\t// Finally shows the outline\n\tthis.outline.setVisible(true);\n\tthis.outline.outline.update(true);\n};\n\t\t\n/**\n * Function: setMode\n *\n * Puts the graph into the specified mode. The following modenames are\n * supported:\n * \n * select - Selects using the left mouse button, new connections\n * are disabled.\n * connect - Selects using the left mouse button or creates new\n * connections if mouse over cell hotspot. See <mxConnectionHandler>.\n * pan - Pans using the left mouse button, new connections are disabled.\n */\nmxEditor.prototype.setMode = function(modename)\n{\n\tif (modename == 'select')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = false;\n\t\tthis.graph.setConnectable(false);\n\t}\n\telse if (modename == 'connect')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = false;\n\t\tthis.graph.setConnectable(true);\n\t}\n\telse if (modename == 'pan')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = true;\n\t\tthis.graph.setConnectable(false);\n\t}\n};\n\n/**\n * Function: createPopupMenu\n * \n * Uses <popupHandler> to create the menu in the graph's\n * panning handler. The redirection is setup in\n * <setToolbarContainer>.\n */\nmxEditor.prototype.createPopupMenu = function (menu, cell, evt)\n{\n\tthis.popupHandler.createMenu(this, menu, cell, evt);\n};\n\n/**\n * Function: createEdge\n * \n * Uses <defaultEdge> as the prototype for creating new edges\n * in the connection handler of the graph. The style of the\n * edge will be overridden with the value returned by\n * <getEdgeStyle>.\n */\nmxEditor.prototype.createEdge = function (source, target)\n{\n\t// Clones the defaultedge prototype\n\tvar e = null;\n\t\n\tif (this.defaultEdge != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\te = model.cloneCell(this.defaultEdge);\n\t}\n\telse\n\t{\n\t\te = new mxCell('');\n\t\te.setEdge(true);\n\t\t\n\t\tvar geo = new mxGeometry();\n\t\tgeo.relative = true;\n\t\te.setGeometry(geo);\n\t}\n\t\n\t// Overrides the edge style\n\tvar style = this.getEdgeStyle();\n\t\n\tif (style != null)\n\t{\n\t\te.setStyle(style);\n\t}\n\t\n\treturn e;\n};\n\n/**\n * Function: getEdgeStyle\n * \n * Returns a string identifying the style of new edges.\n * The function is used in <createEdge> when new edges\n * are created in the graph.\n */\nmxEditor.prototype.getEdgeStyle = function ()\n{\n\treturn this.defaultEdgeStyle;\n};\n\n/**\n * Function: consumeCycleAttribute\n * \n * Returns the next attribute in <cycleAttributeValues>\n * or null, if not attribute should be used in the\n * specified cell.\n */\nmxEditor.prototype.consumeCycleAttribute = function (cell)\n{\n\treturn (this.cycleAttributeValues != null &&\n\t\tthis.cycleAttributeValues.length > 0 &&\n\t\tthis.graph.isSwimlane(cell)) ?\n\t\tthis.cycleAttributeValues[this.cycleAttributeIndex++ %\n\t\t\tthis.cycleAttributeValues.length] : null;\n};\n\n/**\n * Function: cycleAttribute\n * \n * Uses the returned value from <consumeCycleAttribute>\n * as the value for the <cycleAttributeName> key in\n * the given cell's style.\n */\nmxEditor.prototype.cycleAttribute = function (cell)\n{\n\tif (this.cycleAttributeName != null)\n\t{\n\t\tvar value = this.consumeCycleAttribute(cell);\n\t\t\n\t\tif (value != null)\n\t\t{\n\t\t\tcell.setStyle(cell.getStyle()+';'+\n\t\t\t\tthis.cycleAttributeName+'='+value);\n\t\t}\n\t}\n};\n\n/**\n * Function: addVertex\n * \n * Adds the given vertex as a child of parent at the specified\n * x and y coordinate and fires an <addVertex> event.\n */\nmxEditor.prototype.addVertex = function (parent, vertex, x, y)\n{\n\tvar model = this.graph.getModel();\n\t\n\twhile (parent != null && !this.graph.isValidDropTarget(parent))\n\t{\n\t\tparent = model.getParent(parent);\n\t}\n\t\n\tparent = (parent != null) ? parent : this.graph.getSwimlaneAt(x, y);\n\tvar scale = this.graph.getView().scale;\n\t\n\tvar geo = model.getGeometry(vertex);\n\tvar pgeo = model.getGeometry(parent);\n\t\n\tif (this.graph.isSwimlane(vertex) &&\n\t\t!this.graph.swimlaneNesting)\n\t{\n\t\tparent = null;\n\t}\n\telse if (parent == null && this.swimlaneRequired)\n\t{\n\t\treturn null;\n\t}\n\telse if (parent != null && pgeo != null)\n\t{\n\t\t// Keeps vertex inside parent\n\t\tvar state = this.graph.getView().getState(parent);\n\t\t\n\t\tif (state != null)\n\t\t{\t\t\t\n\t\t\tx -= state.origin.x * scale;\n\t\t\ty -= state.origin.y * scale;\n\t\t\t\n\t\t\tif (this.graph.isConstrainedMoving)\n\t\t\t{\n\t\t\t\tvar width = geo.width;\n\t\t\t\tvar height = geo.height;\t\t\t\t\n\t\t\t\tvar tmp = state.x+state.width;\n\t\t\t\t\n\t\t\t\tif (x+width > tmp)\n\t\t\t\t{\n\t\t\t\t\tx -= x+width - tmp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttmp = state.y+state.height;\n\t\t\t\t\n\t\t\t\tif (y+height > tmp)\n\t\t\t\t{\n\t\t\t\t\ty -= y+height - tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (pgeo != null)\n\t\t{\n\t\t\tx -= pgeo.x*scale;\n\t\t\ty -= pgeo.y*scale;\n\t\t}\n\t}\n\t\n\tgeo = geo.clone();\n\tgeo.x = this.graph.snap(x / scale -\n\t\tthis.graph.getView().translate.x -\n\t\tthis.graph.gridSize/2);\n\tgeo.y = this.graph.snap(y / scale -\n\t\tthis.graph.getView().translate.y -\n\t\tthis.graph.gridSize/2);\n\tvertex.setGeometry(geo);\n\t\n\tif (parent == null)\n\t{\n\t\tparent = this.graph.getDefaultParent();\n\t}\n\n\tthis.cycleAttribute(vertex);\n\tthis.fireEvent(new mxEventObject(mxEvent.BEFORE_ADD_VERTEX,\n\t\t\t'vertex', vertex, 'parent', parent));\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvertex = this.graph.addCell(vertex, parent);\n\t\t\n\t\tif (vertex != null)\n\t\t{\n\t\t\tthis.graph.constrainChild(vertex);\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD_VERTEX, 'vertex', vertex));\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\tif (vertex != null)\n\t{\n\t\tthis.graph.setSelectionCell(vertex);\n\t\tthis.graph.scrollCellToVisible(vertex);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.AFTER_ADD_VERTEX, 'vertex', vertex));\n\t}\n\t\n\treturn vertex;\n};\n\n/**\n * Function: destroy\n * \n * Removes the editor and all its associated resources. This does not\n * normally need to be called, it is called automatically when the window\n * unloads.\n */\nmxEditor.prototype.destroy = function ()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tif (this.tasks != null)\n\t\t{\n\t\t\tthis.tasks.destroy();\n\t\t}\n\t\t\n\t\tif (this.outline != null)\n\t\t{\n\t\t\tthis.outline.destroy();\n\t\t}\n\t\t\n\t\tif (this.properties != null)\n\t\t{\n\t\t\tthis.properties.destroy();\n\t\t}\n\t\t\n\t\tif (this.keyHandler != null)\n\t\t{\n\t\t\tthis.keyHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.rubberband != null)\n\t\t{\n\t\t\tthis.rubberband.destroy();\n\t\t}\n\t\t\n\t\tif (this.toolbar != null)\n\t\t{\n\t\t\tthis.toolbar.destroy();\n\t\t}\n\t\t\n\t\tif (this.graph != null)\n\t\t{\n\t\t\tthis.graph.destroy();\n\t\t}\n\t\n\t\tthis.status = null;\n\t\tthis.templates = null;\n\t}\n};\n\n__mxOutput.mxEditor = typeof mxEditor !== 'undefined' ? mxEditor : undefined;\n"]}