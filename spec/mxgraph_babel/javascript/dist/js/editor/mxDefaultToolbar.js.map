{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/editor/mxDefaultToolbar.js"],"names":["mxDefaultToolbar","container","editor","init","prototype","toolbar","resetHandler","spacing","connectOnDrop","mxToolbar","addListener","mxEvent","SELECT","mxUtils","bind","sender","evt","funct","getProperty","insertFunction","apply","arguments","resetMode","graph","DOUBLE_CLICK","ESCAPE","addItem","title","icon","action","pressed","clickHandler","length","execute","addSeparator","mxClient","imageBasePath","addCombo","addActionCombo","addActionOption","combo","addOption","value","addMode","mode","setMode","addSwitchMode","addPrototype","ptype","insert","toggle","factory","cloneCell","cell","drop","consume","img","dropHandler","installDropHandler","vertex","target","model","getModel","isEdge","isCellConnectable","isValidDropTarget","getParent","connect","canImportCell","x","getClientX","y","getClientY","pt","convertPoint","isSplitEnabled","isSplitTarget","splitEdge","addVertex","source","isEdgeValid","edge","beginUpdate","geo","getGeometry","g","clone","width","height","step","gridSize","dist","getDirectedEdgeCount","horizontalFlow","setGeometry","parent","addCell","constrainChild","createEdge","edgeGeometry","mxGeometry","relative","addEdge","endUpdate","setSelectionCells","scrollCellToVisible","sprite","document","createElement","setAttribute","getAttribute","loader","style","offsetWidth","offsetHeight","makeDraggable","removeListener","IS_IE","destroy","__mxOutput","undefined"],"mappings":"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","file":"mxDefaultToolbar.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultToolbar\n *\n * Toolbar for the editor. This modifies the state of the graph\n * or inserts new cells upon mouse clicks.\n * \n * Example:\n * \n * Create a toolbar with a button to copy the selection into the clipboard,\n * and a combo box with one action to paste the selection from the clipboard\n * into the graph.\n * \n * (code)\n * var toolbar = new mxDefaultToolbar(container, editor);\n * toolbar.addItem('Copy', null, 'copy');\n * \n * var combo = toolbar.addActionCombo('More actions...');\n * toolbar.addActionOption(combo, 'Paste', 'paste');\n * (end) \n *\n * Codec:\n * \n * This class uses the <mxDefaultToolbarCodec> to read configuration\n * data into an existing instance. See <mxDefaultToolbarCodec> for a\n * description of the configuration format.\n * \n * Constructor: mxDefaultToolbar\n *\n * Constructs a new toolbar for the given container and editor. The\n * container and editor may be null if a prototypical instance for a\n * <mxDefaultKeyHandlerCodec> is created.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n * editor - Reference to the enclosing <mxEditor>. \n */\nfunction mxDefaultToolbar(container, editor)\n{\n\tthis.editor = editor;\n\n\tif (container != null && editor != null)\n\t{\n\t\tthis.init(container);\n\t}\n};\n\t\n/**\n * Variable: editor\n *\n * Reference to the enclosing <mxEditor>.\n */\nmxDefaultToolbar.prototype.editor = null;\n\n/**\n * Variable: toolbar\n *\n * Holds the internal <mxToolbar>.\n */\nmxDefaultToolbar.prototype.toolbar = null;\n\n/**\n * Variable: resetHandler\n *\n * Reference to the function used to reset the <toolbar>.\n */\nmxDefaultToolbar.prototype.resetHandler = null;\n\n/**\n * Variable: spacing\n *\n * Defines the spacing between existing and new vertices in\n * gridSize units when a new vertex is dropped on an existing\n * cell. Default is 4 (40 pixels).\n */\nmxDefaultToolbar.prototype.spacing = 4;\n\n/**\n * Variable: connectOnDrop\n * \n * Specifies if elements should be connected if new cells are dropped onto\n * connectable elements. Default is false.\n */\nmxDefaultToolbar.prototype.connectOnDrop = false;\n\n/**\n * Variable: init\n * \n * Constructs the <toolbar> for the given container and installs a listener\n * that updates the <mxEditor.insertFunction> on <editor> if an item is\n * selected in the toolbar. This assumes that <editor> is not null.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n */\nmxDefaultToolbar.prototype.init = function(container)\n{\n\tif (container != null)\n\t{\n\t\tthis.toolbar = new mxToolbar(container);\n\t\t\n\t\t// Installs the insert function in the editor if an item is\n\t\t// selected in the toolbar\n\t\tthis.toolbar.addListener(mxEvent.SELECT, mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar funct = evt.getProperty('function');\n\t\t\t\n\t\t\tif (funct != null)\n\t\t\t{\n\t\t\t\tthis.editor.insertFunction = mxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tfunct.apply(this, arguments);\n\t\t\t\t\tthis.toolbar.resetMode();\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.editor.insertFunction = null;\n\t\t\t}\n\t\t}));\n\t\t\n\t\t// Resets the selected tool after a doubleclick or escape keystroke\n\t\tthis.resetHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.toolbar != null)\n\t\t\t{\n\t\t\t\tthis.toolbar.resetMode(true);\n\t\t\t}\n\t\t});\n\n\t\tthis.editor.graph.addListener(mxEvent.DOUBLE_CLICK, this.resetHandler);\n\t\tthis.editor.addListener(mxEvent.ESCAPE, this.resetHandler);\n\t}\n};\n\n/**\n * Function: addItem\n *\n * Adds a new item that executes the given action in <editor>. The title,\n * icon and pressedIcon are used to display the toolbar item.\n * \n * Parameters:\n *\n * title - String that represents the title (tooltip) for the item.\n * icon - URL of the icon to be used for displaying the item.\n * action - Name of the action to execute when the item is clicked.\n * pressed - Optional URL of the icon for the pressed state.\n */\nmxDefaultToolbar.prototype.addItem = function(title, icon, action, pressed)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (action != null && action.length > 0)\n\t\t{\n\t\t\tthis.editor.execute(action);\n\t\t}\n\t});\n\t\n\treturn this.toolbar.addItem(title, icon, clickHandler, pressed);\n};\n\n/**\n * Function: addSeparator\n *\n * Adds a vertical separator using the optional icon.\n * \n * Parameters:\n * \n * icon - Optional URL of the icon that represents the vertical separator.\n * Default is <mxClient.imageBasePath> + '/separator.gif'.\n */\nmxDefaultToolbar.prototype.addSeparator = function(icon)\n{\n\ticon = icon || mxClient.imageBasePath + '/separator.gif';\n\tthis.toolbar.addSeparator(icon);\n};\n\t\n/**\n * Function: addCombo\n *\n * Helper method to invoke <mxToolbar.addCombo> on <toolbar> and return the\n * resulting DOM node.\n */\nmxDefaultToolbar.prototype.addCombo = function()\n{\n\treturn this.toolbar.addCombo();\n};\n\t\t\n/**\n * Function: addActionCombo\n *\n * Helper method to invoke <mxToolbar.addActionCombo> on <toolbar> using\n * the given title and return the resulting DOM node.\n * \n * Parameters:\n * \n * title - String that represents the title of the combo.\n */\nmxDefaultToolbar.prototype.addActionCombo = function(title)\n{\n\treturn this.toolbar.addActionCombo(title);\n};\n\n/**\n * Function: addActionOption\n *\n * Binds the given action to a option with the specified label in the\n * given combo. Combo is an object returned from an earlier call to\n * <addCombo> or <addActionCombo>.\n * \n * Parameters:\n * \n * combo - DOM node that represents the combo box.\n * title - String that represents the title of the combo.\n * action - Name of the action to execute in <editor>.\n */\nmxDefaultToolbar.prototype.addActionOption = function(combo, title, action)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.execute(action);\n\t});\n\t\n\tthis.addOption(combo, title, clickHandler);\n};\n\n/**\n * Function: addOption\n *\n * Helper method to invoke <mxToolbar.addOption> on <toolbar> and return\n * the resulting DOM node that represents the option.\n * \n * Parameters:\n * \n * combo - DOM node that represents the combo box.\n * title - String that represents the title of the combo.\n * value - Object that represents the value of the option.\n */\nmxDefaultToolbar.prototype.addOption = function(combo, title, value)\n{\n\treturn this.toolbar.addOption(combo, title, value);\n};\n\t\n/**\n * Function: addMode\n *\n * Creates an item for selecting the given mode in the <editor>'s graph.\n * Supported modenames are select, connect and pan.\n * \n * Parameters:\n * \n * title - String that represents the title of the item.\n * icon - URL of the icon that represents the item.\n * mode - String that represents the mode name to be used in\n * <mxEditor.setMode>.\n * pressed - Optional URL of the icon that represents the pressed state.\n * funct - Optional JavaScript function that takes the <mxEditor> as the\n * first and only argument that is executed after the mode has been\n * selected.\n */\nmxDefaultToolbar.prototype.addMode = function(title, icon, mode, pressed, funct)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.setMode(mode);\n\t\t\n\t\tif (funct != null)\n\t\t{\n\t\t\tfunct(this.editor);\n\t\t}\n\t});\n\t\n\treturn this.toolbar.addSwitchMode(title, icon, clickHandler, pressed);\n};\n\n/**\n * Function: addPrototype\n *\n * Creates an item for inserting a clone of the specified prototype cell into\n * the <editor>'s graph. The ptype may either be a cell or a function that\n * returns a cell.\n * \n * Parameters:\n * \n * title - String that represents the title of the item.\n * icon - URL of the icon that represents the item.\n * ptype - Function or object that represents the prototype cell. If ptype\n * is a function then it is invoked with no arguments to create new\n * instances.\n * pressed - Optional URL of the icon that represents the pressed state.\n * insert - Optional JavaScript function that handles an insert of the new\n * cell. This function takes the <mxEditor>, new cell to be inserted, mouse\n * event and optional <mxCell> under the mouse pointer as arguments.\n * toggle - Optional boolean that specifies if the item can be toggled.\n * Default is true.\n */\nmxDefaultToolbar.prototype.addPrototype = function(title, icon, ptype, pressed, insert, toggle)\n{\n\t// Creates a wrapper function that is in charge of constructing\n\t// the new cell instance to be inserted into the graph\n\tvar factory = mxUtils.bind(this, function()\n\t{\n\t\tif (typeof(ptype) == 'function')\n\t\t{\n\t\t\treturn ptype();\n\t\t}\n\t\telse if (ptype != null)\n\t\t{\n\t\t\treturn this.editor.graph.cloneCell(ptype);\n\t\t}\n\t\t\n\t\treturn null;\n\t});\n\t\n\t// Defines the function for a click event on the graph\n\t// after this item has been selected in the toolbar\n\tvar clickHandler = mxUtils.bind(this, function(evt, cell)\n\t{\n\t\tif (typeof(insert) == 'function')\n\t\t{\n\t\t\tinsert(this.editor, factory(), evt, cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.drop(factory(), evt, cell);\n\t\t}\n\t\t\n\t\tthis.toolbar.resetMode();\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tvar img = this.toolbar.addMode(title, icon, clickHandler, pressed, null, toggle);\n\t\t\t\t\n\t// Creates a wrapper function that calls the click handler without\n\t// the graph argument\n\tvar dropHandler = function(graph, evt, cell)\n\t{\n\t\tclickHandler(evt, cell);\n\t};\n\t\n\tthis.installDropHandler(img, dropHandler);\n\t\n\treturn img;\n};\n\n/**\n * Function: drop\n * \n * Handles a drop from a toolbar item to the graph. The given vertex\n * represents the new cell to be inserted. This invokes <insert> or\n * <connect> depending on the given target cell.\n * \n * Parameters:\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * target - Optional <mxCell> that represents the drop target.\n */\nmxDefaultToolbar.prototype.drop = function(vertex, evt, target)\n{\n\tvar graph = this.editor.graph;\n\tvar model = graph.getModel();\n\t\n\tif (target == null ||\n\t\tmodel.isEdge(target) ||\n\t\t!this.connectOnDrop ||\n\t\t!graph.isCellConnectable(target))\n\t{\n\t\twhile (target != null &&\n\t\t\t!graph.isValidDropTarget(target, [vertex], evt))\n\t\t{\n\t\t\ttarget = model.getParent(target);\n\t\t}\n\t\t\n\t\tthis.insert(vertex, evt, target);\n\t}\n\telse\n\t{\n\t\tthis.connect(vertex, evt, target);\n\t}\n};\n\n/**\n * Function: insert\n *\n * Handles a drop by inserting the given vertex into the given parent cell\n * or the default parent if no parent is specified.\n * \n * Parameters:\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * parent - Optional <mxCell> that represents the parent.\n */\nmxDefaultToolbar.prototype.insert = function(vertex, evt, target)\n{\n\tvar graph = this.editor.graph;\n\t\n\tif (graph.canImportCell(vertex))\n\t{\n\t\tvar x = mxEvent.getClientX(evt);\n\t\tvar y = mxEvent.getClientY(evt);\n\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\n\t\t// Splits the target edge or inserts into target group\n\t\tif (graph.isSplitEnabled() &&\n\t\t\tgraph.isSplitTarget(target, [vertex], evt))\n\t\t{\n\t\t\treturn graph.splitEdge(target, [vertex], null, pt.x, pt.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.editor.addVertex(target, vertex, pt.x, pt.y);\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: connect\n * \n * Handles a drop by connecting the given vertex to the given source cell.\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * source - Optional <mxCell> that represents the source terminal.\n */\nmxDefaultToolbar.prototype.connect = function(vertex, evt, source)\n{\n\tvar graph = this.editor.graph;\n\tvar model = graph.getModel();\n\t\n\tif (source != null &&\n\t\tgraph.isCellConnectable(vertex) &&\n\t\tgraph.isEdgeValid(null, source, vertex))\n\t{\n\t\tvar edge = null;\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar geo = model.getGeometry(source);\n\t\t\tvar g = model.getGeometry(vertex).clone();\n\t\t\t\n\t\t\t// Moves the vertex away from the drop target that will\n\t\t\t// be used as the source for the new connection\n\t\t\tg.x = geo.x + (geo.width - g.width) / 2;\n\t\t\tg.y = geo.y + (geo.height - g.height) / 2;\n\t\t\t\n\t\t\tvar step = this.spacing * graph.gridSize;\n\t\t\tvar dist = model.getDirectedEdgeCount(source, true) * 20;\n\t\t\t\n\t\t\tif (this.editor.horizontalFlow)\n\t\t\t{\n\t\t\t\tg.x += (g.width + geo.width) / 2 + step + dist;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tg.y += (g.height + geo.height) / 2 + step + dist;\n\t\t\t}\n\t\t\t\n\t\t\tvertex.setGeometry(g);\n\t\t\t\n\t\t\t// Fires two add-events with the code below - should be fixed\n\t\t\t// to only fire one add event for both inserts\n\t\t\tvar parent = model.getParent(source);\n\t\t\tgraph.addCell(vertex, parent);\n\t\t\tgraph.constrainChild(vertex);\n\n\t\t\t// Creates the edge using the editor instance and calls\n\t\t\t// the second function that fires an add event\n\t\t\tedge = this.editor.createEdge(source, vertex);\n\t\t\t\n\t\t\tif (model.getGeometry(edge) == null)\n\t\t\t{\n\t\t\t\tvar edgeGeometry = new mxGeometry();\n\t\t\t\tedgeGeometry.relative = true;\n\t\t\t\t\n\t\t\t\tmodel.setGeometry(edge, edgeGeometry);\n\t\t\t}\n\t\t\t\n\t\t\tgraph.addEdge(edge, parent, source, vertex);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t\t\n\t\tgraph.setSelectionCells([vertex, edge]);\n\t\tgraph.scrollCellToVisible(vertex);\n\t}\n};\n\n/**\n * Function: installDropHandler\n * \n * Makes the given img draggable using the given function for handling a\n * drop event.\n * \n * Parameters:\n * \n * img - DOM node that represents the image.\n * dropHandler - Function that handles a drop of the image.\n */\nmxDefaultToolbar.prototype.installDropHandler = function (img, dropHandler)\n{\n\tvar sprite = document.createElement('img');\n\tsprite.setAttribute('src', img.getAttribute('src'));\n\n\t// Handles delayed loading of the images\n\tvar loader = mxUtils.bind(this, function(evt)\n\t{\n\t\t// Preview uses the image node with double size. Later this can be\n\t\t// changed to use a separate preview and guides, but for this the\n\t\t// dropHandler must use the additional x- and y-arguments and the\n\t\t// dragsource which makeDraggable returns much be configured to\n\t\t// use guides via mxDragSource.isGuidesEnabled.\n\t\tsprite.style.width = (2 * img.offsetWidth) + 'px';\n\t\tsprite.style.height = (2 * img.offsetHeight) + 'px';\n\n\t\tmxUtils.makeDraggable(img, this.editor.graph, dropHandler,\n\t\t\tsprite);\n\t\tmxEvent.removeListener(sprite, 'load', loader);\n\t});\n\n\tif (mxClient.IS_IE)\n\t{\n\t\tloader();\n\t}\n\telse\n\t{\n\t\tmxEvent.addListener(sprite, 'load', loader);\n\t}\t\n};\n\n/**\n * Function: destroy\n * \n * Destroys the <toolbar> associated with this object and removes all\n * installed listeners. This does normally not need to be called, the\n * <toolbar> is destroyed automatically when the window unloads (in IE) by\n * <mxEditor>.\n */\nmxDefaultToolbar.prototype.destroy = function ()\n{\n\tif (this.resetHandler != null)\n\t{\n\t\tthis.editor.graph.removeListener('dblclick', this.resetHandler);\n\t\tthis.editor.removeListener('escape', this.resetHandler);\n\t\tthis.resetHandler = null;\n\t}\n\t\n\tif (this.toolbar != null)\n\t{\n\t\tthis.toolbar.destroy();\n\t\tthis.toolbar = null;\n\t}\n};\n\n__mxOutput.mxDefaultToolbar = typeof mxDefaultToolbar !== 'undefined' ? mxDefaultToolbar : undefined;\n"]}