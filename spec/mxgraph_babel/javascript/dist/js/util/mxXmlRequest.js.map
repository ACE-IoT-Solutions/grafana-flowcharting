{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/util/mxXmlRequest.js"],"names":["mxXmlRequest","url","params","method","async","username","password","prototype","binary","withCredentials","request","decodeSimulateValues","isBinary","setBinary","value","getText","responseText","isReady","readyState","getDocumentElement","doc","getXml","documentElement","xml","responseXML","document","documentMode","mxUtils","parseXml","getStatus","status","create","window","XMLHttpRequest","req","overrideMimeType","ActiveXObject","send","onload","onerror","timeout","ontimeout","onreadystatechange","bind","onreadystatechaange","open","setRequestHeaders","mxClient","IS_QUIRKS","setRequestHeader","simulate","target","old","onbeforeunload","form","createElement","setAttribute","style","display","visibility","pars","indexOf","split","i","length","pos","name","substring","decodeURIComponent","textarea","write","appendChild","body","submit","parentNode","removeChild","__mxOutput","undefined"],"mappings":";;;;;AAAA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmFA,WAASA,YAAT,CAAsBC,GAAtB,EAA2BC,MAA3B,EAAmCC,MAAnC,EAA2CC,KAA3C,EAAkDC,QAAlD,EAA4DC,QAA5D,EACA;AACC,SAAKL,GAAL,GAAWA,GAAX;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,UAAU,MAAxB;AACA,SAAKC,KAAL,GAAcA,SAAS,IAAV,GAAkBA,KAAlB,GAA0B,IAAvC;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,G;;;AAAA;;AAED;;;;;AAKAN,mBAAaO,SAAb,CAAuBN,GAAvB,GAA6B,IAA7B;;AAEA;;;;;AAKAD,mBAAaO,SAAb,CAAuBL,MAAvB,GAAgC,IAAhC;;AAEA;;;;;;AAMAF,mBAAaO,SAAb,CAAuBJ,MAAvB,GAAgC,IAAhC;;AAEA;;;;;AAKAH,mBAAaO,SAAb,CAAuBH,KAAvB,GAA+B,IAA/B;;AAEA;;;;;;;AAOAJ,mBAAaO,SAAb,CAAuBC,MAAvB,GAAgC,KAAhC;;AAEA;;;;;;AAMAR,mBAAaO,SAAb,CAAuBE,eAAvB,GAAyC,KAAzC;;AAEA;;;;;AAKAT,mBAAaO,SAAb,CAAuBF,QAAvB,GAAkC,IAAlC;;AAEA;;;;;AAKAL,mBAAaO,SAAb,CAAuBD,QAAvB,GAAkC,IAAlC;;AAEA;;;;;AAKAN,mBAAaO,SAAb,CAAuBG,OAAvB,GAAiC,IAAjC;;AAEA;;;;;;;AAOAV,mBAAaO,SAAb,CAAuBI,oBAAvB,GAA8C,KAA9C;;AAEA;;;;;AAKAX,mBAAaO,SAAb,CAAuBK,QAAvB,GAAkC,YAClC;AACC,eAAO,KAAKJ,MAAZ;AACA,OAHD;;AAKA;;;;;AAKAR,mBAAaO,SAAb,CAAuBM,SAAvB,GAAmC,UAASC,KAAT,EACnC;AACC,aAAKN,MAAL,GAAcM,KAAd;AACA,OAHD;;AAKA;;;;;AAKAd,mBAAaO,SAAb,CAAuBQ,OAAvB,GAAiC,YACjC;AACC,eAAO,KAAKL,OAAL,CAAaM,YAApB;AACA,OAHD;;AAKA;;;;;AAKAhB,mBAAaO,SAAb,CAAuBU,OAAvB,GAAiC,YACjC;AACC,eAAO,KAAKP,OAAL,CAAaQ,UAAb,IAA2B,CAAlC;AACA,OAHD;;AAKA;;;;;AAKAlB,mBAAaO,SAAb,CAAuBY,kBAAvB,GAA4C,YAC5C;AACC,YAAIC,MAAM,KAAKC,MAAL,EAAV;;AAEA,YAAID,OAAO,IAAX,EACA;AACC,iBAAOA,IAAIE,eAAX;AACA;;AAED,eAAO,IAAP;AACA,OAVD;;AAYA;;;;;;AAMAtB,mBAAaO,SAAb,CAAuBc,MAAvB,GAAgC,YAChC;AACC,YAAIE,MAAM,KAAKb,OAAL,CAAac,WAAvB;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAIC,SAASC,YAAT,IAAyB,CAAzB,IAA8BH,OAAO,IAArC,IAA6CA,IAAID,eAAJ,IAAuB,IAAxE,EACA;AACCC,gBAAMI,QAAQC,QAAR,CAAiB,KAAKlB,OAAL,CAAaM,YAA9B,CAAN;AACA;;AAED,eAAOO,GAAP;AACA,OAfD;;AAiBA;;;;;AAKAvB,mBAAaO,SAAb,CAAuBQ,OAAvB,GAAiC,YACjC;AACC,eAAO,KAAKL,OAAL,CAAaM,YAApB;AACA,OAHD;;AAKA;;;;;;AAMAhB,mBAAaO,SAAb,CAAuBsB,SAAvB,GAAmC,YACnC;AACC,eAAO,KAAKnB,OAAL,CAAaoB,MAApB;AACA,OAHD;;AAKA;;;;;AAKA9B,mBAAaO,SAAb,CAAuBwB,MAAvB,GAAgC,YAChC;AACC,YAAIC,OAAOC,cAAX,EACA;AACC,iBAAO,YACP;AACC,gBAAIC,MAAM,IAAID,cAAJ,EAAV;;AAEA;AACA,gBAAI,KAAKrB,QAAL,MAAmBsB,IAAIC,gBAA3B,EACA;AACCD,kBAAIC,gBAAJ,CAAqB,oCAArB;AACA;;AAED,mBAAOD,GAAP;AACA,WAXD;AAYA,SAdD,MAeK,IAAI,OAAOE,aAAP,IAAyB,WAA7B,EACL;AACC,iBAAO,YACP;AACC;AACA,mBAAO,IAAIA,aAAJ,CAAkB,mBAAlB,CAAP;AACA,WAJD;AAKA;AACD,OAzB+B,EAAhC;;AA2BA;;;;;;;;;;;;;;;AAeApC,mBAAaO,SAAb,CAAuB8B,IAAvB,GAA8B,UAASC,MAAT,EAAiBC,OAAjB,EAA0BC,OAA1B,EAAmCC,SAAnC,EAC9B;AACC,aAAK/B,OAAL,GAAe,KAAKqB,MAAL,EAAf;;AAEA,YAAI,KAAKrB,OAAL,IAAgB,IAApB,EACA;AACC,cAAI4B,UAAU,IAAd,EACA;AACC,iBAAK5B,OAAL,CAAagC,kBAAb,GAAkCf,QAAQgB,IAAR,CAAa,IAAb,EAAmB,YACrD;AACC,kBAAI,KAAK1B,OAAL,EAAJ,EACA;AACCqB,uBAAO,IAAP;AACA,qBAAK5B,OAAL,CAAakC,mBAAb,GAAmC,IAAnC;AACA;AACD,aAPiC,CAAlC;AAQA;;AAED,eAAKlC,OAAL,CAAamC,IAAb,CAAkB,KAAK1C,MAAvB,EAA+B,KAAKF,GAApC,EAAyC,KAAKG,KAA9C,EACC,KAAKC,QADN,EACgB,KAAKC,QADrB;AAEA,eAAKwC,iBAAL,CAAuB,KAAKpC,OAA5B,EAAqC,KAAKR,MAA1C;;AAEA,cAAI8B,OAAOC,cAAP,IAAyB,KAAKxB,eAAlC,EACA;AACC,iBAAKC,OAAL,CAAaD,eAAb,GAA+B,MAA/B;AACA;;AAED,cAAI,CAACsC,SAASC,SAAV,KAAwBvB,SAASC,YAAT,IAAyB,IAAzB,IAAiCD,SAASC,YAAT,GAAwB,CAAjF,KACHM,OAAOC,cADJ,IACsBO,WAAW,IADjC,IACyCC,aAAa,IAD1D,EAEA;AACC,iBAAK/B,OAAL,CAAa8B,OAAb,GAAuBA,OAAvB;AACA,iBAAK9B,OAAL,CAAa+B,SAAb,GAAyBA,SAAzB;AACA;;AAED,eAAK/B,OAAL,CAAa2B,IAAb,CAAkB,KAAKnC,MAAvB;AACA;AACD,OApCD;;AAsCA;;;;;;;;;;;;;;;;;;;;;;;;AAwBAF,mBAAaO,SAAb,CAAuBuC,iBAAvB,GAA2C,UAASpC,OAAT,EAAkBR,MAAlB,EAC3C;AACC,YAAIA,UAAU,IAAd,EACA;AACCQ,kBAAQuC,gBAAR,CAAyB,cAAzB,EAAyC,mCAAzC;AACA;AACD,OAND;;AAQA;;;;;;;;;;;AAWAjD,mBAAaO,SAAb,CAAuB2C,QAAvB,GAAkC,UAAS9B,GAAT,EAAc+B,MAAd,EAClC;AACC/B,cAAMA,OAAOK,QAAb;AACA,YAAI2B,MAAM,IAAV;;AAEA,YAAIhC,OAAOK,QAAX,EACA;AACC2B,gBAAMpB,OAAOqB,cAAb;AACArB,iBAAOqB,cAAP,GAAwB,IAAxB;AACA;;AAED,YAAIC,OAAOlC,IAAImC,aAAJ,CAAkB,MAAlB,CAAX;AACAD,aAAKE,YAAL,CAAkB,QAAlB,EAA4B,KAAKrD,MAAjC;AACAmD,aAAKE,YAAL,CAAkB,QAAlB,EAA4B,KAAKvD,GAAjC;;AAEA,YAAIkD,UAAU,IAAd,EACA;AACCG,eAAKE,YAAL,CAAkB,QAAlB,EAA4BL,MAA5B;AACA;;AAEDG,aAAKG,KAAL,CAAWC,OAAX,GAAqB,MAArB;AACAJ,aAAKG,KAAL,CAAWE,UAAX,GAAwB,QAAxB;;AAEA,YAAIC,OAAQ,KAAK1D,MAAL,CAAY2D,OAAZ,CAAoB,GAApB,IAA2B,CAA5B,GACV,KAAK3D,MAAL,CAAY4D,KAAZ,CAAkB,GAAlB,CADU,GAEV,KAAK5D,MAAL,CAAY4D,KAAZ,EAFD;;AAIA;AACA,aAAK,IAAIC,IAAE,CAAX,EAAcA,IAAEH,KAAKI,MAArB,EAA6BD,GAA7B,EACA;AACC,cAAIE,MAAML,KAAKG,CAAL,EAAQF,OAAR,CAAgB,GAAhB,CAAV;;AAEA,cAAII,MAAM,CAAV,EACA;AACC,gBAAIC,OAAON,KAAKG,CAAL,EAAQI,SAAR,CAAkB,CAAlB,EAAqBF,GAArB,CAAX;AACA,gBAAInD,QAAQ8C,KAAKG,CAAL,EAAQI,SAAR,CAAkBF,MAAI,CAAtB,CAAZ;;AAEA,gBAAI,KAAKtD,oBAAT,EACA;AACCG,sBAAQsD,mBAAmBtD,KAAnB,CAAR;AACA;;AAED,gBAAIuD,WAAWjD,IAAImC,aAAJ,CAAkB,UAAlB,CAAf;AACAc,qBAASb,YAAT,CAAsB,MAAtB,EAA8B,KAA9B;AACAa,qBAASb,YAAT,CAAsB,MAAtB,EAA8BU,IAA9B;AACAvC,oBAAQ2C,KAAR,CAAcD,QAAd,EAAwBvD,KAAxB;AACAwC,iBAAKiB,WAAL,CAAiBF,QAAjB;AACA;AACD;;AAEDjD,YAAIoD,IAAJ,CAASD,WAAT,CAAqBjB,IAArB;AACAA,aAAKmB,MAAL;;AAEA,YAAInB,KAAKoB,UAAL,IAAmB,IAAvB,EACA;AACCpB,eAAKoB,UAAL,CAAgBC,WAAhB,CAA4BrB,IAA5B;AACA;;AAED,YAAIF,OAAO,IAAX,EACA;AACCpB,iBAAOqB,cAAP,GAAwBD,GAAxB;AACA;AACD,OA9DD;;AAgEAwB,iBAAW5E,YAAX,GAA0B,OAAOA,YAAP,KAAwB,WAAxB,GAAsCA,YAAtC,GAAqD6E,SAA/E","file":"mxXmlRequest.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxXmlRequest\n * \n * XML HTTP request wrapper. See also: <mxUtils.get>, <mxUtils.post> and\n * <mxUtils.load>. This class provides a cross-browser abstraction for Ajax\n * requests.\n * \n * Encoding:\n * \n * For encoding parameter values, the built-in encodeURIComponent JavaScript\n * method must be used. For automatic encoding of post data in <mxEditor> the\n * <mxEditor.escapePostData> switch can be set to true (default). The encoding\n * will be carried out using the conte type of the page. That is, the page\n * containting the editor should contain a meta tag in the header, eg.\n * <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n * \n * Example:\n * \n * (code)\n * var onload = function(req)\n * {\n *   mxUtils.alert(req.getDocumentElement());\n * }\n * \n * var onerror = function(req)\n * {\n *   mxUtils.alert('Error');\n * }\n * new mxXmlRequest(url, 'key=value').send(onload, onerror);\n * (end)\n * \n * Sends an asynchronous POST request to the specified URL.\n * \n * Example:\n * \n * (code)\n * var req = new mxXmlRequest(url, 'key=value', 'POST', false);\n * req.send();\n * mxUtils.alert(req.getDocumentElement());\n * (end)\n * \n * Sends a synchronous POST request to the specified URL.\n * \n * Example:\n * \n * (code)\n * var encoder = new mxCodec();\n * var result = encoder.encode(graph.getModel());\n * var xml = encodeURIComponent(mxUtils.getXml(result));\n * new mxXmlRequest(url, 'xml='+xml).send();\n * (end)\n * \n * Sends an encoded graph model to the specified URL using xml as the\n * parameter name. The parameter can then be retrieved in C# as follows:\n * \n * (code)\n * string xml = HttpUtility.UrlDecode(context.Request.Params[\"xml\"]);\n * (end)\n * \n * Or in Java as follows:\n * \n * (code)\n * String xml = URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\");\n * (end)\n *\n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image.\n * \n * Constructor: mxXmlRequest\n * \n * Constructs an XML HTTP request.\n * \n * Parameters:\n * \n * url - Target URL of the request.\n * params - Form encoded parameters to send with a POST request.\n * method - String that specifies the request method. Possible values are\n * POST and GET. Default is POST.\n * async - Boolean specifying if an asynchronous request should be used.\n * Default is true.\n * username - String specifying the username to be used for the request.\n * password - String specifying the password to be used for the request.\n */\nfunction mxXmlRequest(url, params, method, async, username, password)\n{\n\tthis.url = url;\n\tthis.params = params;\n\tthis.method = method || 'POST';\n\tthis.async = (async != null) ? async : true;\n\tthis.username = username;\n\tthis.password = password;\n};\n\n/**\n * Variable: url\n * \n * Holds the target URL of the request.\n */\nmxXmlRequest.prototype.url = null;\n\n/**\n * Variable: params\n * \n * Holds the form encoded data for the POST request.\n */\nmxXmlRequest.prototype.params = null;\n\n/**\n * Variable: method\n * \n * Specifies the request method. Possible values are POST and GET. Default\n * is POST.\n */\nmxXmlRequest.prototype.method = null;\n\n/**\n * Variable: async\n * \n * Boolean indicating if the request is asynchronous.\n */\nmxXmlRequest.prototype.async = null;\n\n/**\n * Variable: binary\n * \n * Boolean indicating if the request is binary. This option is ignored in IE.\n * In all other browsers the requested mime type is set to\n * text/plain; charset=x-user-defined. Default is false.\n */\nmxXmlRequest.prototype.binary = false;\n\n/**\n * Variable: withCredentials\n * \n * Specifies if withCredentials should be used in HTML5-compliant browsers. Default is\n * false.\n */\nmxXmlRequest.prototype.withCredentials = false;\n\n/**\n * Variable: username\n * \n * Specifies the username to be used for authentication.\n */\nmxXmlRequest.prototype.username = null;\n\n/**\n * Variable: password\n * \n * Specifies the password to be used for authentication.\n */\nmxXmlRequest.prototype.password = null;\n\n/**\n * Variable: request\n * \n * Holds the inner, browser-specific request object.\n */\nmxXmlRequest.prototype.request = null;\n\n/**\n * Variable: decodeSimulateValues\n * \n * Specifies if request values should be decoded as URIs before setting the\n * textarea value in <simulate>. Defaults to false for backwards compatibility,\n * to avoid another decode on the server this should be set to true.\n */\nmxXmlRequest.prototype.decodeSimulateValues = false;\n\n/**\n * Function: isBinary\n * \n * Returns <binary>.\n */\nmxXmlRequest.prototype.isBinary = function()\n{\n\treturn this.binary;\n};\n\n/**\n * Function: setBinary\n * \n * Sets <binary>.\n */\nmxXmlRequest.prototype.setBinary = function(value)\n{\n\tthis.binary = value;\n};\n\n/**\n * Function: getText\n * \n * Returns the response as a string.\n */\nmxXmlRequest.prototype.getText = function()\n{\n\treturn this.request.responseText;\n};\n\n/**\n * Function: isReady\n * \n * Returns true if the response is ready.\n */\nmxXmlRequest.prototype.isReady = function()\n{\n\treturn this.request.readyState == 4;\n};\n\n/**\n * Function: getDocumentElement\n * \n * Returns the document element of the response XML document.\n */\nmxXmlRequest.prototype.getDocumentElement = function()\n{\n\tvar doc = this.getXml();\n\t\n\tif (doc != null)\n\t{\n\t\treturn doc.documentElement;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getXml\n * \n * Returns the response as an XML document. Use <getDocumentElement> to get\n * the document element of the XML document.\n */\nmxXmlRequest.prototype.getXml = function()\n{\n\tvar xml = this.request.responseXML;\n\t\n\t// Handles missing response headers in IE, the first condition handles\n\t// the case where responseXML is there, but using its nodes leads to\n\t// type errors in the mxCellCodec when putting the nodes into a new\n\t// document. This happens in IE9 standards mode and with XML user\n\t// objects only, as they are used directly as values in cells.\n\tif (document.documentMode >= 9 || xml == null || xml.documentElement == null)\n\t{\n\t\txml = mxUtils.parseXml(this.request.responseText);\n\t}\n\t\n\treturn xml;\n};\n\n/**\n * Function: getText\n * \n * Returns the response as a string.\n */\nmxXmlRequest.prototype.getText = function()\n{\n\treturn this.request.responseText;\n};\n\n/**\n * Function: getStatus\n * \n * Returns the status as a number, eg. 404 for \"Not found\" or 200 for \"OK\".\n * Note: The NS_ERROR_NOT_AVAILABLE for invalid responses cannot be cought.\n */\nmxXmlRequest.prototype.getStatus = function()\n{\n\treturn this.request.status;\n};\n\n/**\n * Function: create\n * \n * Creates and returns the inner <request> object.\n */\nmxXmlRequest.prototype.create = function()\n{\n\tif (window.XMLHttpRequest)\n\t{\n\t\treturn function()\n\t\t{\n\t\t\tvar req = new XMLHttpRequest();\n\t\t\t\n\t\t\t// TODO: Check for overrideMimeType required here?\n\t\t\tif (this.isBinary() && req.overrideMimeType)\n\t\t\t{\n\t\t\t\treq.overrideMimeType('text/plain; charset=x-user-defined');\n\t\t\t}\n\n\t\t\treturn req;\n\t\t};\n\t}\n\telse if (typeof(ActiveXObject) != 'undefined')\n\t{\n\t\treturn function()\n\t\t{\n\t\t\t// TODO: Implement binary option\n\t\t\treturn new ActiveXObject('Microsoft.XMLHTTP');\n\t\t};\n\t}\n}();\n\n/**\n * Function: send\n * \n * Send the <request> to the target URL using the specified functions to\n * process the response asychronously.\n * \n * Note: Due to technical limitations, onerror is currently ignored.\n * \n * Parameters:\n * \n * onload - Function to be invoked if a successful response was received.\n * onerror - Function to be called on any error.\n * timeout - Optional timeout in ms before calling ontimeout.\n * ontimeout - Optional function to execute on timeout.\n */\nmxXmlRequest.prototype.send = function(onload, onerror, timeout, ontimeout)\n{\n\tthis.request = this.create();\n\t\n\tif (this.request != null)\n\t{\n\t\tif (onload != null)\n\t\t{\n\t\t\tthis.request.onreadystatechange = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tif (this.isReady())\n\t\t\t\t{\n\t\t\t\t\tonload(this);\n\t\t\t\t\tthis.request.onreadystatechaange = null;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.request.open(this.method, this.url, this.async,\n\t\t\tthis.username, this.password);\n\t\tthis.setRequestHeaders(this.request, this.params);\n\t\t\n\t\tif (window.XMLHttpRequest && this.withCredentials)\n\t\t{\n\t\t\tthis.request.withCredentials = 'true';\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_QUIRKS && (document.documentMode == null || document.documentMode > 9) &&\n\t\t\twindow.XMLHttpRequest && timeout != null && ontimeout != null)\n\t\t{\n\t\t\tthis.request.timeout = timeout;\n\t\t\tthis.request.ontimeout = ontimeout;\n\t\t}\n\t\t\t\t\n\t\tthis.request.send(this.params);\n\t}\n};\n\n/**\n * Function: setRequestHeaders\n * \n * Sets the headers for the given request and parameters. This sets the\n * content-type to application/x-www-form-urlencoded if any params exist.\n * \n * Example:\n * \n * (code)\n * request.setRequestHeaders = function(request, params)\n * {\n *   if (params != null)\n *   {\n *     request.setRequestHeader('Content-Type',\n *             'multipart/form-data');\n *     request.setRequestHeader('Content-Length',\n *             params.length);\n *   }\n * };\n * (end)\n * \n * Use the code above before calling <send> if you require a\n * multipart/form-data request.   \n */\nmxXmlRequest.prototype.setRequestHeaders = function(request, params)\n{\n\tif (params != null)\n\t{\n\t\trequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\t}\n};\n\n/**\n * Function: simulate\n * \n * Creates and posts a request to the given target URL using a dynamically\n * created form inside the given document.\n * \n * Parameters:\n * \n * docs - Document that contains the form element.\n * target - Target to send the form result to.\n */\nmxXmlRequest.prototype.simulate = function(doc, target)\n{\n\tdoc = doc || document;\n\tvar old = null;\n\n\tif (doc == document)\n\t{\n\t\told = window.onbeforeunload;\t\t\n\t\twindow.onbeforeunload = null;\n\t}\n\t\t\t\n\tvar form = doc.createElement('form');\n\tform.setAttribute('method', this.method);\n\tform.setAttribute('action', this.url);\n\n\tif (target != null)\n\t{\n\t\tform.setAttribute('target', target);\n\t}\n\n\tform.style.display = 'none';\n\tform.style.visibility = 'hidden';\n\t\n\tvar pars = (this.params.indexOf('&') > 0) ?\n\t\tthis.params.split('&') :\n\t\tthis.params.split();\n\n\t// Adds the parameters as textareas to the form\n\tfor (var i=0; i<pars.length; i++)\n\t{\n\t\tvar pos = pars[i].indexOf('=');\n\t\t\n\t\tif (pos > 0)\n\t\t{\n\t\t\tvar name = pars[i].substring(0, pos);\n\t\t\tvar value = pars[i].substring(pos+1);\n\t\t\t\n\t\t\tif (this.decodeSimulateValues)\n\t\t\t{\n\t\t\t\tvalue = decodeURIComponent(value);\n\t\t\t}\n\t\t\t\n\t\t\tvar textarea = doc.createElement('textarea');\n\t\t\ttextarea.setAttribute('wrap', 'off');\n\t\t\ttextarea.setAttribute('name', name);\n\t\t\tmxUtils.write(textarea, value);\n\t\t\tform.appendChild(textarea);\n\t\t}\n\t}\n\t\n\tdoc.body.appendChild(form);\n\tform.submit();\n\t\n\tif (form.parentNode != null)\n\t{\n\t\tform.parentNode.removeChild(form);\n\t}\n\n\tif (old != null)\n\t{\t\t\n\t\twindow.onbeforeunload = old;\n\t}\n};\n\n__mxOutput.mxXmlRequest = typeof mxXmlRequest !== 'undefined' ? mxXmlRequest : undefined;\n"]}