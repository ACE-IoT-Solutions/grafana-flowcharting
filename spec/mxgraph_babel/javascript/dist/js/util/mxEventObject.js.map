{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/util/mxEventObject.js"],"names":["mxEventObject","name","properties","i","arguments","length","prototype","consumed","getName","getProperties","getProperty","key","isConsumed","consume","__mxOutput","undefined"],"mappings":";;;;;AAAA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,WAASA,aAAT,CAAuBC,IAAvB,EACA;AACC,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,UAAL,GAAkB,EAAlB;;AAEA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIC,UAAUC,MAA9B,EAAsCF,KAAK,CAA3C,EACA;AACC,UAAIC,UAAUD,IAAI,CAAd,KAAoB,IAAxB,EACA;AACC,aAAKD,UAAL,CAAgBE,UAAUD,CAAV,CAAhB,IAAgCC,UAAUD,IAAI,CAAd,CAAhC;AACA;AACD;AACD,G;;;AAAA;;AAED;;;;;AAKAH,oBAAcM,SAAd,CAAwBL,IAAxB,GAA+B,IAA/B;;AAEA;;;;;AAKAD,oBAAcM,SAAd,CAAwBJ,UAAxB,GAAqC,IAArC;;AAEA;;;;;AAKAF,oBAAcM,SAAd,CAAwBC,QAAxB,GAAmC,KAAnC;;AAEA;;;;;AAKAP,oBAAcM,SAAd,CAAwBE,OAAxB,GAAkC,YAClC;AACC,eAAO,KAAKP,IAAZ;AACA,OAHD;;AAKA;;;;;AAKAD,oBAAcM,SAAd,CAAwBG,aAAxB,GAAwC,YACxC;AACC,eAAO,KAAKP,UAAZ;AACA,OAHD;;AAKA;;;;;AAKAF,oBAAcM,SAAd,CAAwBI,WAAxB,GAAsC,UAASC,GAAT,EACtC;AACC,eAAO,KAAKT,UAAL,CAAgBS,GAAhB,CAAP;AACA,OAHD;;AAKA;;;;;AAKAX,oBAAcM,SAAd,CAAwBM,UAAxB,GAAqC,YACrC;AACC,eAAO,KAAKL,QAAZ;AACA,OAHD;;AAKA;;;;;AAKAP,oBAAcM,SAAd,CAAwBO,OAAxB,GAAkC,YAClC;AACC,aAAKN,QAAL,GAAgB,IAAhB;AACA,OAHD;;AAKAO,iBAAWd,aAAX,GAA2B,OAAOA,aAAP,KAAyB,WAAzB,GAAuCA,aAAvC,GAAuDe,SAAlF","file":"mxEventObject.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEventObject\n * \n * The mxEventObject is a wrapper for all properties of a single event.\n * Additionally, it also offers functions to consume the event and check if it\n * was consumed as follows:\n * \n * (code)\n * evt.consume();\n * INV: evt.isConsumed() == true\n * (end)\n * \n * Constructor: mxEventObject\n *\n * Constructs a new event object with the specified name. An optional\n * sequence of key, value pairs can be appended to define properties.\n * \n * Example:\n *\n * (code)\n * new mxEventObject(\"eventName\", key1, val1, .., keyN, valN)\n * (end)\n */\nfunction mxEventObject(name)\n{\n\tthis.name = name;\n\tthis.properties = [];\n\t\n\tfor (var i = 1; i < arguments.length; i += 2)\n\t{\n\t\tif (arguments[i + 1] != null)\n\t\t{\n\t\t\tthis.properties[arguments[i]] = arguments[i + 1];\n\t\t}\n\t}\n};\n\n/**\n * Variable: name\n *\n * Holds the name.\n */\nmxEventObject.prototype.name = null;\n\n/**\n * Variable: properties\n *\n * Holds the properties as an associative array.\n */\nmxEventObject.prototype.properties = null;\n\n/**\n * Variable: consumed\n *\n * Holds the consumed state. Default is false.\n */\nmxEventObject.prototype.consumed = false;\n\n/**\n * Function: getName\n * \n * Returns <name>.\n */\nmxEventObject.prototype.getName = function()\n{\n\treturn this.name;\n};\n\n/**\n * Function: getProperties\n * \n * Returns <properties>.\n */\nmxEventObject.prototype.getProperties = function()\n{\n\treturn this.properties;\n};\n\n/**\n * Function: getProperty\n * \n * Returns the property for the given key.\n */\nmxEventObject.prototype.getProperty = function(key)\n{\n\treturn this.properties[key];\n};\n\n/**\n * Function: isConsumed\n *\n * Returns true if the event has been consumed.\n */\nmxEventObject.prototype.isConsumed = function()\n{\n\treturn this.consumed;\n};\n\n/**\n * Function: consume\n *\n * Consumes the event.\n */\nmxEventObject.prototype.consume = function()\n{\n\tthis.consumed = true;\n};\n\n__mxOutput.mxEventObject = typeof mxEventObject !== 'undefined' ? mxEventObject : undefined;\n"]}