{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/util/mxImageExport.js"],"names":["mxImageExport","prototype","includeOverlays","drawState","state","canvas","visitStatesRecursive","mxUtils","bind","drawCellState","apply","arguments","drawOverlays","visitor","graph","view","childCount","model","getChildCount","cell","i","childState","getState","getChildAt","getLinkForCellState","link","setLink","drawShape","drawText","shape","mxShape","checkBounds","save","paint","restore","text","overlays","visit","id","__mxOutput","undefined"],"mappings":"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","file":"mxImageExport.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageExport\n * \n * Creates a new image export instance to be used with an export canvas. Here\n * is an example that uses this class to create an image via a backend using\n * <mxXmlExportCanvas>.\n * \n * (code)\n * var xmlDoc = mxUtils.createXmlDocument();\n * var root = xmlDoc.createElement('output');\n * xmlDoc.appendChild(root);\n * \n * var xmlCanvas = new mxXmlCanvas2D(root);\n * var imgExport = new mxImageExport();\n * imgExport.drawState(graph.getView().getState(graph.model.root), xmlCanvas);\n * \n * var bounds = graph.getGraphBounds();\n * var w = Math.ceil(bounds.x + bounds.width);\n * var h = Math.ceil(bounds.y + bounds.height);\n * \n * var xml = mxUtils.getXml(root);\n * new mxXmlRequest('export', 'format=png&w=' + w +\n * \t\t'&h=' + h + '&bg=#F9F7ED&xml=' + encodeURIComponent(xml))\n * \t\t.simulate(document, '_blank');\n * (end)\n * \n * Constructor: mxImageExport\n * \n * Constructs a new image export.\n */\nfunction mxImageExport() { };\n\n/**\n * Variable: includeOverlays\n * \n * Specifies if overlays should be included in the export. Default is false.\n */\nmxImageExport.prototype.includeOverlays = false;\n\n/**\n * Function: drawState\n * \n * Draws the given state and all its descendants to the given canvas.\n */\nmxImageExport.prototype.drawState = function(state, canvas)\n{\n\tif (state != null)\n\t{\n\t\tthis.visitStatesRecursive(state, canvas, mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.drawCellState.apply(this, arguments);\n\t\t}));\n\t\t\t\t\n\t\t// Paints the overlays\n\t\tif (this.includeOverlays)\n\t\t{\n\t\t\tthis.visitStatesRecursive(state, canvas, mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.drawOverlays.apply(this, arguments);\n\t\t\t}));\n\t\t}\n\t}\n};\n\n/**\n * Function: drawState\n * \n * Draws the given state and all its descendants to the given canvas.\n */\nmxImageExport.prototype.visitStatesRecursive = function(state, canvas, visitor)\n{\n\tif (state != null)\n\t{\n\t\tvisitor(state, canvas);\n\t\t\n\t\tvar graph = state.view.graph;\n\t\tvar childCount = graph.model.getChildCount(state.cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar childState = graph.view.getState(graph.model.getChildAt(state.cell, i));\n\t\t\tthis.visitStatesRecursive(childState, canvas, visitor);\n\t\t}\n\t}\n};\n\n/**\n * Function: getLinkForCellState\n * \n * Returns the link for the given cell state and canvas. This returns null.\n */\nmxImageExport.prototype.getLinkForCellState = function(state, canvas)\n{\n\treturn null;\n};\n\n/**\n * Function: drawCellState\n * \n * Draws the given state to the given canvas.\n */\nmxImageExport.prototype.drawCellState = function(state, canvas)\n{\n\t// Experimental feature\n\tvar link = this.getLinkForCellState(state, canvas);\n\t\n\tif (link != null)\n\t{\n\t\tcanvas.setLink(link);\n\t}\n\t\n\t// Paints the shape and text\n\tthis.drawShape(state, canvas);\n\tthis.drawText(state, canvas);\n\n\tif (link != null)\n\t{\n\t\tcanvas.setLink(null);\n\t}\n};\n\n/**\n * Function: drawShape\n * \n * Draws the shape of the given state.\n */\nmxImageExport.prototype.drawShape = function(state, canvas)\n{\n\tif (state.shape instanceof mxShape && state.shape.checkBounds())\n\t{\n\t\tcanvas.save();\n\t\tstate.shape.paint(canvas);\n\t\tcanvas.restore();\n\t}\n};\n\n/**\n * Function: drawText\n * \n * Draws the text of the given state.\n */\nmxImageExport.prototype.drawText = function(state, canvas)\n{\n\tif (state.text != null && state.text.checkBounds())\n\t{\n\t\tcanvas.save();\n\t\tstate.text.paint(canvas);\n\t\tcanvas.restore();\n\t}\n};\n\n/**\n * Function: drawOverlays\n * \n * Draws the overlays for the given state. This is called if <includeOverlays>\n * is true.\n */\nmxImageExport.prototype.drawOverlays = function(state, canvas)\n{\n\tif (state.overlays != null)\n\t{\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tif (shape instanceof mxShape)\n\t\t\t{\n\t\t\t\tshape.paint(canvas);\n\t\t\t}\n\t\t});\n\t}\n};\n\n\n__mxOutput.mxImageExport = typeof mxImageExport !== 'undefined' ? mxImageExport : undefined;\n"]}