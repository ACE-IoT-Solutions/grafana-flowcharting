{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/util/mxDictionary.js"],"names":["mxDictionary","clear","prototype","map","get","key","id","mxObjectIdentity","put","value","previous","remove","getKeys","result","push","getValues","visit","visitor","__mxOutput","undefined"],"mappings":";;;;;AAAA;;;;AAIA;;;;;;;;;;AAUA,WAASA,YAAT,GACA;AACC,SAAKC,KAAL;AACA,G;;;AAAA;;AAED;;;;;AAKAD,mBAAaE,SAAb,CAAuBC,GAAvB,GAA6B,IAA7B;;AAEA;;;;;AAKAH,mBAAaE,SAAb,CAAuBD,KAAvB,GAA+B,YAC/B;AACC,aAAKE,GAAL,GAAW,EAAX;AACA,OAHD;;AAKA;;;;;AAKAH,mBAAaE,SAAb,CAAuBE,GAAvB,GAA6B,UAASC,GAAT,EAC7B;AACC,YAAIC,KAAKC,iBAAiBH,GAAjB,CAAqBC,GAArB,CAAT;;AAEA,eAAO,KAAKF,GAAL,CAASG,EAAT,CAAP;AACA,OALD;;AAOA;;;;;;AAMAN,mBAAaE,SAAb,CAAuBM,GAAvB,GAA6B,UAASH,GAAT,EAAcI,KAAd,EAC7B;AACC,YAAIH,KAAKC,iBAAiBH,GAAjB,CAAqBC,GAArB,CAAT;AACA,YAAIK,WAAW,KAAKP,GAAL,CAASG,EAAT,CAAf;AACA,aAAKH,GAAL,CAASG,EAAT,IAAeG,KAAf;;AAEA,eAAOC,QAAP;AACA,OAPD;;AASA;;;;;;AAMAV,mBAAaE,SAAb,CAAuBS,MAAvB,GAAgC,UAASN,GAAT,EAChC;AACC,YAAIC,KAAKC,iBAAiBH,GAAjB,CAAqBC,GAArB,CAAT;AACA,YAAIK,WAAW,KAAKP,GAAL,CAASG,EAAT,CAAf;AACA,eAAO,KAAKH,GAAL,CAASG,EAAT,CAAP;;AAEA,eAAOI,QAAP;AACA,OAPD;;AASA;;;;;AAKAV,mBAAaE,SAAb,CAAuBU,OAAvB,GAAiC,YACjC;AACC,YAAIC,SAAS,EAAb;;AAEA,aAAK,IAAIR,GAAT,IAAgB,KAAKF,GAArB,EACA;AACCU,iBAAOC,IAAP,CAAYT,GAAZ;AACA;;AAED,eAAOQ,MAAP;AACA,OAVD;;AAYA;;;;;AAKAb,mBAAaE,SAAb,CAAuBa,SAAvB,GAAmC,YACnC;AACC,YAAIF,SAAS,EAAb;;AAEA,aAAK,IAAIR,GAAT,IAAgB,KAAKF,GAArB,EACA;AACCU,iBAAOC,IAAP,CAAY,KAAKX,GAAL,CAASE,GAAT,CAAZ;AACA;;AAED,eAAOQ,MAAP;AACA,OAVD;;AAYA;;;;;;;;;;;AAWAb,mBAAaE,SAAb,CAAuBc,KAAvB,GAA+B,UAASC,OAAT,EAC/B;AACC,aAAK,IAAIZ,GAAT,IAAgB,KAAKF,GAArB,EACA;AACCc,kBAAQZ,GAAR,EAAa,KAAKF,GAAL,CAASE,GAAT,CAAb;AACA;AACD,OAND;;AAQAa,iBAAWlB,YAAX,GAA0B,OAAOA,YAAP,KAAwB,WAAxB,GAAsCA,YAAtC,GAAqDmB,SAA/E","file":"mxDictionary.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDictionary\n *\n * A wrapper class for an associative array with object keys. Note: This\n * implementation uses <mxObjectIdentitiy> to turn object keys into strings.\n * \n * Constructor: mxEventSource\n *\n * Constructs a new dictionary which allows object to be used as keys.\n */\nfunction mxDictionary()\n{\n\tthis.clear();\n};\n\n/**\n * Function: map\n *\n * Stores the (key, value) pairs in this dictionary.\n */\nmxDictionary.prototype.map = null;\n\n/**\n * Function: clear\n *\n * Clears the dictionary.\n */\nmxDictionary.prototype.clear = function()\n{\n\tthis.map = {};\n};\n\n/**\n * Function: get\n *\n * Returns the value for the given key.\n */\nmxDictionary.prototype.get = function(key)\n{\n\tvar id = mxObjectIdentity.get(key);\n\t\n\treturn this.map[id];\n};\n\n/**\n * Function: put\n *\n * Stores the value under the given key and returns the previous\n * value for that key.\n */\nmxDictionary.prototype.put = function(key, value)\n{\n\tvar id = mxObjectIdentity.get(key);\n\tvar previous = this.map[id];\n\tthis.map[id] = value;\n\t\n\treturn previous;\n};\n\n/**\n * Function: remove\n *\n * Removes the value for the given key and returns the value that\n * has been removed.\n */\nmxDictionary.prototype.remove = function(key)\n{\n\tvar id = mxObjectIdentity.get(key);\n\tvar previous = this.map[id];\n\tdelete this.map[id];\n\t\n\treturn previous;\n};\n\n/**\n * Function: getKeys\n *\n * Returns all keys as an array.\n */\nmxDictionary.prototype.getKeys = function()\n{\n\tvar result = [];\n\t\n\tfor (var key in this.map)\n\t{\n\t\tresult.push(key);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getValues\n *\n * Returns all values as an array.\n */\nmxDictionary.prototype.getValues = function()\n{\n\tvar result = [];\n\t\n\tfor (var key in this.map)\n\t{\n\t\tresult.push(this.map[key]);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: visit\n *\n * Visits all entries in the dictionary using the given function with the\n * following signature: function(key, value) where key is a string and\n * value is an object.\n * \n * Parameters:\n * \n * visitor - A function that takes the key and value as arguments.\n */\nmxDictionary.prototype.visit = function(visitor)\n{\n\tfor (var key in this.map)\n\t{\n\t\tvisitor(key, this.map[key]);\n\t}\n};\n\n__mxOutput.mxDictionary = typeof mxDictionary !== 'undefined' ? mxDictionary : undefined;\n"]}