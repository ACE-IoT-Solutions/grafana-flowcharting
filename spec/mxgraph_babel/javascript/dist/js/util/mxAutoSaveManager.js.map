{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/util/mxAutoSaveManager.js"],"names":["mxAutoSaveManager","graph","changeHandler","mxUtils","bind","sender","evt","isEnabled","graphModelChanged","getProperty","changes","setGraph","prototype","mxEventSource","constructor","autoSaveDelay","autoSaveThrottle","autoSaveThreshold","ignoredChanges","lastSnapshot","enabled","setEnabled","value","getModel","removeListener","addListener","mxEvent","CHANGE","save","now","Date","getTime","dt","reset","destroy","__mxOutput","undefined"],"mappings":"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","file":"mxAutoSaveManager.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxAutoSaveManager\n * \n * Manager for automatically saving diagrams. The <save> hook must be\n * implemented.\n * \n * Example:\n * \n * (code)\n * var mgr = new mxAutoSaveManager(editor.graph);\n * mgr.save = function()\n * {\n *   mxLog.show();\n *   mxLog.debug('save');\n * };\n * (end)\n * \n * Constructor: mxAutoSaveManager\n *\n * Constructs a new automatic layout for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxAutoSaveManager(graph)\n{\n\t// Notifies the manager of a change\n\tthis.changeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.graphModelChanged(evt.getProperty('edit').changes);\n\t\t}\n\t});\n\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxAutoSaveManager.prototype = new mxEventSource();\nmxAutoSaveManager.prototype.constructor = mxAutoSaveManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxAutoSaveManager.prototype.graph = null;\n\n/**\n * Variable: autoSaveDelay\n * \n * Minimum amount of seconds between two consecutive autosaves. Eg. a\n * value of 1 (s) means the graph is not stored more than once per second.\n * Default is 10.\n */\nmxAutoSaveManager.prototype.autoSaveDelay = 10;\n\n/**\n * Variable: autoSaveThrottle\n * \n * Minimum amount of seconds between two consecutive autosaves triggered by\n * more than <autoSaveThreshhold> changes within a timespan of less than\n * <autoSaveDelay> seconds. Eg. a value of 1 (s) means the graph is not\n * stored more than once per second even if there are more than\n * <autoSaveThreshold> changes within that timespan. Default is 2.\n */\nmxAutoSaveManager.prototype.autoSaveThrottle = 2;\n\n/**\n * Variable: autoSaveThreshold\n * \n * Minimum amount of ignored changes before an autosave. Eg. a value of 2\n * means after 2 change of the graph model the autosave will trigger if the\n * condition below is true. Default is 5.\n */\nmxAutoSaveManager.prototype.autoSaveThreshold = 5;\n\n/**\n * Variable: ignoredChanges\n * \n * Counter for ignored changes in autosave.\n */\nmxAutoSaveManager.prototype.ignoredChanges = 0;\n\n/**\n * Variable: lastSnapshot\n * \n * Used for autosaving. See <autosave>.\n */\nmxAutoSaveManager.prototype.lastSnapshot = 0;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxAutoSaveManager.prototype.enabled = true;\n\n/**\n * Variable: changeHandler\n * \n * Holds the function that handles graph model changes.\n */\nmxAutoSaveManager.prototype.changeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxAutoSaveManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxAutoSaveManager.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the layouts operate on.\n */\nmxAutoSaveManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n\t}\n};\n\n/**\n * Function: save\n * \n * Empty hook that is called if the graph should be saved.\n */\nmxAutoSaveManager.prototype.save = function()\n{\n\t// empty\n};\n\n/**\n * Function: graphModelChanged\n * \n * Invoked when the graph model has changed.\n */\nmxAutoSaveManager.prototype.graphModelChanged = function(changes)\n{\n\tvar now = new Date().getTime();\n\tvar dt = (now - this.lastSnapshot) / 1000;\n\t\n\tif (dt > this.autoSaveDelay ||\n\t\t(this.ignoredChanges >= this.autoSaveThreshold &&\n\t\t dt > this.autoSaveThrottle))\n\t{\n\t\tthis.save();\n\t\tthis.reset();\n\t}\n\telse\n\t{\n\t\t// Increments the number of ignored changes\n\t\tthis.ignoredChanges++;\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets all counters.\n */\nmxAutoSaveManager.prototype.reset = function()\n{\n\tthis.lastSnapshot = new Date().getTime();\n\tthis.ignoredChanges = 0;\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxAutoSaveManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxAutoSaveManager = typeof mxAutoSaveManager !== 'undefined' ? mxAutoSaveManager : undefined;\n"]}