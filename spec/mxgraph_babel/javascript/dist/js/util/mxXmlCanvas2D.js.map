{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/util/mxXmlCanvas2D.js"],"names":["mxXmlCanvas2D","root","mxAbstractCanvas2D","call","writeDefaults","mxUtils","extend","prototype","textEnabled","compressed","elem","createElement","setAttribute","mxConstants","DEFAULT_FONTFAMILY","appendChild","DEFAULT_FONTSIZE","SHADOWCOLOR","SHADOW_OPACITY","SHADOW_OFFSET_X","SHADOW_OFFSET_Y","format","value","parseFloat","toFixed","name","ownerDocument","save","apply","arguments","restore","scale","translate","dx","dy","rotate","theta","flipH","flipV","cx","cy","setAlpha","state","alpha","setFillAlpha","fillAlpha","setStrokeAlpha","strokeAlpha","setFillColor","NONE","fillColor","setGradient","color1","color2","x","y","w","h","direction","alpha1","alpha2","setStrokeColor","strokeColor","setStrokeWidth","strokeWidth","setDashed","fixDash","dashed","setDashPattern","dashPattern","setLineCap","lineCap","setLineJoin","lineJoin","setMiterLimit","miterLimit","setFontColor","fontColor","setFontBackgroundColor","fontBackgroundColor","setFontBorderColor","fontBorderColor","setFontSize","fontSize","setFontFamily","fontFamily","setFontStyle","fontStyle","setShadow","shadow","setShadowColor","shadowColor","setShadowAlpha","shadowAlpha","setShadowOffset","shadowDx","shadowDy","rect","roundrect","ellipse","image","src","aspect","converter","convert","begin","lastX","lastY","moveTo","lineTo","quadTo","x1","y1","x2","y2","curveTo","x3","y3","close","text","str","align","valign","wrap","overflow","clip","rotation","dir","isNode","getOuterHtml","stroke","fill","fillAndStroke","__mxOutput","undefined"],"mappings":"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","file":"mxXmlCanvas2D.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxXmlCanvas2D\n *\n * Base class for all canvases. The following methods make up the public\n * interface of the canvas 2D for all painting in mxGraph:\n * \n * - <save>, <restore>\n * - <scale>, <translate>, <rotate>\n * - <setAlpha>, <setFillAlpha>, <setStrokeAlpha>, <setFillColor>, <setGradient>,\n *   <setStrokeColor>, <setStrokeWidth>, <setDashed>, <setDashPattern>, <setLineCap>, \n *   <setLineJoin>, <setMiterLimit>\n * - <setFontColor>, <setFontBackgroundColor>, <setFontBorderColor>, <setFontSize>,\n *   <setFontFamily>, <setFontStyle>\n * - <setShadow>, <setShadowColor>, <setShadowAlpha>, <setShadowOffset>\n * - <rect>, <roundrect>, <ellipse>, <image>, <text>\n * - <begin>, <moveTo>, <lineTo>, <quadTo>, <curveTo>\n * - <stroke>, <fill>, <fillAndStroke>\n * \n * <mxAbstractCanvas2D.arcTo> is an additional method for drawing paths. This is\n * a synthetic method, meaning that it is turned into a sequence of curves by\n * default. Subclassers may add native support for arcs.\n * \n * Constructor: mxXmlCanvas2D\n *\n * Constructs a new abstract canvas.\n */\nfunction mxXmlCanvas2D(root)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n\n\t// Writes default settings;\n\tthis.writeDefaults();\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxXmlCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabled. Default is true.\n */\nmxXmlCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: compressed\n * \n * Specifies if the output should be compressed by removing redundant calls.\n * Default is true.\n */\nmxXmlCanvas2D.prototype.compressed = true;\n\n/**\n * Function: writeDefaults\n * \n * Writes the rendering defaults to <root>:\n */\nmxXmlCanvas2D.prototype.writeDefaults = function()\n{\n\tvar elem;\n\t\n\t// Writes font defaults\n\telem = this.createElement('fontfamily');\n\telem.setAttribute('family', mxConstants.DEFAULT_FONTFAMILY);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('fontsize');\n\telem.setAttribute('size', mxConstants.DEFAULT_FONTSIZE);\n\tthis.root.appendChild(elem);\n\t\n\t// Writes shadow defaults\n\telem = this.createElement('shadowcolor');\n\telem.setAttribute('color', mxConstants.SHADOWCOLOR);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('shadowalpha');\n\telem.setAttribute('alpha', mxConstants.SHADOW_OPACITY);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('shadowoffset');\n\telem.setAttribute('dx', mxConstants.SHADOW_OFFSET_X);\n\telem.setAttribute('dy', mxConstants.SHADOW_OFFSET_Y);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: format\n * \n * Returns a formatted number with 2 decimal places.\n */\nmxXmlCanvas2D.prototype.format = function(value)\n{\n\treturn parseFloat(parseFloat(value).toFixed(2));\n};\n\n/**\n * Function: createElement\n * \n * Creates the given element using the owner document of <root>.\n */\nmxXmlCanvas2D.prototype.createElement = function(name)\n{\n\treturn this.root.ownerDocument.createElement(name);\n};\n\n/**\n * Function: save\n * \n * Saves the drawing state.\n */\nmxXmlCanvas2D.prototype.save = function()\n{\n\tif (this.compressed)\n\t{\n\t\tmxAbstractCanvas2D.prototype.save.apply(this, arguments);\n\t}\n\t\n\tthis.root.appendChild(this.createElement('save'));\n};\n\n/**\n * Function: restore\n * \n * Restores the drawing state.\n */\nmxXmlCanvas2D.prototype.restore = function()\n{\n\tif (this.compressed)\n\t{\n\t\tmxAbstractCanvas2D.prototype.restore.apply(this, arguments);\n\t}\n\t\n\tthis.root.appendChild(this.createElement('restore'));\n};\n\n/**\n * Function: scale\n * \n * Scales the output.\n * \n * Parameters:\n * \n * scale - Number that represents the scale where 1 is equal to 100%.\n */\nmxXmlCanvas2D.prototype.scale = function(value)\n{\n        var elem = this.createElement('scale');\n        elem.setAttribute('scale', value);\n        this.root.appendChild(elem);\n};\n\n/**\n * Function: translate\n * \n * Translates the output.\n * \n * Parameters:\n * \n * dx - Number that specifies the horizontal translation.\n * dy - Number that specifies the vertical translation.\n */\nmxXmlCanvas2D.prototype.translate = function(dx, dy)\n{\n\tvar elem = this.createElement('translate');\n\telem.setAttribute('dx', this.format(dx));\n\telem.setAttribute('dy', this.format(dy));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: rotate\n * \n * Rotates and/or flips the output around a given center. (Note: Due to\n * limitations in VML, the rotation cannot be concatenated.)\n * \n * Parameters:\n * \n * theta - Number that represents the angle of the rotation (in degrees).\n * flipH - Boolean indicating if the output should be flipped horizontally.\n * flipV - Boolean indicating if the output should be flipped vertically.\n * cx - Number that represents the x-coordinate of the rotation center.\n * cy - Number that represents the y-coordinate of the rotation center.\n */\nmxXmlCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tvar elem = this.createElement('rotate');\n\t\n\tif (theta != 0 || flipH || flipV)\n\t{\n\t\telem.setAttribute('theta', this.format(theta));\n\t\telem.setAttribute('flipH', (flipH) ? '1' : '0');\n\t\telem.setAttribute('flipV', (flipV) ? '1' : '0');\n\t\telem.setAttribute('cx', this.format(cx));\n\t\telem.setAttribute('cy', this.format(cy));\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setAlpha\n * \n * Sets the current alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.alpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('alpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFillAlpha\n * \n * Sets the current fill alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new fill alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setFillAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.fillAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setFillAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('fillalpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setStrokeAlpha\n * \n * Sets the current stroke alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new stroke alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setStrokeAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokealpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFillColor\n * \n * Sets the current fill color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFillColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tif (this.compressed)\n\t{\n\t\tif (this.state.fillColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setFillColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('fillcolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setGradient\n * \n * Sets the gradient. Note that the coordinates may be ignored by some implementations.\n * \n * Parameters:\n * \n * color1 - Hexadecimal representation of the start color.\n * color2 - Hexadecimal representation of the end color.\n * x - X-coordinate of the gradient region.\n * y - y-coordinate of the gradient region.\n * w - Width of the gradient region.\n * h - Height of the gradient region.\n * direction - One of <mxConstants.DIRECTION_NORTH>, <mxConstants.DIRECTION_EAST>,\n * <mxConstants.DIRECTION_SOUTH> or <mxConstants.DIRECTION_WEST>.\n * alpha1 - Optional alpha of the start color. Default is 1. Possible values\n * are between 1 (opaque) and 0 (transparent).\n * alpha2 - Optional alpha of the end color. Default is 1. Possible values\n * are between 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setGradient = function(color1, color2, x, y, w, h, direction, alpha1, alpha2)\n{\n\tif (color1 != null && color2 != null)\n\t{\n\t\tmxAbstractCanvas2D.prototype.setGradient.apply(this, arguments);\n\t\t\n\t\tvar elem = this.createElement('gradient');\n\t\telem.setAttribute('c1', color1);\n\t\telem.setAttribute('c2', color2);\n\t\telem.setAttribute('x', this.format(x));\n\t\telem.setAttribute('y', this.format(y));\n\t\telem.setAttribute('w', this.format(w));\n\t\telem.setAttribute('h', this.format(h));\n\t\t\n\t\t// Default direction is south\n\t\tif (direction != null)\n\t\t{\n\t\t\telem.setAttribute('direction', direction);\n\t\t}\n\t\t\n\t\tif (alpha1 != null)\n\t\t{\n\t\t\telem.setAttribute('alpha1', alpha1);\n\t\t}\n\t\t\n\t\tif (alpha2 != null)\n\t\t{\n\t\t\telem.setAttribute('alpha2', alpha2);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setStrokeColor\n * \n * Sets the current stroke color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setStrokeColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokecolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setStrokeWidth\n * \n * Sets the current stroke width.\n * \n * Parameters:\n * \n * value - Numeric representation of the stroke width.\n */\nmxXmlCanvas2D.prototype.setStrokeWidth = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeWidth == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeWidth.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokewidth');\n\telem.setAttribute('width', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setDashed\n * \n * Enables or disables dashed lines.\n * \n * Parameters:\n * \n * value - Boolean that specifies if dashed lines should be enabled.\n * value - Boolean that specifies if the stroke width should be ignored\n * for the dash pattern. Default is false.\n */\nmxXmlCanvas2D.prototype.setDashed = function(value, fixDash)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.dashed == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setDashed.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('dashed');\n\telem.setAttribute('dashed', (value) ? '1' : '0');\n\t\n\tif (fixDash != null)\n\t{\n\t\telem.setAttribute('fixDash', (fixDash) ? '1' : '0');\n\t}\n\t\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setDashPattern\n * \n * Sets the current dash pattern. Default is '3 3'.\n * \n * Parameters:\n * \n * value - String that represents the dash pattern, which is a sequence of\n * numbers defining the length of the dashes and the length of the spaces\n * between the dashes. The lengths are relative to the line width - a length\n * of 1 is equals to the line width.\n */\nmxXmlCanvas2D.prototype.setDashPattern = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.dashPattern == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setDashPattern.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('dashpattern');\n\telem.setAttribute('pattern', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setLineCap\n * \n * Sets the line cap. Default is 'flat' which corresponds to 'butt' in SVG.\n * \n * Parameters:\n * \n * value - String that represents the line cap. Possible values are flat, round\n * and square.\n */\nmxXmlCanvas2D.prototype.setLineCap = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.lineCap == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setLineCap.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('linecap');\n\telem.setAttribute('cap', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setLineJoin\n * \n * Sets the line join. Default is 'miter'.\n * \n * Parameters:\n * \n * value - String that represents the line join. Possible values are miter,\n * round and bevel.\n */\nmxXmlCanvas2D.prototype.setLineJoin = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.lineJoin == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setLineJoin.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('linejoin');\n\telem.setAttribute('join', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setMiterLimit\n * \n * Sets the miter limit. Default is 10.\n * \n * Parameters:\n * \n * value - Number that represents the miter limit.\n */\nmxXmlCanvas2D.prototype.setMiterLimit = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.miterLimit == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setMiterLimit.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('miterlimit');\n\telem.setAttribute('limit', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color. Default is '#000000'.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontColor.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontcolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontBackgroundColor\n * \n * Sets the current font background color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontBackgroundColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontBackgroundColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontBackgroundColor.apply(this, arguments);\n\t\t}\n\n\t\tvar elem = this.createElement('fontbackgroundcolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontBorderColor\n * \n * Sets the current font border color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontBorderColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontBorderColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontBorderColor.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontbordercolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontSize\n * \n * Sets the current font size. Default is <mxConstants.DEFAULT_FONTSIZE>.\n * \n * Parameters:\n * \n * value - Numeric representation of the font size.\n */\nmxXmlCanvas2D.prototype.setFontSize = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontSize == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontSize.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontsize');\n\t\telem.setAttribute('size', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontFamily\n * \n * Sets the current font family. Default is <mxConstants.DEFAULT_FONTFAMILY>.\n * \n * Parameters:\n * \n * value - String representation of the font family. This handles the same\n * values as the CSS font-family property.\n */\nmxXmlCanvas2D.prototype.setFontFamily = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontFamily == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontFamily.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontfamily');\n\t\telem.setAttribute('family', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontStyle\n * \n * Sets the current font style.\n * \n * Parameters:\n * \n * value - Numeric representation of the font family. This is the sum of the\n * font styles from <mxConstants>.\n */\nmxXmlCanvas2D.prototype.setFontStyle = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontStyle == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontStyle.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontstyle');\n\t\telem.setAttribute('style', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setShadow\n * \n * Enables or disables shadows.\n * \n * Parameters:\n * \n * value - Boolean that specifies if shadows should be enabled.\n */\nmxXmlCanvas2D.prototype.setShadow = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadow == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadow.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadow');\n\telem.setAttribute('enabled', (value) ? '1' : '0');\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setShadowColor\n * \n * Sets the current shadow color. Default is <mxConstants.SHADOWCOLOR>.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setShadowColor = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.state.shadowColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowcolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setShadowAlpha\n * \n * Sets the current shadows alpha. Default is <mxConstants.SHADOW_OPACITY>.\n * \n * Parameters:\n * \n * value - Number that represents the new alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setShadowAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadowAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowalpha');\n\telem.setAttribute('alpha', value);\n\tthis.root.appendChild(elem);\n\t\n};\n\n/**\n * Function: setShadowOffset\n * \n * Sets the current shadow offset.\n * \n * Parameters:\n * \n * dx - Number that represents the horizontal offset of the shadow.\n * dy - Number that represents the vertical offset of the shadow.\n */\nmxXmlCanvas2D.prototype.setShadowOffset = function(dx, dy)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadowDx == dx && this.state.shadowDy == dy)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowOffset.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowoffset');\n\telem.setAttribute('dx', dx);\n\telem.setAttribute('dy', dy);\n\tthis.root.appendChild(elem);\n\t\n};\n\n/**\n * Function: rect\n * \n * Puts a rectangle into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the rectangle.\n * y - Number that represents the y-coordinate of the rectangle.\n * w - Number that represents the width of the rectangle.\n * h - Number that represents the height of the rectangle.\n */\nmxXmlCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tvar elem = this.createElement('rect');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: roundrect\n * \n * Puts a rounded rectangle into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the rectangle.\n * y - Number that represents the y-coordinate of the rectangle.\n * w - Number that represents the width of the rectangle.\n * h - Number that represents the height of the rectangle.\n * dx - Number that represents the horizontal rounding.\n * dy - Number that represents the vertical rounding.\n */\nmxXmlCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tvar elem = this.createElement('roundrect');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\telem.setAttribute('dx', this.format(dx));\n\telem.setAttribute('dy', this.format(dy));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: ellipse\n * \n * Puts an ellipse into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the ellipse.\n * y - Number that represents the y-coordinate of the ellipse.\n * w - Number that represents the width of the ellipse.\n * h - Number that represents the height of the ellipse.\n */\nmxXmlCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tvar elem = this.createElement('ellipse');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: image\n * \n * Paints an image.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the image.\n * y - Number that represents the y-coordinate of the image.\n * w - Number that represents the width of the image.\n * h - Number that represents the height of the image.\n * src - String that specifies the URL of the image.\n * aspect - Boolean indicating if the aspect of the image should be preserved.\n * flipH - Boolean indicating if the image should be flipped horizontally.\n * flipV - Boolean indicating if the image should be flipped vertically.\n */\nmxXmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tsrc = this.converter.convert(src);\n\t\n\t// LATER: Add option for embedding images as base64.\n\tvar elem = this.createElement('image');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\telem.setAttribute('src', src);\n\telem.setAttribute('aspect', (aspect) ? '1' : '0');\n\telem.setAttribute('flipH', (flipH) ? '1' : '0');\n\telem.setAttribute('flipV', (flipV) ? '1' : '0');\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: begin\n * \n * Starts a new path and puts it into the drawing buffer.\n */\nmxXmlCanvas2D.prototype.begin = function()\n{\n\tthis.root.appendChild(this.createElement('begin'));\n\tthis.lastX = 0;\n\tthis.lastY = 0;\n};\n\n/**\n * Function: moveTo\n * \n * Moves the current path the given point.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the point.\n * y - Number that represents the y-coordinate of the point.\n */\nmxXmlCanvas2D.prototype.moveTo = function(x, y)\n{\n\tvar elem = this.createElement('move');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x;\n\tthis.lastY = y;\n};\n\n/**\n * Function: lineTo\n * \n * Draws a line to the given coordinates.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the endpoint.\n * y - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.lineTo = function(x, y)\n{\n\tvar elem = this.createElement('line');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x;\n\tthis.lastY = y;\n};\n\n/**\n * Function: quadTo\n * \n * Adds a quadratic curve to the current path.\n * \n * Parameters:\n * \n * x1 - Number that represents the x-coordinate of the control point.\n * y1 - Number that represents the y-coordinate of the control point.\n * x2 - Number that represents the x-coordinate of the endpoint.\n * y2 - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tvar elem = this.createElement('quad');\n\telem.setAttribute('x1', this.format(x1));\n\telem.setAttribute('y1', this.format(y1));\n\telem.setAttribute('x2', this.format(x2));\n\telem.setAttribute('y2', this.format(y2));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x2;\n\tthis.lastY = y2;\n};\n\n/**\n * Function: curveTo\n * \n * Adds a bezier curve to the current path.\n * \n * Parameters:\n * \n * x1 - Number that represents the x-coordinate of the first control point.\n * y1 - Number that represents the y-coordinate of the first control point.\n * x2 - Number that represents the x-coordinate of the second control point.\n * y2 - Number that represents the y-coordinate of the second control point.\n * x3 - Number that represents the x-coordinate of the endpoint.\n * y3 - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.curveTo = function(x1, y1, x2, y2, x3, y3)\n{\n\tvar elem = this.createElement('curve');\n\telem.setAttribute('x1', this.format(x1));\n\telem.setAttribute('y1', this.format(y1));\n\telem.setAttribute('x2', this.format(x2));\n\telem.setAttribute('y2', this.format(y2));\n\telem.setAttribute('x3', this.format(x3));\n\telem.setAttribute('y3', this.format(y3));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x3;\n\tthis.lastY = y3;\n};\n\n/**\n * Function: close\n * \n * Closes the current path.\n */\nmxXmlCanvas2D.prototype.close = function()\n{\n\tthis.root.appendChild(this.createElement('close'));\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for\n * plain text and html for HTML markup. Background and border color as well\n * as clipping is not available in plain text labels for VML. HTML labels\n * are not available as part of shapes with no foreignObject support in SVG\n * (eg. IE9, IE10).\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the text.\n * y - Number that represents the y-coordinate of the text.\n * w - Number that represents the available width for the text or 0 for automatic width.\n * h - Number that represents the available height for the text or 0 for automatic height.\n * str - String that specifies the text to be painted.\n * align - String that represents the horizontal alignment.\n * valign - String that represents the vertical alignment.\n * wrap - Boolean that specifies if word-wrapping is enabled. Requires w > 0.\n * format - Empty string for plain text or 'html' for HTML markup.\n * overflow - Specifies the overflow behaviour of the label. Requires w > 0 and/or h > 0.\n * clip - Boolean that specifies if the label should be clipped. Requires w > 0 and/or h > 0.\n * rotation - Number that specifies the angle of the rotation around the anchor point of the text.\n * dir - Optional string that specifies the text direction. Possible values are rtl and lrt.\n */\nmxXmlCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\tif (mxUtils.isNode(str))\n\t\t{\n\t\t\tstr = mxUtils.getOuterHtml(str);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('text');\n\t\telem.setAttribute('x', this.format(x));\n\t\telem.setAttribute('y', this.format(y));\n\t\telem.setAttribute('w', this.format(w));\n\t\telem.setAttribute('h', this.format(h));\n\t\telem.setAttribute('str', str);\n\t\t\n\t\tif (align != null)\n\t\t{\n\t\t\telem.setAttribute('align', align);\n\t\t}\n\t\t\n\t\tif (valign != null)\n\t\t{\n\t\t\telem.setAttribute('valign', valign);\n\t\t}\n\t\t\n\t\telem.setAttribute('wrap', (wrap) ? '1' : '0');\n\t\t\n\t\tif (format == null)\n\t\t{\n\t\t\tformat = '';\n\t\t}\n\t\t\n\t\telem.setAttribute('format', format);\n\t\t\n\t\tif (overflow != null)\n\t\t{\n\t\t\telem.setAttribute('overflow', overflow);\n\t\t}\n\t\t\n\t\tif (clip != null)\n\t\t{\n\t\t\telem.setAttribute('clip', (clip) ? '1' : '0');\n\t\t}\n\t\t\n\t\tif (rotation != null)\n\t\t{\n\t\t\telem.setAttribute('rotation', rotation);\n\t\t}\n\t\t\n\t\tif (dir != null)\n\t\t{\n\t\t\telem.setAttribute('dir', dir);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current drawing buffer.\n */\nmxXmlCanvas2D.prototype.stroke = function()\n{\n\tthis.root.appendChild(this.createElement('stroke'));\n};\n\n/**\n * Function: fill\n * \n * Fills the current drawing buffer.\n */\nmxXmlCanvas2D.prototype.fill = function()\n{\n\tthis.root.appendChild(this.createElement('fill'));\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills the current drawing buffer and its outline.\n */\nmxXmlCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.root.appendChild(this.createElement('fillstroke'));\n};\n\n__mxOutput.mxXmlCanvas2D = typeof mxXmlCanvas2D !== 'undefined' ? mxXmlCanvas2D : undefined;\n"]}