{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/util/mxClipboard.js"],"names":["mxClipboard","STEPSIZE","insertCount","cells","setCells","getCells","isEmpty","cut","graph","copy","removeCells","getSelectionCells","result","getExportableCells","model","getTopmostCells","cloneCells","paste","getImportableCells","delta","parent","getDefaultParent","importCells","setSelectionCells","__mxOutput","undefined"],"mappings":";;;;;;;;;AAIIA,c,GACJ;AACC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EAC,cAAU,EA5EX;;AA8EC;;;;;AAKAC,iBAAa,CAnFd;;AAqFC;;;;;AAKAC,WAAO,IA1FR;;AA4FC;;;;;AAKAC,cAAU,kBAASD,KAAT,EACV;AACCH,iBAAYG,KAAZ,GAAoBA,KAApB;AACA,KApGF;;AAsGC;;;;;AAKAE,cAAU,oBACV;AACC,YAAOL,YAAYG,KAAnB;AACA,KA9GF;;AAgHC;;;;;AAKAG,aAAS,mBACT;AACC,YAAON,YAAYK,QAAZ,MAA0B,IAAjC;AACA,KAxHF;;AA0HC;;;;;;;;;;;;AAYAE,SAAK,aAASC,KAAT,EAAgBL,KAAhB,EACL;AACCA,aAAQH,YAAYS,IAAZ,CAAiBD,KAAjB,EAAwBL,KAAxB,CAAR;AACAH,iBAAYE,WAAZ,GAA0B,CAA1B;AACAF,iBAAYU,WAAZ,CAAwBF,KAAxB,EAA+BL,KAA/B;;AAEA,YAAOA,KAAP;AACA,KA7IF;;AA+IC;;;;;;;;;;;AAWAO,iBAAa,qBAASF,KAAT,EAAgBL,KAAhB,EACb;AACCK,WAAME,WAAN,CAAkBP,KAAlB;AACA,KA7JF;;AA+JC;;;;;;;;;;;;AAYAM,UAAM,cAASD,KAAT,EAAgBL,KAAhB,EACN;AACCA,aAAQA,SAASK,MAAMG,iBAAN,EAAjB;AACA,SAAIC,SAASJ,MAAMK,kBAAN,CAAyBL,MAAMM,KAAN,CAAYC,eAAZ,CAA4BZ,KAA5B,CAAzB,CAAb;AACAH,iBAAYE,WAAZ,GAA0B,CAA1B;AACAF,iBAAYI,QAAZ,CAAqBI,MAAMQ,UAAN,CAAiBJ,MAAjB,CAArB;;AAEA,YAAOA,MAAP;AACA,KAnLF;;AAqLC;;;;;;;;;;;;;;;AAeAK,WAAO,eAAST,KAAT,EACP;AACC,SAAIL,QAAQ,IAAZ;;AAEA,SAAI,CAACH,YAAYM,OAAZ,EAAL,EACA;AACCH,cAAQK,MAAMU,kBAAN,CAAyBlB,YAAYK,QAAZ,EAAzB,CAAR;AACA,UAAIc,QAAQnB,YAAYE,WAAZ,GAA0BF,YAAYC,QAAlD;AACA,UAAImB,SAASZ,MAAMa,gBAAN,EAAb;AACAlB,cAAQK,MAAMc,WAAN,CAAkBnB,KAAlB,EAAyBgB,KAAzB,EAAgCA,KAAhC,EAAuCC,MAAvC,CAAR;;AAEA;AACApB,kBAAYE,WAAZ;AACAM,YAAMe,iBAAN,CAAwBpB,KAAxB;AACA;;AAED,YAAOA,KAAP;AACA;;AArNF,I;;;AAyNAqB,cAAWxB,WAAX,GAAyB,OAAOA,WAAP,KAAuB,WAAvB,GAAqCA,WAArC,GAAmDyB,SAA5E","file":"mxClipboard.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxClipboard =\n{\n\t/**\n\t * Class: mxClipboard\n\t * \n\t * Singleton that implements a clipboard for graph cells.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxClipboard.copy(graph);\n\t * mxClipboard.paste(graph2);\n\t * (end)\n\t *\n\t * This copies the selection cells from the graph to the clipboard and\n\t * pastes them into graph2.\n\t * \n\t * For fine-grained control of the clipboard data the <mxGraph.canExportCell>\n\t * and <mxGraph.canImportCell> functions can be overridden.\n\t * \n\t * To restore previous parents for pasted cells, the implementation for\n\t * <copy> and <paste> can be changed as follows.\n\t * \n\t * (code)\n\t * mxClipboard.copy = function(graph, cells)\n\t * {\n\t *   cells = cells || graph.getSelectionCells();\n\t *   var result = graph.getExportableCells(cells);\n\t *   \n\t *   mxClipboard.parents = new Object();\n\t *   \n\t *   for (var i = 0; i < result.length; i++)\n\t *   {\n\t *     mxClipboard.parents[i] = graph.model.getParent(cells[i]);\n\t *   }\n\t *   \n\t *   mxClipboard.insertCount = 1;\n\t *   mxClipboard.setCells(graph.cloneCells(result));\n\t *   \n\t *   return result;\n\t * };\n\t * \n\t * mxClipboard.paste = function(graph)\n\t * {\n\t *   if (!mxClipboard.isEmpty())\n\t *   {\n\t *     var cells = graph.getImportableCells(mxClipboard.getCells());\n\t *     var delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\n\t *     var parent = graph.getDefaultParent();\n\t *     \n\t *     graph.model.beginUpdate();\n\t *     try\n\t *     {\n\t *       for (var i = 0; i < cells.length; i++)\n\t *       {\n\t *         var tmp = (mxClipboard.parents != null && graph.model.contains(mxClipboard.parents[i])) ?\n\t *              mxClipboard.parents[i] : parent;\n\t *         cells[i] = graph.importCells([cells[i]], delta, delta, tmp)[0];\n\t *       }\n\t *     }\n\t *     finally\n\t *     {\n\t *       graph.model.endUpdate();\n\t *     }\n\t *     \n\t *     // Increments the counter and selects the inserted cells\n\t *     mxClipboard.insertCount++;\n\t *     graph.setSelectionCells(cells);\n\t *   }\n\t * };\n\t * (end)\n\t * \n\t * Variable: STEPSIZE\n\t * \n\t * Defines the step size to offset the cells after each paste operation.\n\t * Default is 10.\n\t */\n\tSTEPSIZE: 10,\n\n\t/**\n\t * Variable: insertCount\n\t * \n\t * Counts the number of times the clipboard data has been inserted.\n\t */\n\tinsertCount: 1,\n\n\t/**\n\t * Variable: cells\n\t * \n\t * Holds the array of <mxCells> currently in the clipboard.\n\t */\n\tcells: null,\n\n\t/**\n\t * Function: setCells\n\t * \n\t * Sets the cells in the clipboard. Fires a <mxEvent.CHANGE> event.\n\t */\n\tsetCells: function(cells)\n\t{\n\t\tmxClipboard.cells = cells;\n\t},\n\n\t/**\n\t * Function: getCells\n\t * \n\t * Returns  the cells in the clipboard.\n\t */\n\tgetCells: function()\n\t{\n\t\treturn mxClipboard.cells;\n\t},\n\t\n\t/**\n\t * Function: isEmpty\n\t * \n\t * Returns true if the clipboard currently has not data stored.\n\t */\n\tisEmpty: function()\n\t{\n\t\treturn mxClipboard.getCells() == null;\n\t},\n\t\n\t/**\n\t * Function: cut\n\t * \n\t * Cuts the given array of <mxCells> from the specified graph.\n\t * If cells is null then the selection cells of the graph will\n\t * be used. Returns the cells that have been cut from the graph.\n\t *\n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be cut.\n\t * cells - Optional array of <mxCells> to be cut.\n\t */\n\tcut: function(graph, cells)\n\t{\n\t\tcells = mxClipboard.copy(graph, cells);\n\t\tmxClipboard.insertCount = 0;\n\t\tmxClipboard.removeCells(graph, cells);\n\t\t\n\t\treturn cells;\n\t},\n\n\t/**\n\t * Function: removeCells\n\t * \n\t * Hook to remove the given cells from the given graph after\n\t * a cut operation.\n\t *\n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be cut.\n\t * cells - Array of <mxCells> to be cut.\n\t */\n\tremoveCells: function(graph, cells)\n\t{\n\t\tgraph.removeCells(cells);\n\t},\n\n\t/**\n\t * Function: copy\n\t * \n\t * Copies the given array of <mxCells> from the specified\n\t * graph to <cells>. Returns the original array of cells that has\n\t * been cloned. Descendants of cells in the array are ignored.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be copied.\n\t * cells - Optional array of <mxCells> to be copied.\n\t */\n\tcopy: function(graph, cells)\n\t{\n\t\tcells = cells || graph.getSelectionCells();\n\t\tvar result = graph.getExportableCells(graph.model.getTopmostCells(cells));\n\t\tmxClipboard.insertCount = 1;\n\t\tmxClipboard.setCells(graph.cloneCells(result));\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: paste\n\t * \n\t * Pastes the <cells> into the specified graph restoring\n\t * the relation to <parents>, if possible. If the parents\n\t * are no longer in the graph or invisible then the\n\t * cells are added to the graph's default or into the\n\t * swimlane under the cell's new location if one exists.\n\t * The cells are added to the graph using <mxGraph.importCells>\n\t * and returned.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to paste the <cells> into.\n\t */\n\tpaste: function(graph)\n\t{\n\t\tvar cells = null;\n\t\t\n\t\tif (!mxClipboard.isEmpty())\n\t\t{\n\t\t\tcells = graph.getImportableCells(mxClipboard.getCells());\n\t\t\tvar delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\n\t\t\tvar parent = graph.getDefaultParent();\n\t\t\tcells = graph.importCells(cells, delta, delta, parent);\n\t\t\t\n\t\t\t// Increments the counter and selects the inserted cells\n\t\t\tmxClipboard.insertCount++;\n\t\t\tgraph.setSelectionCells(cells);\n\t\t}\n\t\t\n\t\treturn cells;\n\t}\n\n};\n\n__mxOutput.mxClipboard = typeof mxClipboard !== 'undefined' ? mxClipboard : undefined;\n"]}