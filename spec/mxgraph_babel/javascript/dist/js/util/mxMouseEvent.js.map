{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/util/mxMouseEvent.js"],"names":["mxMouseEvent","evt","state","sourceState","prototype","consumed","graphX","graphY","getEvent","getSource","mxEvent","isSource","shape","mxUtils","isAncestorNode","node","getX","getClientX","getY","getClientY","getGraphX","getGraphY","getState","getCell","cell","isPopupTrigger","isConsumed","consume","preventDefault","mxClient","IS_IE","returnValue","__mxOutput","undefined"],"mappings":"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","file":"mxMouseEvent.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMouseEvent\n * \n * Base class for all mouse events in mxGraph. A listener for this event should\n * implement the following methods:\n * \n * (code)\n * graph.addMouseListener(\n * {\n *   mouseDown: function(sender, evt)\n *   {\n *     mxLog.debug('mouseDown');\n *   },\n *   mouseMove: function(sender, evt)\n *   {\n *     mxLog.debug('mouseMove');\n *   },\n *   mouseUp: function(sender, evt)\n *   {\n *     mxLog.debug('mouseUp');\n *   }\n * });\n * (end)\n * \n * Constructor: mxMouseEvent\n *\n * Constructs a new event object for the given arguments.\n * \n * Parameters:\n * \n * evt - Native mouse event.\n * state - Optional <mxCellState> under the mouse.\n * \n */\nfunction mxMouseEvent(evt, state)\n{\n\tthis.evt = evt;\n\tthis.state = state;\n\tthis.sourceState = state;\n};\n\n/**\n * Variable: consumed\n *\n * Holds the consumed state of this event.\n */\nmxMouseEvent.prototype.consumed = false;\n\n/**\n * Variable: evt\n *\n * Holds the inner event object.\n */\nmxMouseEvent.prototype.evt = null;\n\n/**\n * Variable: graphX\n *\n * Holds the x-coordinate of the event in the graph. This value is set in\n * <mxGraph.fireMouseEvent>.\n */\nmxMouseEvent.prototype.graphX = null;\n\n/**\n * Variable: graphY\n *\n * Holds the y-coordinate of the event in the graph. This value is set in\n * <mxGraph.fireMouseEvent>.\n */\nmxMouseEvent.prototype.graphY = null;\n\n/**\n * Variable: state\n *\n * Holds the optional <mxCellState> associated with this event.\n */\nmxMouseEvent.prototype.state = null;\n\n/**\n * Variable: sourceState\n * \n * Holds the <mxCellState> that was passed to the constructor. This can be\n * different from <state> depending on the result of <mxGraph.getEventState>.\n */\nmxMouseEvent.prototype.sourceState = null;\n\n/**\n * Function: getEvent\n * \n * Returns <evt>.\n */\nmxMouseEvent.prototype.getEvent = function()\n{\n\treturn this.evt;\n};\n\n/**\n * Function: getSource\n * \n * Returns the target DOM element using <mxEvent.getSource> for <evt>.\n */\nmxMouseEvent.prototype.getSource = function()\n{\n\treturn mxEvent.getSource(this.evt);\n};\n\n/**\n * Function: isSource\n * \n * Returns true if the given <mxShape> is the source of <evt>.\n */\nmxMouseEvent.prototype.isSource = function(shape)\n{\n\tif (shape != null)\n\t{\n\t\treturn mxUtils.isAncestorNode(shape.node, this.getSource());\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getX\n * \n * Returns <evt.clientX>.\n */\nmxMouseEvent.prototype.getX = function()\n{\n\treturn mxEvent.getClientX(this.getEvent());\n};\n\n/**\n * Function: getY\n * \n * Returns <evt.clientY>.\n */\nmxMouseEvent.prototype.getY = function()\n{\n\treturn mxEvent.getClientY(this.getEvent());\n};\n\n/**\n * Function: getGraphX\n * \n * Returns <graphX>.\n */\nmxMouseEvent.prototype.getGraphX = function()\n{\n\treturn this.graphX;\n};\n\n/**\n * Function: getGraphY\n * \n * Returns <graphY>.\n */\nmxMouseEvent.prototype.getGraphY = function()\n{\n\treturn this.graphY;\n};\n\n/**\n * Function: getState\n * \n * Returns <state>.\n */\nmxMouseEvent.prototype.getState = function()\n{\n\treturn this.state;\n};\n\n/**\n * Function: getCell\n * \n * Returns the <mxCell> in <state> is not null.\n */\nmxMouseEvent.prototype.getCell = function()\n{\n\tvar state = this.getState();\n\t\n\tif (state != null)\n\t{\n\t\treturn state.cell;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: isPopupTrigger\n *\n * Returns true if the event is a popup trigger.\n */\nmxMouseEvent.prototype.isPopupTrigger = function()\n{\n\treturn mxEvent.isPopupTrigger(this.getEvent());\n};\n\n/**\n * Function: isConsumed\n *\n * Returns <consumed>.\n */\nmxMouseEvent.prototype.isConsumed = function()\n{\n\treturn this.consumed;\n};\n\n/**\n * Function: consume\n *\n * Sets <consumed> to true and invokes preventDefault on the native event\n * if such a method is defined. This is used mainly to avoid the cursor from\n * being changed to a text cursor in Webkit. You can use the preventDefault\n * flag to disable this functionality.\n * \n * Parameters:\n * \n * preventDefault - Specifies if the native event should be canceled. Default\n * is true.\n */\nmxMouseEvent.prototype.consume = function(preventDefault)\n{\n\tpreventDefault = (preventDefault != null) ? preventDefault : true;\n\t\n\tif (preventDefault && this.evt.preventDefault)\n\t{\n\t\tthis.evt.preventDefault();\n\t}\n\n\t// Workaround for images being dragged in IE\n\t// Does not change returnValue in Opera\n\tif (mxClient.IS_IE)\n\t{\n\t\tthis.evt.returnValue = true;\n\t}\n\n\t// Sets local consumed state\n\tthis.consumed = true;\n};\n\n__mxOutput.mxMouseEvent = typeof mxMouseEvent !== 'undefined' ? mxMouseEvent : undefined;\n"]}