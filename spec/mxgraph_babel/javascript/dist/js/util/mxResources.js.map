{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/util/mxResources.js"],"names":["mxResources","resources","extension","mxResourceExtension","resourcesEncoded","loadDefaultBundle","loadSpecialBundle","isLanguageSupported","lan","mxClient","languages","mxUtils","indexOf","getDefaultBundle","basename","getSpecialBundle","dash","substring","defaultLanguage","add","callback","language","toLowerCase","mxConstants","NONE","defaultBundle","specialBundle","get","req","parse","getText","load","isReady","e","text","lines","split","i","length","charAt","index","key","idx","charCodeAt","value","replace","unescape","params","defaultValue","replacePlaceholders","result","c","parseInt","push","join","loadResources","basePath","__mxOutput","undefined"],"mappings":"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","file":"mxResources.js","sourcesContent":["/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\nvar mxResources =\n{\n\t/**\n\t * Class: mxResources\n\t * \n\t * Implements internationalization. You can provide any number of \n\t * resource files on the server using the following format for the \n\t * filename: name[-en].properties. The en stands for any lowercase \n\t * 2-character language shortcut (eg. de for german, fr for french).\n\t *\n\t * If the optional language extension is omitted, then the file is used as a \n\t * default resource which is loaded in all cases. If a properties file for a \n\t * specific language exists, then it is used to override the settings in the \n\t * default resource. All entries in the file are of the form key=value. The\n\t * values may then be accessed in code via <get>. Lines without \n\t * equal signs in the properties files are ignored.\n\t *\n\t * Resource files may either be added programmatically using\n\t * <add> or via a resource tag in the UI section of the \n\t * editor configuration file, eg:\n\t * \n\t * (code)\n\t * <mxEditor>\n\t *   <ui>\n\t *     <resource basename=\"examples/resources/mxWorkflow\"/>\n\t * (end)\n\t * \n\t * The above element will load examples/resources/mxWorkflow.properties as well\n\t * as the language specific file for the current language, if it exists.\n\t * \n\t * Values may contain placeholders of the form {1}...{n} where each placeholder\n\t * is replaced with the value of the corresponding array element in the params\n\t * argument passed to <mxResources.get>. The placeholder {1} maps to the first\n\t * element in the array (at index 0).\n\t * \n\t * See <mxClient.language> for more information on specifying the default\n\t * language or disabling all loading of resources.\n\t * \n\t * Lines that start with a # sign will be ignored.\n\t * \n\t * Special characters\n\t * \n\t * To use unicode characters, use the standard notation (eg. \\u8fd1) or %u as a\n\t * prefix (eg. %u20AC will display a Euro sign). For normal hex encoded strings,\n\t * use % as a prefix, eg. %F6 will display a \"o umlaut\" (&ouml;).\n\t * \n\t * See <resourcesEncoded> to disable this. If you disable this, make sure that\n\t * your files are UTF-8 encoded.\n\t * \n\t * Asynchronous loading\n\t * \n\t * By default, the core adds two resource files synchronously at load time.\n\t * To load these files asynchronously, set <mxLoadResources> to false\n\t * before loading mxClient.js and use <mxResources.loadResources> instead.\n\t * \n\t * Variable: resources\n\t * \n\t * Object that maps from keys to values.\n\t */\n\tresources: {},\n\n\t/**\n\t * Variable: extension\n\t * \n\t * Specifies the extension used for language files. Default is <mxResourceExtension>.\n\t */\n\textension: mxResourceExtension,\n\n\t/**\n\t * Variable: resourcesEncoded\n\t * \n\t * Specifies whether or not values in resource files are encoded with \\u or\n\t * percentage. Default is false.\n\t */\n\tresourcesEncoded: false,\n\n\t/**\n\t * Variable: loadDefaultBundle\n\t * \n\t * Specifies if the default file for a given basename should be loaded.\n\t * Default is true.\n\t */\n\tloadDefaultBundle: true,\n\n\t/**\n\t * Variable: loadDefaultBundle\n\t * \n\t * Specifies if the specific language file file for a given basename should\n\t * be loaded. Default is true.\n\t */\n\tloadSpecialBundle: true,\n\n\t/**\n\t * Function: isLanguageSupported\n\t * \n\t * Hook for subclassers to disable support for a given language. This\n\t * implementation returns true if lan is in <mxClient.languages>.\n\t * \n\t * Parameters:\n\t *\n\t * lan - The current language.\n\t */\n\tisLanguageSupported: function(lan)\n\t{\n\t\tif (mxClient.languages != null)\n\t\t{\n\t\t\treturn mxUtils.indexOf(mxClient.languages, lan) >= 0;\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: getDefaultBundle\n\t * \n\t * Hook for subclassers to return the URL for the special bundle. This\n\t * implementation returns basename + <extension> or null if\n\t * <loadDefaultBundle> is false.\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The current language.\n\t */\n\tgetDefaultBundle: function(basename, lan)\n\t{\n\t\tif (mxResources.loadDefaultBundle || !mxResources.isLanguageSupported(lan))\n\t\t{\n\t\t\treturn basename + mxResources.extension;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Function: getSpecialBundle\n\t * \n\t * Hook for subclassers to return the URL for the special bundle. This\n\t * implementation returns basename + '_' + lan + <extension> or null if\n\t * <loadSpecialBundle> is false or lan equals <mxClient.defaultLanguage>.\n\t * \n\t * If <mxResources.languages> is not null and <mxClient.language> contains\n\t * a dash, then this method checks if <isLanguageSupported> returns true\n\t * for the full language (including the dash). If that returns false the\n\t * first part of the language (up to the dash) will be tried as an extension.\n\t * \n\t * If <mxResources.language> is null then the first part of the language is\n\t * used to maintain backwards compatibility.\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The language for which the file should be loaded.\n\t */\n\tgetSpecialBundle: function(basename, lan)\n\t{\n\t\tif (mxClient.languages == null || !this.isLanguageSupported(lan))\n\t\t{\n\t\t\tvar dash = lan.indexOf('-');\n\t\t\t\n\t\t\tif (dash > 0)\n\t\t\t{\n\t\t\t\tlan = lan.substring(0, dash);\n\t\t\t}\n\t\t}\n\n\t\tif (mxResources.loadSpecialBundle && mxResources.isLanguageSupported(lan) && lan != mxClient.defaultLanguage)\n\t\t{\n\t\t\treturn basename + '_' + lan + mxResources.extension;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Function: add\n\t * \n\t * Adds the default and current language properties file for the specified\n\t * basename. Existing keys are overridden as new files are added. If no\n\t * callback is used then the request is synchronous.\n\t *\n\t * Example:\n\t * \n\t * At application startup, additional resources may be \n\t * added using the following code:\n\t * \n\t * (code)\n\t * mxResources.add('resources/editor');\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The language for which the file should be loaded.\n\t * callback - Optional callback for asynchronous loading.\n\t */\n\tadd: function(basename, lan, callback)\n\t{\n\t\tlan = (lan != null) ? lan : ((mxClient.language != null) ?\n\t\t\tmxClient.language.toLowerCase() : mxConstants.NONE);\n\t\t\n\t\tif (lan != mxConstants.NONE)\n\t\t{\n\t\t\tvar defaultBundle = mxResources.getDefaultBundle(basename, lan);\n\t\t\tvar specialBundle = mxResources.getSpecialBundle(basename, lan);\n\t\t\t\n\t\t\tvar loadSpecialBundle = function()\n\t\t\t{\n\t\t\t\tif (specialBundle != null)\n\t\t\t\t{\n\t\t\t\t\tif (callback)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxUtils.get(specialBundle, function(req)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxResources.parse(req.getText());\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t}, function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t   \t\tvar req = mxUtils.load(specialBundle);\n\t\t\t\t\t   \t\t\n\t\t\t\t\t   \t\tif (req.isReady())\n\t\t\t\t\t   \t\t{\n\t\t\t\t\t \t   \t\tmxResources.parse(req.getText());\n\t\t\t\t\t   \t\t}\n\t\t\t\t   \t\t}\n\t\t\t\t   \t\tcatch (e)\n\t\t\t\t   \t\t{\n\t\t\t\t   \t\t\t// ignore\n\t\t\t\t\t   \t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (callback != null)\n\t\t\t\t{\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (defaultBundle != null)\n\t\t\t{\n\t\t\t\tif (callback)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.get(defaultBundle, function(req)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxResources.parse(req.getText());\n\t\t\t\t\t\tloadSpecialBundle();\n\t\t\t\t\t}, function()\n\t\t\t\t\t{\n\t\t\t\t\t\tloadSpecialBundle();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t   \t\tvar req = mxUtils.load(defaultBundle);\n\t\t\t\t   \t\t\n\t\t\t\t   \t\tif (req.isReady())\n\t\t\t\t   \t\t{\n\t\t\t\t \t   \t\tmxResources.parse(req.getText());\n\t\t\t\t   \t\t}\n\t\t\t\t   \t\t\n\t\t\t\t   \t\tloadSpecialBundle();\n\t\t\t\t  \t}\n\t\t\t\t  \tcatch (e)\n\t\t\t\t  \t{\n\t\t\t\t  \t\t// ignore\n\t\t\t\t  \t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Overlays the language specific file (_lan-extension)\n\t\t\t\tloadSpecialBundle();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: parse\n\t * \n\t * Parses the key, value pairs in the specified\n\t * text and stores them as local resources.\n\t */\n\tparse: function(text)\n\t{\n\t\tif (text != null)\n\t\t{\n\t\t\tvar lines = text.split('\\n');\n\t\t\t\n\t\t\tfor (var i = 0; i < lines.length; i++)\n\t\t\t{\n\t\t\t\tif (lines[i].charAt(0) != '#')\n\t\t\t\t{\n\t\t\t\t\tvar index = lines[i].indexOf('=');\n\t\t\t\t\t\n\t\t\t\t\tif (index > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar key = lines[i].substring(0, index);\n\t\t\t\t\t\tvar idx = lines[i].length;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (lines[i].charCodeAt(idx - 1) == 13)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tidx--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar value = lines[i].substring(index + 1, idx);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.resourcesEncoded)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvalue = value.replace(/\\\\(?=u[a-fA-F\\d]{4})/g,\"%\");\n\t\t\t\t\t\t\tmxResources.resources[key] = unescape(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxResources.resources[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: get\n\t * \n\t * Returns the value for the specified resource key.\n\t *\n\t * Example:\n\t * To read the value for 'welomeMessage', use the following:\n\t * (code)\n\t * var result = mxResources.get('welcomeMessage') || '';\n\t * (end)\n\t *\n\t * This would require an entry of the following form in\n\t * one of the English language resource files:\n\t * (code)\n\t * welcomeMessage=Welcome to mxGraph!\n\t * (end)\n\t * \n\t * The part behind the || is the string value to be used if the given\n\t * resource is not available.\n\t * \n\t * Parameters:\n\t * \n\t * key - String that represents the key of the resource to be returned.\n\t * params - Array of the values for the placeholders of the form {1}...{n}\n\t * to be replaced with in the resulting string.\n\t * defaultValue - Optional string that specifies the default return value.\n\t */\n\tget: function(key, params, defaultValue)\n\t{\n\t\tvar value = mxResources.resources[key];\n\t\t\n\t\t// Applies the default value if no resource was found\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\t\n\t\t// Replaces the placeholders with the values in the array\n\t\tif (value != null && params != null)\n\t\t{\n\t\t\tvalue = mxResources.replacePlaceholders(value, params);\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: replacePlaceholders\n\t * \n\t * Replaces the given placeholders with the given parameters.\n\t * \n\t * Parameters:\n\t * \n\t * value - String that contains the placeholders.\n\t * params - Array of the values for the placeholders of the form {1}...{n}\n\t * to be replaced with in the resulting string.\n\t */\n\treplacePlaceholders: function(value, params)\n\t{\n\t\tvar result = [];\n\t\tvar index = null;\n\t\t\n\t\tfor (var i = 0; i < value.length; i++)\n\t\t{\n\t\t\tvar c = value.charAt(i);\n\n\t\t\tif (c == '{')\n\t\t\t{\n\t\t\t\tindex = '';\n\t\t\t}\n\t\t\telse if (index != null && \tc == '}')\n\t\t\t{\n\t\t\t\tindex = parseInt(index)-1;\n\t\t\t\t\n\t\t\t\tif (index >= 0 && index < params.length)\n\t\t\t\t{\n\t\t\t\t\tresult.push(params[index]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tindex = null;\n\t\t\t}\n\t\t\telse if (index != null)\n\t\t\t{\n\t\t\t\tindex += c;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(c);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join('');\n\t},\n\n\t/**\n\t * Function: loadResources\n\t * \n\t * Loads all required resources asynchronously. Use this to load the graph and\n\t * editor resources if <mxLoadResources> is false.\n\t * \n\t * Parameters:\n\t * \n\t * callback - Callback function for asynchronous loading.\n\t */\n\tloadResources: function(callback)\n\t{\n\t\tmxResources.add(mxClient.basePath+'/resources/editor', null, function()\n\t\t{\n\t\t\tmxResources.add(mxClient.basePath+'/resources/graph', null, callback);\n\t\t});\n\t}\n\n};\n\n__mxOutput.mxResources = typeof mxResources !== 'undefined' ? mxResources : undefined;\n"]}