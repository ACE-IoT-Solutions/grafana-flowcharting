{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/util/mxRectangle.js"],"names":["mxRectangle","x","y","width","height","mxPoint","call","prototype","constructor","setRect","w","h","getCenterX","getCenterY","add","rect","minX","Math","min","minY","maxX","max","maxY","intersect","r1","r2","b1","b2","grow","amount","getPoint","rotate90","t","tmp","equals","obj","fromRectangle","__mxOutput","undefined"],"mappings":"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","file":"mxRectangle.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRectangle\n *\n * Extends <mxPoint> to implement a 2-dimensional rectangle with double\n * precision coordinates.\n * \n * Constructor: mxRectangle\n *\n * Constructs a new rectangle for the optional parameters. If no parameters\n * are given then the respective default values are used.\n */\nfunction mxRectangle(x, y, width, height)\n{\n\tmxPoint.call(this, x, y);\n\n\tthis.width = (width != null) ? width : 0;\n\tthis.height = (height != null) ? height : 0;\n};\n\n/**\n * Extends mxPoint.\n */\nmxRectangle.prototype = new mxPoint();\nmxRectangle.prototype.constructor = mxRectangle;\n\n/**\n * Variable: width\n *\n * Holds the width of the rectangle. Default is 0.\n */\nmxRectangle.prototype.width = null;\n\n/**\n * Variable: height\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxRectangle.prototype.height = null;\n\n/**\n * Function: setRect\n * \n * Sets this rectangle to the specified values\n */\nmxRectangle.prototype.setRect = function(x, y, w, h)\n{\n    this.x = x;\n    this.y = y;\n    this.width = w;\n    this.height = h;\n};\n\n/**\n * Function: getCenterX\n * \n * Returns the x-coordinate of the center point.\n */\nmxRectangle.prototype.getCenterX = function ()\n{\n\treturn this.x + this.width/2;\n};\n\n/**\n * Function: getCenterY\n * \n * Returns the y-coordinate of the center point.\n */\nmxRectangle.prototype.getCenterY = function ()\n{\n\treturn this.y + this.height/2;\n};\n\n/**\n * Function: add\n *\n * Adds the given rectangle to this rectangle.\n */\nmxRectangle.prototype.add = function(rect)\n{\n\tif (rect != null)\n\t{\n\t\tvar minX = Math.min(this.x, rect.x);\n\t\tvar minY = Math.min(this.y, rect.y);\n\t\tvar maxX = Math.max(this.x + this.width, rect.x + rect.width);\n\t\tvar maxY = Math.max(this.y + this.height, rect.y + rect.height);\n\t\t\n\t\tthis.x = minX;\n\t\tthis.y = minY;\n\t\tthis.width = maxX - minX;\n\t\tthis.height = maxY - minY;\n\t}\n};\n\n/**\n * Function: intersect\n * \n * Changes this rectangle to where it overlaps with the given rectangle.\n */\nmxRectangle.prototype.intersect = function(rect)\n{\n\tif (rect != null)\n\t{\n\t\tvar r1 = this.x + this.width;\n\t\tvar r2 = rect.x + rect.width;\n\t\t\n\t\tvar b1 = this.y + this.height;\n\t\tvar b2 = rect.y + rect.height;\n\t\t\n\t\tthis.x = Math.max(this.x, rect.x);\n\t\tthis.y = Math.max(this.y, rect.y);\n\t\tthis.width = Math.min(r1, r2) - this.x;\n\t\tthis.height = Math.min(b1, b2) - this.y;\n\t}\n};\n\n/**\n * Function: grow\n *\n * Grows the rectangle by the given amount, that is, this method subtracts\n * the given amount from the x- and y-coordinates and adds twice the amount\n * to the width and height.\n */\nmxRectangle.prototype.grow = function(amount)\n{\n\tthis.x -= amount;\n\tthis.y -= amount;\n\tthis.width += 2 * amount;\n\tthis.height += 2 * amount;\n};\n\n/**\n * Function: getPoint\n * \n * Returns the top, left corner as a new <mxPoint>.\n */\nmxRectangle.prototype.getPoint = function()\n{\n\treturn new mxPoint(this.x, this.y);\n};\n\n/**\n * Function: rotate90\n * \n * Rotates this rectangle by 90 degree around its center point.\n */\nmxRectangle.prototype.rotate90 = function()\n{\n\tvar t = (this.width - this.height) / 2;\n\tthis.x += t;\n\tthis.y -= t;\n\tvar tmp = this.width;\n\tthis.width = this.height;\n\tthis.height = tmp;\n};\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this rectangle.\n */\nmxRectangle.prototype.equals = function(obj)\n{\n\treturn obj != null && obj.x == this.x && obj.y == this.y &&\n\t\tobj.width == this.width && obj.height == this.height;\n};\n\n/**\n * Function: fromRectangle\n * \n * Returns a new <mxRectangle> which is a copy of the given rectangle.\n */\nmxRectangle.fromRectangle = function(rect)\n{\n\treturn new mxRectangle(rect.x, rect.y, rect.width, rect.height);\n};\n\n__mxOutput.mxRectangle = typeof mxRectangle !== 'undefined' ? mxRectangle : undefined;\n"]}