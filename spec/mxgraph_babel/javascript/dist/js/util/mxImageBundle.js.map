{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/util/mxImageBundle.js"],"names":["mxImageBundle","alt","images","prototype","putImage","key","value","fallback","getImage","result","img","__mxOutput","undefined"],"mappings":";;;;;AAAA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA,WAASA,aAAT,CAAuBC,GAAvB,EACA;AACC,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKD,GAAL,GAAYA,OAAO,IAAR,GAAgBA,GAAhB,GAAsB,KAAjC;AACA,G;;;AAAA;;AAED;;;;;AAKAD,oBAAcG,SAAd,CAAwBD,MAAxB,GAAiC,IAAjC;;AAEA;;;;;AAKAF,oBAAcG,SAAd,CAAwBD,MAAxB,GAAiC,IAAjC;;AAEA;;;;;;AAMAF,oBAAcG,SAAd,CAAwBC,QAAxB,GAAmC,UAASC,GAAT,EAAcC,KAAd,EAAqBC,QAArB,EACnC;AACC,aAAKL,MAAL,CAAYG,GAAZ,IAAmB,EAACC,OAAOA,KAAR,EAAeC,UAAUA,QAAzB,EAAnB;AACA,OAHD;;AAKA;;;;;;;AAOAP,oBAAcG,SAAd,CAAwBK,QAAxB,GAAmC,UAASH,GAAT,EACnC;AACC,YAAII,SAAS,IAAb;;AAEA,YAAIJ,OAAO,IAAX,EACA;AACC,cAAIK,MAAM,KAAKR,MAAL,CAAYG,GAAZ,CAAV;;AAEA,cAAIK,OAAO,IAAX,EACA;AACCD,qBAAU,KAAKR,GAAN,GAAaS,IAAIH,QAAjB,GAA4BG,IAAIJ,KAAzC;AACA;AACD;;AAED,eAAOG,MAAP;AACA,OAfD;;AAiBAE,iBAAWX,aAAX,GAA2B,OAAOA,aAAP,KAAyB,WAAzB,GAAuCA,aAAvC,GAAuDY,SAAlF","file":"mxImageBundle.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageBundle\n *\n * Maps from keys to base64 encoded images or file locations. All values must\n * be URLs or use the format data:image/format followed by a comma and the base64\n * encoded image data, eg. \"data:image/gif,XYZ\", where XYZ is the base64 encoded\n * image data.\n * \n * To add a new image bundle to an existing graph, the following code is used:\n * \n * (code)\n * var bundle = new mxImageBundle(alt);\n * bundle.putImage('myImage', 'data:image/gif,R0lGODlhEAAQAMIGAAAAAICAAICAgP' +\n *   '//AOzp2O3r2////////yH+FUNyZWF0ZWQgd2l0aCBUaGUgR0lNUAAh+QQBCgAHACwAAAAA' +\n *   'EAAQAAADTXi63AowynnAMDfjPUDlnAAJhmeBFxAEloliKltWmiYCQvfVr6lBPB1ggxN1hi' +\n *   'laSSASFQpIV5HJBDyHpqK2ejVRm2AAgZCdmCGO9CIBADs=', fallback);\n * bundle.putImage('mySvgImage', 'data:image/svg+xml,' + encodeURIComponent(\n *   '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\">' +\n *   '<linearGradient id=\"gradient\"><stop offset=\"10%\" stop-color=\"#F00\"/>' +\n *   '<stop offset=\"90%\" stop-color=\"#fcc\"/></linearGradient>' +\n *   '<rect fill=\"url(#gradient)\" width=\"100%\" height=\"100%\"/></svg>'), fallback);\n * graph.addImageBundle(bundle);\n * (end);\n * \n * Alt is an optional boolean (default is false) that specifies if the value\n * or the fallback should be returned in <getImage>.\n * \n * The image can then be referenced in any cell style using image=myImage.\n * If you are using mxOutline, you should use the same image bundles in the\n * graph that renders the outline.\n * \n * The keys for images are resolved in <mxGraph.postProcessCellStyle> and\n * turned into a data URI if the returned value has a short data URI format\n * as specified above.\n * \n * A typical value for the fallback is a MTHML link as defined in RFC 2557.\n * Note that this format requires a file to be dynamically created on the\n * server-side, or the page that contains the graph to be modified to contain\n * the resources, this can be done by adding a comment that contains the\n * resource in the HEAD section of the page after the title tag.\n * \n * This type of fallback mechanism should be used in IE6 and IE7. IE8 does\n * support data URIs, but the maximum size is limited to 32 KB, which means\n * all data URIs should be limited to 32 KB.\n */\nfunction mxImageBundle(alt)\n{\n\tthis.images = [];\n\tthis.alt = (alt != null) ? alt : false;\n};\n\n/**\n * Variable: images\n * \n * Maps from keys to images.\n */\nmxImageBundle.prototype.images = null;\n\n/**\n * Variable: alt\n * \n * Specifies if the fallback representation should be returned.\n */\nmxImageBundle.prototype.images = null;\n\n/**\n * Function: putImage\n * \n * Adds the specified entry to the map. The entry is an object with a value and\n * fallback property as specified in the arguments.\n */\nmxImageBundle.prototype.putImage = function(key, value, fallback)\n{\n\tthis.images[key] = {value: value, fallback: fallback};\n};\n\n/**\n * Function: getImage\n * \n * Returns the value for the given key. This returns the value\n * or fallback, depending on <alt>. The fallback is returned if\n * <alt> is true, the value is returned otherwise.\n */\nmxImageBundle.prototype.getImage = function(key)\n{\n\tvar result = null;\n\t\n\tif (key != null)\n\t{\n\t\tvar img = this.images[key];\n\t\t\n\t\tif (img != null)\n\t\t{\n\t\t\tresult = (this.alt) ? img.fallback : img.value;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n__mxOutput.mxImageBundle = typeof mxImageBundle !== 'undefined' ? mxImageBundle : undefined;\n"]}