{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/handler/mxKeyHandler.js"],"names":["mxKeyHandler","graph","target","document","documentElement","normalKeys","shiftKeys","controlKeys","controlShiftKeys","keydownHandler","mxUtils","bind","evt","keyDown","mxEvent","addListener","mxClient","IS_IE","window","destroy","prototype","enabled","isEnabled","setEnabled","bindKey","code","funct","bindShiftKey","bindControlKey","bindControlShiftKey","isControlDown","getFunction","isAltDown","isShiftDown","keyCode","isGraphEvent","source","getSource","parentNode","cellEditor","isEventSource","isAncestorNode","container","isEnabledForEvent","escape","isEventIgnored","boundFunction","consume","isConsumed","isEditing","isEscapeEnabled","removeListener","__mxOutput","undefined"],"mappings":"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","file":"mxKeyHandler.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxKeyHandler\n *\n * Event handler that listens to keystroke events. This is not a singleton,\n * however, it is normally only required once if the target is the document\n * element (default).\n * \n * This handler installs a key event listener in the topmost DOM node and\n * processes all events that originate from descandants of <mxGraph.container>\n * or from the topmost DOM node. The latter means that all unhandled keystrokes\n * are handled by this object regardless of the focused state of the <graph>.\n * \n * Example:\n * \n * The following example creates a key handler that listens to the delete key\n * (46) and deletes the selection cells if the graph is enabled.\n * \n * (code)\n * var keyHandler = new mxKeyHandler(graph);\n * keyHandler.bindKey(46, function(evt)\n * {\n *   if (graph.isEnabled())\n *   {\n *     graph.removeCells();\n *   }\n * });\n * (end)\n * \n * Keycodes:\n * \n * See http://tinyurl.com/yp8jgl or http://tinyurl.com/229yqw for a list of\n * keycodes or install a key event listener into the document element and print\n * the key codes of the respective events to the console.\n * \n * To support the Command key and the Control key on the Mac, the following\n * code can be used.\n *\n * (code)\n * keyHandler.getFunction = function(evt)\n * {\n *   if (evt != null)\n *   {\n *     return (mxEvent.isControlDown(evt) || (mxClient.IS_MAC && evt.metaKey)) ? this.controlKeys[evt.keyCode] : this.normalKeys[evt.keyCode];\n *   }\n *   \n *   return null;\n * };\n * (end)\n * \n * Constructor: mxKeyHandler\n *\n * Constructs an event handler that executes functions bound to specific\n * keystrokes.\n * \n * Parameters:\n * \n * graph - Reference to the associated <mxGraph>.\n * target - Optional reference to the event target. If null, the document\n * element is used as the event target, that is, the object where the key\n * event listener is installed.\n */\nfunction mxKeyHandler(graph, target)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.target = target || document.documentElement;\n\t\t\n\t\t// Creates the arrays to map from keycodes to functions\n\t\tthis.normalKeys = [];\n\t\tthis.shiftKeys = [];\n\t\tthis.controlKeys = [];\n\t\tthis.controlShiftKeys = [];\n\t\t\n\t\tthis.keydownHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.keyDown(evt);\n\t\t});\n\n\t\t// Installs the keystroke listener in the target\n\t\tmxEvent.addListener(this.target, 'keydown', this.keydownHandler);\n\t\t\n\t\t// Automatically deallocates memory in IE\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload',\n\t\t\t\tmxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tthis.destroy();\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the <mxGraph> associated with this handler.\n */\nmxKeyHandler.prototype.graph = null;\n\n/**\n * Variable: target\n * \n * Reference to the target DOM, that is, the DOM node where the key event\n * listeners are installed.\n */\nmxKeyHandler.prototype.target = null;\n\n/**\n * Variable: normalKeys\n * \n * Maps from keycodes to functions for non-pressed control keys.\n */\nmxKeyHandler.prototype.normalKeys = null;\n\n/**\n * Variable: shiftKeys\n * \n * Maps from keycodes to functions for pressed shift keys.\n */\nmxKeyHandler.prototype.shiftKeys = null;\n\n/**\n * Variable: controlKeys\n * \n * Maps from keycodes to functions for pressed control keys.\n */\nmxKeyHandler.prototype.controlKeys = null;\n\n/**\n * Variable: controlShiftKeys\n * \n * Maps from keycodes to functions for pressed control and shift keys.\n */\nmxKeyHandler.prototype.controlShiftKeys = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxKeyHandler.prototype.enabled = true;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation returns\n * <enabled>.\n */\nmxKeyHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling by updating <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxKeyHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: bindKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control key is not pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindKey = function(code, funct)\n{\n\tthis.normalKeys[code] = funct;\n};\n\n/**\n * Function: bindShiftKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the shift key is pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindShiftKey = function(code, funct)\n{\n\tthis.shiftKeys[code] = funct;\n};\n\n/**\n * Function: bindControlKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control key is pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindControlKey = function(code, funct)\n{\n\tthis.controlKeys[code] = funct;\n};\n\n/**\n * Function: bindControlShiftKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control and shift key are pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindControlShiftKey = function(code, funct)\n{\n\tthis.controlShiftKeys[code] = funct;\n};\n\n/**\n * Function: isControlDown\n * \n * Returns true if the control key is pressed. This uses <mxEvent.isControlDown>.\n * \n * Parameters:\n * \n * evt - Key event whose control key pressed state should be returned.\n */\nmxKeyHandler.prototype.isControlDown = function(evt)\n{\n\treturn mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: getFunction\n * \n * Returns the function associated with the given key event or null if no\n * function is associated with the given event.\n * \n * Parameters:\n * \n * evt - Key event whose associated function should be returned.\n */\nmxKeyHandler.prototype.getFunction = function(evt)\n{\n\tif (evt != null && !mxEvent.isAltDown(evt))\n\t{\n\t\tif (this.isControlDown(evt))\n\t\t{\n\t\t\tif (mxEvent.isShiftDown(evt))\n\t\t\t{\n\t\t\t\treturn this.controlShiftKeys[evt.keyCode];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.controlKeys[evt.keyCode];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxEvent.isShiftDown(evt))\n\t\t\t{\n\t\t\t\treturn this.shiftKeys[evt.keyCode];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.normalKeys[evt.keyCode];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\t\n/**\n * Function: isGraphEvent\n * \n * Returns true if the event should be processed by this handler, that is,\n * if the event source is either the target, one of its direct children, a\n * descendant of the <mxGraph.container>, or the <mxGraph.cellEditor> of the\n * <graph>.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isGraphEvent = function(evt)\n{\n\tvar source = mxEvent.getSource(evt);\n\t\n\t// Accepts events from the target object or\n\t// in-place editing inside graph\n\tif ((source == this.target || source.parentNode == this.target) ||\n\t\t(this.graph.cellEditor != null && this.graph.cellEditor.isEventSource(evt)))\n\t{\n\t\treturn true;\n\t}\n\t\n\t// Accepts events from inside the container\n\treturn mxUtils.isAncestorNode(this.graph.container, source);\n};\n\n/**\n * Function: keyDown\n * \n * Handles the event by invoking the function bound to the respective keystroke\n * if <isEnabledForEvent> returns true for the given event and if\n * <isEventIgnored> returns false, except for escape for which\n * <isEventIgnored> is not invoked.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.keyDown = function(evt)\n{\n\tif (this.isEnabledForEvent(evt))\n\t{\n\t\t// Cancels the editing if escape is pressed\n\t\tif (evt.keyCode == 27 /* Escape */)\n\t\t{\n\t\t\tthis.escape(evt);\n\t\t}\n\t\t\n\t\t// Invokes the function for the keystroke\n\t\telse if (!this.isEventIgnored(evt))\n\t\t{\n\t\t\tvar boundFunction = this.getFunction(evt);\n\t\t\t\n\t\t\tif (boundFunction != null)\n\t\t\t{\n\t\t\t\tboundFunction(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isEnabledForEvent\n * \n * Returns true if the given event should be handled. <isEventIgnored> is\n * called later if the event is not an escape key stroke, in which case\n * <escape> is called. This implementation returns true if <isEnabled>\n * returns true for both, this handler and <graph>, if the event is not\n * consumed and if <isGraphEvent> returns true.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isEnabledForEvent = function(evt)\n{\n\treturn (this.graph.isEnabled() && !mxEvent.isConsumed(evt) &&\n\t\tthis.isGraphEvent(evt) && this.isEnabled());\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the given keystroke should be ignored. This returns\n * graph.isEditing().\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isEventIgnored = function(evt)\n{\n\treturn this.graph.isEditing();\n};\n\n/**\n * Function: escape\n * \n * Hook to process ESCAPE keystrokes. This implementation invokes\n * <mxGraph.stopEditing> to cancel the current editing, connecting\n * and/or other ongoing modifications.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke. Possible keycode in this\n * case is 27 (ESCAPE).\n */\nmxKeyHandler.prototype.escape = function(evt)\n{\n\tif (this.graph.isEscapeEnabled())\n\t{\n\t\tthis.graph.escape(evt);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its references into the DOM. This does\n * normally not need to be called, it is called automatically when the\n * window unloads (in IE).\n */\nmxKeyHandler.prototype.destroy = function()\n{\n\tif (this.target != null && this.keydownHandler != null)\n\t{\n\t\tmxEvent.removeListener(this.target, 'keydown', this.keydownHandler);\n\t\tthis.keydownHandler = null;\n\t}\n\t\n\tthis.target = null;\n};\n\n__mxOutput.mxKeyHandler = typeof mxKeyHandler !== 'undefined' ? mxKeyHandler : undefined;\n"]}