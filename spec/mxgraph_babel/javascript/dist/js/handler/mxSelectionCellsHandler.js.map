{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/handler/mxSelectionCellsHandler.js"],"names":["mxSelectionCellsHandler","graph","mxEventSource","call","handlers","mxDictionary","addMouseListener","refreshHandler","mxUtils","bind","sender","evt","isEnabled","refresh","getSelectionModel","addListener","mxEvent","CHANGE","getModel","getView","SCALE","TRANSLATE","SCALE_AND_TRANSLATE","DOWN","UP","extend","prototype","enabled","maxHandlers","setEnabled","value","getHandler","cell","get","reset","visit","key","handler","apply","oldHandlers","tmp","getSelectionCells","i","length","state","view","getState","remove","destroy","isHandlerActive","redraw","createHandler","fireEvent","mxEventObject","ADD","put","REMOVE","index","updateHandler","mouseDown","me","args","mouseMove","mouseUp","removeMouseListener","removeListener","__mxOutput","undefined"],"mappings":"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","file":"mxSelectionCellsHandler.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSelectionCellsHandler\n * \n * An event handler that manages cell handlers and invokes their mouse event\n * processing functions.\n * \n * Group: Events\n * \n * Event: mxEvent.ADD\n * \n * Fires if a cell has been added to the selection. The <code>state</code>\n * property contains the <mxCellState> that has been added.\n * \n * Event: mxEvent.REMOVE\n * \n * Fires if a cell has been remove from the selection. The <code>state</code>\n * property contains the <mxCellState> that has been removed.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxSelectionCellsHandler(graph)\n{\n\tmxEventSource.call(this);\n\t\n\tthis.graph = graph;\n\tthis.handlers = new mxDictionary();\n\tthis.graph.addMouseListener(this);\n\t\n\tthis.refreshHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.refresh();\n\t\t}\n\t});\n\t\n\tthis.graph.getSelectionModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.DOWN, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.UP, this.refreshHandler);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxSelectionCellsHandler, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxSelectionCellsHandler.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxSelectionCellsHandler.prototype.enabled = true;\n\n/**\n * Variable: refreshHandler\n * \n * Keeps a reference to an event listener for later removal.\n */\nmxSelectionCellsHandler.prototype.refreshHandler = null;\n\n/**\n * Variable: maxHandlers\n * \n * Defines the maximum number of handlers to paint individually. Default is 100.\n */\nmxSelectionCellsHandler.prototype.maxHandlers = 100;\n\n/**\n * Variable: handlers\n * \n * <mxDictionary> that maps from cells to handlers.\n */\nmxSelectionCellsHandler.prototype.handlers = null;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxSelectionCellsHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxSelectionCellsHandler.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: getHandler\n * \n * Returns the handler for the given cell.\n */\nmxSelectionCellsHandler.prototype.getHandler = function(cell)\n{\n\treturn this.handlers.get(cell);\n};\n\n/**\n * Function: reset\n * \n * Resets all handlers.\n */\nmxSelectionCellsHandler.prototype.reset = function()\n{\n\tthis.handlers.visit(function(key, handler)\n\t{\n\t\thandler.reset.apply(handler);\n\t});\n};\n\n/**\n * Function: refresh\n * \n * Reloads or updates all handlers.\n */\nmxSelectionCellsHandler.prototype.refresh = function()\n{\n\t// Removes all existing handlers\n\tvar oldHandlers = this.handlers;\n\tthis.handlers = new mxDictionary();\n\t\n\t// Creates handles for all selection cells\n\tvar tmp = this.graph.getSelectionCells();\n\n\tfor (var i = 0; i < tmp.length; i++)\n\t{\n\t\tvar state = this.graph.view.getState(tmp[i]);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tvar handler = oldHandlers.remove(tmp[i]);\n\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tif (handler.state != state)\n\t\t\t\t{\n\t\t\t\t\thandler.destroy();\n\t\t\t\t\thandler = null;\n\t\t\t\t}\n\t\t\t\telse if (!this.isHandlerActive(handler))\n\t\t\t\t{\n\t\t\t\t\tif (handler.refresh != null)\n\t\t\t\t\t{\n\t\t\t\t\t\thandler.refresh();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\thandler.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (handler == null)\n\t\t\t{\n\t\t\t\thandler = this.graph.createHandler(state);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD, 'state', state));\n\t\t\t}\n\t\t\t\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tthis.handlers.put(tmp[i], handler);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Destroys all unused handlers\n\toldHandlers.visit(mxUtils.bind(this, function(key, handler)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE, 'state', handler.state));\n\t\thandler.destroy();\n\t}));\n};\n\n/**\n * Function: isHandlerActive\n * \n * Returns true if the given handler is active and should not be redrawn.\n */\nmxSelectionCellsHandler.prototype.isHandlerActive = function(handler)\n{\n\treturn handler.index != null;\n};\n\n/**\n * Function: updateHandler\n * \n * Updates the handler for the given shape if one exists.\n */\nmxSelectionCellsHandler.prototype.updateHandler = function(state)\n{\n\tvar handler = this.handlers.remove(state.cell);\n\t\n\tif (handler != null)\n\t{\n\t\thandler.destroy();\n\t\thandler = this.graph.createHandler(state);\n\t\t\n\t\tif (handler != null)\n\t\t{\n\t\t\tthis.handlers.put(state.cell, handler);\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseDown\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseDown.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseMove.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseUp.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxSelectionCellsHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\t\n\tif (this.refreshHandler != null)\n\t{\n\t\tthis.graph.getSelectionModel().removeListener(this.refreshHandler);\n\t\tthis.graph.getModel().removeListener(this.refreshHandler);\n\t\tthis.graph.getView().removeListener(this.refreshHandler);\n\t\tthis.refreshHandler = null;\n\t}\n};\n\n__mxOutput.mxSelectionCellsHandler = typeof mxSelectionCellsHandler !== 'undefined' ? mxSelectionCellsHandler : undefined;\n"]}