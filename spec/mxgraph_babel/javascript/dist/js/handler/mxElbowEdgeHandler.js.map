{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/handler/mxElbowEdgeHandler.js"],"names":["mxElbowEdgeHandler","state","mxEdgeHandler","call","mxUtils","extend","prototype","flipEnabled","doubleClickOrientationResource","mxClient","language","createBends","bends","bend","createHandleShape","initBend","setCursor","mxConstants","CURSOR_TERMINAL_HANDLE","push","createVirtualBend","bind","evt","mxEvent","isConsumed","graph","flipEdge","cell","consume","points","mxPoint","dblClickHandler","getCursorForBend","isCellBendable","node","style","display","STYLE_EDGE","mxEdgeStyle","TopToBottom","EDGESTYLE_TOPTOBOTTOM","ElbowConnector","EDGESTYLE_ELBOW","STYLE_ELBOW","ELBOW_VERTICAL","getTooltipForNode","tip","parentNode","mxResources","get","convertPoint","point","gridEnabled","scale","getView","getScale","tr","getTranslate","origin","x","snap","y","Math","round","redrawInnerBends","p0","pe","g","getModel","getGeometry","pts","absolutePoints","pt","length","translate","b","bounds","w","width","h","height","mxRectangle","manageLabelHandle","checkLabelHandle","handleImage","labelShape","visible","intersects","HANDLE_SIZE","floor","redraw","__mxOutput","undefined"],"mappings":"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","file":"mxElbowEdgeHandler.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxElbowEdgeHandler\n *\n * Graph event handler that reconnects edges and modifies control points and\n * the edge label location. Uses <mxTerminalMarker> for finding and\n * highlighting new source and target vertices. This handler is automatically\n * created in <mxGraph.createHandler>. It extends <mxEdgeHandler>.\n * \n * Constructor: mxEdgeHandler\n *\n * Constructs an edge handler for the specified <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be modified.\n */\nfunction mxElbowEdgeHandler(state)\n{\n\tmxEdgeHandler.call(this, state);\n};\n\n/**\n * Extends mxEdgeHandler.\n */\nmxUtils.extend(mxElbowEdgeHandler, mxEdgeHandler);\n\n/**\n * Specifies if a double click on the middle handle should call\n * <mxGraph.flipEdge>. Default is true.\n */\nmxElbowEdgeHandler.prototype.flipEnabled = true;\n\n/**\n * Variable: doubleClickOrientationResource\n * \n * Specifies the resource key for the tooltip to be displayed on the single\n * control point for routed edges. If the resource for this key does not\n * exist then the value is used as the error message. Default is\n * 'doubleClickOrientation'.\n */\nmxElbowEdgeHandler.prototype.doubleClickOrientationResource =\n\t(mxClient.language != 'none') ? 'doubleClickOrientation' : '';\n\n/**\n * Function: createBends\n * \n * Overrides <mxEdgeHandler.createBends> to create custom bends.\n */\n mxElbowEdgeHandler.prototype.createBends = function()\n {\n\tvar bends = [];\n\t\n\t// Source\n\tvar bend = this.createHandleShape(0);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\t// Virtual\n\tbends.push(this.createVirtualBend(mxUtils.bind(this, function(evt)\n\t{\n\t\tif (!mxEvent.isConsumed(evt) && this.flipEnabled)\n\t\t{\n\t\t\tthis.graph.flipEdge(this.state.cell, evt);\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t})));\n\tthis.points.push(new mxPoint(0,0));\n\n\t// Target\n\tbend = this.createHandleShape(2);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\t\n\treturn bends;\n };\n\n/**\n * Function: createVirtualBend\n * \n * Creates a virtual bend that supports double clicking and calls\n * <mxGraph.flipEdge>.\n */\nmxElbowEdgeHandler.prototype.createVirtualBend = function(dblClickHandler)\n{\n\tvar bend = this.createHandleShape();\n\tthis.initBend(bend, dblClickHandler);\n\n\tbend.setCursor(this.getCursorForBend());\n\n\tif (!this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tbend.node.style.display = 'none';\n\t}\n\n\treturn bend;\n};\n\n/**\n * Function: getCursorForBend\n * \n * Returns the cursor to be used for the bend.\n */\nmxElbowEdgeHandler.prototype.getCursorForBend = function()\n{\n\treturn (this.state.style[mxConstants.STYLE_EDGE] == mxEdgeStyle.TopToBottom ||\n\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.EDGESTYLE_TOPTOBOTTOM ||\n\t\t((this.state.style[mxConstants.STYLE_EDGE] == mxEdgeStyle.ElbowConnector ||\n\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.EDGESTYLE_ELBOW)&&\n\t\tthis.state.style[mxConstants.STYLE_ELBOW] == mxConstants.ELBOW_VERTICAL)) ? \n\t\t'row-resize' : 'col-resize';\n};\n\n/**\n * Function: getTooltipForNode\n * \n * Returns the tooltip for the given node.\n */\nmxElbowEdgeHandler.prototype.getTooltipForNode = function(node)\n{\n\tvar tip = null;\n\t\n\tif (this.bends != null && this.bends[1] != null && (node == this.bends[1].node ||\n\t\tnode.parentNode == this.bends[1].node))\n\t{\n\t\ttip = this.doubleClickOrientationResource;\n\t\ttip = mxResources.get(tip) || tip; // translate\n\t}\n\n\treturn tip;\n};\n\n/**\n * Function: convertPoint\n * \n * Converts the given point in-place from screen to unscaled, untranslated\n * graph coordinates and applies the grid.\n * \n * Parameters:\n * \n * point - <mxPoint> to be converted.\n * gridEnabled - Boolean that specifies if the grid should be applied.\n */\nmxElbowEdgeHandler.prototype.convertPoint = function(point, gridEnabled)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\tvar origin = this.state.origin;\n\t\n\tif (gridEnabled)\n\t{\n\t\tpoint.x = this.graph.snap(point.x);\n\t\tpoint.y = this.graph.snap(point.y);\n\t}\n\t\n\tpoint.x = Math.round(point.x / scale - tr.x - origin.x);\n\tpoint.y = Math.round(point.y / scale - tr.y - origin.y);\n\t\n\treturn point;\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates and redraws the inner bends.\n * \n * Parameters:\n * \n * p0 - <mxPoint> that represents the location of the first point.\n * pe - <mxPoint> that represents the location of the last point.\n */\nmxElbowEdgeHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tvar g = this.graph.getModel().getGeometry(this.state.cell);\n\tvar pts = this.state.absolutePoints;\n\tvar pt = null;\n\n\t// Keeps the virtual bend on the edge shape\n\tif (pts.length > 1)\n\t{\n\t\tp0 = pts[1];\n\t\tpe = pts[pts.length - 2];\n\t}\n\telse if (g.points != null && g.points.length > 0)\n\t{\n\t\tpt = pts[0];\n\t}\n\t\n\tif (pt == null)\n\t{\n\t\tpt = new mxPoint(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n\t}\n\telse\n\t{\n\t\tpt = new mxPoint(this.graph.getView().scale * (pt.x + this.graph.getView().translate.x + this.state.origin.x),\n\t\t\t\tthis.graph.getView().scale * (pt.y + this.graph.getView().translate.y + this.state.origin.y));\n\t}\n\n\t// Makes handle slightly bigger if the yellow  label handle\n\t// exists and intersects this green handle\n\tvar b = this.bends[1].bounds;\n\tvar w = b.width;\n\tvar h = b.height;\n\tvar bounds = new mxRectangle(Math.round(pt.x - w / 2), Math.round(pt.y - h / 2), w, h);\n\n\tif (this.manageLabelHandle)\n\t{\n\t\tthis.checkLabelHandle(bounds);\n\t}\n\telse if (this.handleImage == null && this.labelShape.visible && mxUtils.intersects(bounds, this.labelShape.bounds))\n\t{\n\t\tw = mxConstants.HANDLE_SIZE + 3;\n\t\th = mxConstants.HANDLE_SIZE + 3;\n\t\tbounds = new mxRectangle(Math.floor(pt.x - w / 2), Math.floor(pt.y - h / 2), w, h);\n\t}\n\n\tthis.bends[1].bounds = bounds;\n\tthis.bends[1].redraw();\n\t\n\tif (this.manageLabelHandle)\n\t{\n\t\tthis.checkLabelHandle(this.bends[1].bounds);\n\t}\n};\n\n__mxOutput.mxElbowEdgeHandler = typeof mxElbowEdgeHandler !== 'undefined' ? mxElbowEdgeHandler : undefined;\n"]}