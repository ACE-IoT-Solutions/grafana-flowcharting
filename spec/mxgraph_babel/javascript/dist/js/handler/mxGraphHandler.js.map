{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/handler/mxGraphHandler.js"],"names":["mxGraphHandler","graph","addMouseListener","panHandler","mxUtils","bind","updatePreviewShape","updateHint","addListener","mxEvent","PAN","escapeHandler","sender","evt","reset","ESCAPE","refreshHandler","first","bounds","getView","getBounds","cells","pBounds","getPreviewBounds","e","getModel","CHANGE","prototype","maxCells","mxClient","IS_IE","enabled","highlightEnabled","cloneEnabled","moveEnabled","guidesEnabled","guide","currentDx","currentDy","updateCursor","selectEnabled","removeCellsFromParent","connectOnDrop","scrollOnMove","minimumSize","previewColor","htmlPreview","shape","scaleGrid","rotationEnabled","isEnabled","setEnabled","value","isCloneEnabled","setCloneEnabled","isMoveEnabled","setMoveEnabled","isSelectEnabled","setSelectEnabled","isRemoveCellsFromParent","setRemoveCellsFromParent","getInitialCellForEvent","me","getCell","isDelayedSelection","cell","isCellSelected","consumeMouseEvent","evtName","consume","mouseDown","isConsumed","getState","isMultiTouchEvent","getEvent","delayedSelection","selectCellForEvent","model","geo","getGeometry","isCellMovable","isEdge","getSelectionCount","points","length","getTerminal","allowDanglingEdges","isCloneEvent","isCellsCloneable","start","getX","getY","cellWasClicked","MOUSE_DOWN","getGuideStates","parent","getDefaultParent","filter","view","isVertex","relative","getCellStates","filterDescendants","getCells","initialCell","getMovableCells","getSelectionCells","getBoundingBox","width","Math","max","height","dx","x","round","ceil","tr","translate","s","scale","dy","y","result","i","state","bbox","boundingBox","mxRectangle","fromRectangle","add","createPreviewShape","mxRectangleShape","isDashed","dialect","mxConstants","DIALECT_STRICTHTML","init","container","DIALECT_SVG","DIALECT_VML","getOverlayPane","pointerEvents","IS_IOS","getSvgScreenOffset","convertPoint","mxGuide","useGuidesForEvent","isEnabledForEvent","snap","vector","getDelta","point","mxPoint","roundLength","removeHint","mouseMove","isMouseDown","delta","tol","tolerance","abs","highlight","mxCellHighlight","DROP_TARGET_COLOR","clone","gridEnabled","isGridEnabledEvent","hideGuide","move","trx","tx","ty","v","hide","isConstrainedEvent","target","isDropEnabled","getDropTarget","getParent","setHighlightColor","isCellConnectable","error","getEdgeValidationError","color","VALID_COLOR","INVALID_CONNECT_TARGET_COLOR","MOUSE_MOVE","sourceState","cursor","getCursorForMouseEvent","CURSOR_MOVABLE_EDGE","CURSOR_MOVABLE_VERTEX","setCursor","panDx","panDy","redraw","mouseUp","isEdgeValid","connectionHandler","connect","isSplitEnabled","isSplitTarget","splitEdge","moveCells","selectDelayed","MOUSE_UP","popupMenuHandler","isPopupTrigger","destroyShapes","guides","shouldRemoveCellsFromParent","pState","pt","getClientX","getClientY","alpha","toRadians","getValue","style","STYLE_ROTATION","cos","sin","cx","getCenterX","getCenterY","getRotatedPoint","contains","getCloneableCells","isCellLocked","scrollCellToVisible","setSelectionCells","destroy","removeMouseListener","removeListener","__mxOutput","undefined"],"mappings":";;;;;AAAA;;;;AAIA;;;;;;;;;;;;;;;;;;;;AAoBA,UAASA,cAAT,CAAwBC,KAAxB,EACA;AACC,OAAKA,KAAL,GAAaA,KAAb;AACA,OAAKA,KAAL,CAAWC,gBAAX,CAA4B,IAA5B;;AAEA;AACA,OAAKC,UAAL,GAAkBC,QAAQC,IAAR,CAAa,IAAb,EAAmB,YACrC;AACC,QAAKC,kBAAL;AACA,QAAKC,UAAL;AACA,GAJiB,CAAlB;;AAMA,OAAKN,KAAL,CAAWO,WAAX,CAAuBC,QAAQC,GAA/B,EAAoC,KAAKP,UAAzC;;AAEA;AACA,OAAKQ,aAAL,GAAqBP,QAAQC,IAAR,CAAa,IAAb,EAAmB,UAASO,MAAT,EAAiBC,GAAjB,EACxC;AACC,QAAKC,KAAL;AACA,GAHoB,CAArB;;AAKA,OAAKb,KAAL,CAAWO,WAAX,CAAuBC,QAAQM,MAA/B,EAAuC,KAAKJ,aAA5C;;AAEA;AACA,OAAKK,cAAL,GAAsBZ,QAAQC,IAAR,CAAa,IAAb,EAAmB,UAASO,MAAT,EAAiBC,GAAjB,EACzC;AACC,OAAI,KAAKI,KAAL,IAAc,IAAlB,EACA;AACC,QACA;AACC,UAAKC,MAAL,GAAc,KAAKjB,KAAL,CAAWkB,OAAX,GAAqBC,SAArB,CAA+B,KAAKC,KAApC,CAAd;AACA,UAAKC,OAAL,GAAe,KAAKC,gBAAL,CAAsB,KAAKF,KAA3B,CAAf;AACA,UAAKf,kBAAL;AACA,KALD,CAMA,OAAOkB,CAAP,EACA;AACC;AACA,UAAKV,KAAL;AACA;AACD;AACD,GAhBqB,CAAtB;;AAkBA,OAAKb,KAAL,CAAWwB,QAAX,GAAsBjB,WAAtB,CAAkCC,QAAQiB,MAA1C,EAAkD,KAAKV,cAAvD;AACA,E;;;AAAA;;AAED;;;;;AAKAhB,kBAAe2B,SAAf,CAAyB1B,KAAzB,GAAiC,IAAjC;;AAEA;;;;;;;;;;AAUAD,kBAAe2B,SAAf,CAAyBC,QAAzB,GAAqCC,SAASC,KAAV,GAAmB,EAAnB,GAAwB,EAA5D;;AAEA;;;;;AAKA9B,kBAAe2B,SAAf,CAAyBI,OAAzB,GAAmC,IAAnC;;AAEA;;;;;;AAMA/B,kBAAe2B,SAAf,CAAyBK,gBAAzB,GAA4C,IAA5C;;AAEA;;;;;AAKAhC,kBAAe2B,SAAf,CAAyBM,YAAzB,GAAwC,IAAxC;;AAEA;;;;;AAKAjC,kBAAe2B,SAAf,CAAyBO,WAAzB,GAAuC,IAAvC;;AAEA;;;;;;AAMAlC,kBAAe2B,SAAf,CAAyBQ,aAAzB,GAAyC,KAAzC;;AAEA;;;;;AAKAnC,kBAAe2B,SAAf,CAAyBS,KAAzB,GAAiC,IAAjC;;AAEA;;;;;AAKApC,kBAAe2B,SAAf,CAAyBU,SAAzB,GAAqC,IAArC;;AAEA;;;;;AAKArC,kBAAe2B,SAAf,CAAyBW,SAAzB,GAAqC,IAArC;;AAEA;;;;;;AAMAtC,kBAAe2B,SAAf,CAAyBY,YAAzB,GAAwC,IAAxC;;AAEA;;;;;AAKAvC,kBAAe2B,SAAf,CAAyBa,aAAzB,GAAyC,IAAzC;;AAEA;;;;;AAKAxC,kBAAe2B,SAAf,CAAyBc,qBAAzB,GAAiD,IAAjD;;AAEA;;;;;;AAMAzC,kBAAe2B,SAAf,CAAyBe,aAAzB,GAAyC,KAAzC;;AAEA;;;;;;AAMA1C,kBAAe2B,SAAf,CAAyBgB,YAAzB,GAAwC,IAAxC;;AAEA;;;;;;AAMA3C,kBAAe2B,SAAf,CAAyBiB,WAAzB,GAAuC,CAAvC;;AAEA;;;;;AAKA5C,kBAAe2B,SAAf,CAAyBkB,YAAzB,GAAwC,OAAxC;;AAEA;;;;;;;AAOA7C,kBAAe2B,SAAf,CAAyBmB,WAAzB,GAAuC,KAAvC;;AAEA;;;;;AAKA9C,kBAAe2B,SAAf,CAAyBoB,KAAzB,GAAiC,IAAjC;;AAEA;;;;;AAKA/C,kBAAe2B,SAAf,CAAyBqB,SAAzB,GAAqC,KAArC;;AAEA;;;;;AAKAhD,kBAAe2B,SAAf,CAAyBsB,eAAzB,GAA2C,IAA3C;;AAEA;;;;;AAKAjD,kBAAe2B,SAAf,CAAyBuB,SAAzB,GAAqC,YACrC;AACC,WAAO,KAAKnB,OAAZ;AACA,IAHD;;AAKA;;;;;AAKA/B,kBAAe2B,SAAf,CAAyBwB,UAAzB,GAAsC,UAASC,KAAT,EACtC;AACC,SAAKrB,OAAL,GAAeqB,KAAf;AACA,IAHD;;AAKA;;;;;AAKApD,kBAAe2B,SAAf,CAAyB0B,cAAzB,GAA0C,YAC1C;AACC,WAAO,KAAKpB,YAAZ;AACA,IAHD;;AAKA;;;;;;;;;AASAjC,kBAAe2B,SAAf,CAAyB2B,eAAzB,GAA2C,UAASF,KAAT,EAC3C;AACC,SAAKnB,YAAL,GAAoBmB,KAApB;AACA,IAHD;;AAKA;;;;;AAKApD,kBAAe2B,SAAf,CAAyB4B,aAAzB,GAAyC,YACzC;AACC,WAAO,KAAKrB,WAAZ;AACA,IAHD;;AAKA;;;;;AAKAlC,kBAAe2B,SAAf,CAAyB6B,cAAzB,GAA0C,UAASJ,KAAT,EAC1C;AACC,SAAKlB,WAAL,GAAmBkB,KAAnB;AACA,IAHD;;AAKA;;;;;AAKApD,kBAAe2B,SAAf,CAAyB8B,eAAzB,GAA2C,YAC3C;AACC,WAAO,KAAKjB,aAAZ;AACA,IAHD;;AAKA;;;;;AAKAxC,kBAAe2B,SAAf,CAAyB+B,gBAAzB,GAA4C,UAASN,KAAT,EAC5C;AACC,SAAKZ,aAAL,GAAqBY,KAArB;AACA,IAHD;;AAKA;;;;;AAKApD,kBAAe2B,SAAf,CAAyBgC,uBAAzB,GAAmD,YACnD;AACC,WAAO,KAAKlB,qBAAZ;AACA,IAHD;;AAKA;;;;;AAKAzC,kBAAe2B,SAAf,CAAyBiC,wBAAzB,GAAoD,UAASR,KAAT,EACpD;AACC,SAAKX,qBAAL,GAA6BW,KAA7B;AACA,IAHD;;AAKA;;;;;AAKApD,kBAAe2B,SAAf,CAAyBkC,sBAAzB,GAAkD,UAASC,EAAT,EAClD;AACC,WAAOA,GAAGC,OAAH,EAAP;AACA,IAHD;;AAKA;;;;;AAKA/D,kBAAe2B,SAAf,CAAyBqC,kBAAzB,GAA8C,UAASC,IAAT,EAAeH,EAAf,EAC9C;AACC,WAAO,KAAK7D,KAAL,CAAWiE,cAAX,CAA0BD,IAA1B,CAAP;AACA,IAHD;;AAKA;;;;;;;;;;;;;;;;;;;AAmBAjE,kBAAe2B,SAAf,CAAyBwC,iBAAzB,GAA6C,UAASC,OAAT,EAAkBN,EAAlB,EAC7C;AACCA,OAAGO,OAAH;AACA,IAHD;;AAKA;;;;;;;AAOArE,kBAAe2B,SAAf,CAAyB2C,SAAzB,GAAqC,UAAS1D,MAAT,EAAiBkD,EAAjB,EACrC;AACC,QAAI,CAACA,GAAGS,UAAH,EAAD,IAAoB,KAAKrB,SAAL,EAApB,IAAwC,KAAKjD,KAAL,CAAWiD,SAAX,EAAxC,IACHY,GAAGU,QAAH,MAAiB,IADd,IACsB,CAAC/D,QAAQgE,iBAAR,CAA0BX,GAAGY,QAAH,EAA1B,CAD3B,EAEA;AACC,SAAIT,OAAO,KAAKJ,sBAAL,CAA4BC,EAA5B,CAAX;AACA,UAAKa,gBAAL,GAAwB,KAAKX,kBAAL,CAAwBC,IAAxB,EAA8BH,EAA9B,CAAxB;AACA,UAAKG,IAAL,GAAY,IAAZ;;AAEA,SAAI,KAAKR,eAAL,MAA0B,CAAC,KAAKkB,gBAApC,EACA;AACC,WAAK1E,KAAL,CAAW2E,kBAAX,CAA8BX,IAA9B,EAAoCH,GAAGY,QAAH,EAApC;AACA;;AAED,SAAI,KAAKnB,aAAL,EAAJ,EACA;AACC,UAAIsB,QAAQ,KAAK5E,KAAL,CAAW4E,KAAvB;AACA,UAAIC,MAAMD,MAAME,WAAN,CAAkBd,IAAlB,CAAV;;AAEA,UAAI,KAAKhE,KAAL,CAAW+E,aAAX,CAAyBf,IAAzB,MAAoC,CAACY,MAAMI,MAAN,CAAahB,IAAb,CAAD,IAAuB,KAAKhE,KAAL,CAAWiF,iBAAX,KAAiC,CAAxD,IACtCJ,IAAIK,MAAJ,IAAc,IAAd,IAAsBL,IAAIK,MAAJ,CAAWC,MAAX,GAAoB,CADJ,IACUP,MAAMQ,WAAN,CAAkBpB,IAAlB,EAAwB,IAAxB,KAAiC,IAD3C,IAEvCY,MAAMQ,WAAN,CAAkBpB,IAAlB,EAAwB,KAAxB,KAAkC,IAFI,IAEK,KAAKhE,KAAL,CAAWqF,kBAFhB,IAGrC,KAAKrF,KAAL,CAAWsF,YAAX,CAAwBzB,GAAGY,QAAH,EAAxB,KAA0C,KAAKzE,KAAL,CAAWuF,gBAAX,EAHxC,CAAJ,EAIA;AACC,YAAKC,KAAL,CAAWxB,IAAX,EAAiBH,GAAG4B,IAAH,EAAjB,EAA4B5B,GAAG6B,IAAH,EAA5B;AACA,OAND,MAOK,IAAI,KAAKhB,gBAAT,EACL;AACC,YAAKV,IAAL,GAAYA,IAAZ;AACA;;AAED,WAAK2B,cAAL,GAAsB,IAAtB;AACA,WAAKzB,iBAAL,CAAuB1D,QAAQoF,UAA/B,EAA2C/B,EAA3C;AACA;AACD;AACD,IAnCD;;AAqCA;;;;;AAKA9D,kBAAe2B,SAAf,CAAyBmE,cAAzB,GAA0C,YAC1C;AACC,QAAIC,SAAS,KAAK9F,KAAL,CAAW+F,gBAAX,EAAb;AACA,QAAInB,QAAQ,KAAK5E,KAAL,CAAWwB,QAAX,EAAZ;;AAEA,QAAIwE,SAAS7F,QAAQC,IAAR,CAAa,IAAb,EAAmB,UAAS4D,IAAT,EAChC;AACC,YAAO,KAAKhE,KAAL,CAAWiG,IAAX,CAAgB1B,QAAhB,CAAyBP,IAAzB,KAAkC,IAAlC,IACNY,MAAMsB,QAAN,CAAelC,IAAf,CADM,IAENY,MAAME,WAAN,CAAkBd,IAAlB,KAA2B,IAFrB,IAGN,CAACY,MAAME,WAAN,CAAkBd,IAAlB,EAAwBmC,QAH1B;AAIA,KANY,CAAb;;AAQA,WAAO,KAAKnG,KAAL,CAAWiG,IAAX,CAAgBG,aAAhB,CAA8BxB,MAAMyB,iBAAN,CAAwBL,MAAxB,EAAgCF,MAAhC,CAA9B,CAAP;AACA,IAdD;;AAgBA;;;;;;;;;;;;AAYA/F,kBAAe2B,SAAf,CAAyB4E,QAAzB,GAAoC,UAASC,WAAT,EACpC;AACC,QAAI,CAAC,KAAK7B,gBAAN,IAA0B,KAAK1E,KAAL,CAAW+E,aAAX,CAAyBwB,WAAzB,CAA9B,EACA;AACC,YAAO,CAACA,WAAD,CAAP;AACA,KAHD,MAKA;AACC,YAAO,KAAKvG,KAAL,CAAWwG,eAAX,CAA2B,KAAKxG,KAAL,CAAWyG,iBAAX,EAA3B,CAAP;AACA;AACD,IAVD;;AAYA;;;;;;AAMA1G,kBAAe2B,SAAf,CAAyBJ,gBAAzB,GAA4C,UAASF,KAAT,EAC5C;AACC,QAAIH,SAAS,KAAKyF,cAAL,CAAoBtF,KAApB,CAAb;;AAEA,QAAIH,UAAU,IAAd,EACA;AACC;AACAA,YAAO0F,KAAP,GAAeC,KAAKC,GAAL,CAAS,CAAT,EAAY5F,OAAO0F,KAAP,GAAe,CAA3B,CAAf;AACA1F,YAAO6F,MAAP,GAAgBF,KAAKC,GAAL,CAAS,CAAT,EAAY5F,OAAO6F,MAAP,GAAgB,CAA5B,CAAhB;;AAEA,SAAI7F,OAAO0F,KAAP,GAAe,KAAKhE,WAAxB,EACA;AACC,UAAIoE,KAAK,KAAKpE,WAAL,GAAmB1B,OAAO0F,KAAnC;AACA1F,aAAO+F,CAAP,IAAYD,KAAK,CAAjB;AACA9F,aAAO0F,KAAP,GAAe,KAAKhE,WAApB;AACA,MALD,MAOA;AACC1B,aAAO+F,CAAP,GAAWJ,KAAKK,KAAL,CAAWhG,OAAO+F,CAAlB,CAAX;AACA/F,aAAO0F,KAAP,GAAeC,KAAKM,IAAL,CAAUjG,OAAO0F,KAAjB,CAAf;AACA;;AAED,SAAIQ,KAAK,KAAKnH,KAAL,CAAWiG,IAAX,CAAgBmB,SAAzB;AACA,SAAIC,IAAI,KAAKrH,KAAL,CAAWiG,IAAX,CAAgBqB,KAAxB;;AAEA,SAAIrG,OAAO6F,MAAP,GAAgB,KAAKnE,WAAzB,EACA;AACC,UAAI4E,KAAK,KAAK5E,WAAL,GAAmB1B,OAAO6F,MAAnC;AACA7F,aAAOuG,CAAP,IAAYD,KAAK,CAAjB;AACAtG,aAAO6F,MAAP,GAAgB,KAAKnE,WAArB;AACA,MALD,MAOA;AACC1B,aAAOuG,CAAP,GAAWZ,KAAKK,KAAL,CAAWhG,OAAOuG,CAAlB,CAAX;AACAvG,aAAO6F,MAAP,GAAgBF,KAAKM,IAAL,CAAUjG,OAAO6F,MAAjB,CAAhB;AACA;AACD;;AAED,WAAO7F,MAAP;AACA,IAvCD;;AAyCA;;;;;;;;;;;;;AAaAlB,kBAAe2B,SAAf,CAAyBgF,cAAzB,GAA0C,UAAStF,KAAT,EAC1C;AACC,QAAIqG,SAAS,IAAb;;AAEA,QAAIrG,SAAS,IAAT,IAAiBA,MAAM+D,MAAN,GAAe,CAApC,EACA;AACC,SAAIP,QAAQ,KAAK5E,KAAL,CAAWwB,QAAX,EAAZ;;AAEA,UAAK,IAAIkG,IAAI,CAAb,EAAgBA,IAAItG,MAAM+D,MAA1B,EAAkCuC,GAAlC,EACA;AACC,UAAI9C,MAAMsB,QAAN,CAAe9E,MAAMsG,CAAN,CAAf,KAA4B9C,MAAMI,MAAN,CAAa5D,MAAMsG,CAAN,CAAb,CAAhC,EACA;AACC,WAAIC,QAAQ,KAAK3H,KAAL,CAAWiG,IAAX,CAAgB1B,QAAhB,CAAyBnD,MAAMsG,CAAN,CAAzB,CAAZ;;AAEA,WAAIC,SAAS,IAAb,EACA;AACC,YAAIC,OAAOD,KAAX;;AAEA,YAAI/C,MAAMsB,QAAN,CAAe9E,MAAMsG,CAAN,CAAf,KAA4BC,MAAM7E,KAAN,IAAe,IAA3C,IAAmD6E,MAAM7E,KAAN,CAAY+E,WAAZ,IAA2B,IAAlF,EACA;AACCD,gBAAOD,MAAM7E,KAAN,CAAY+E,WAAnB;AACA;;AAED,YAAIJ,UAAU,IAAd,EACA;AACCA,kBAASK,YAAYC,aAAZ,CAA0BH,IAA1B,CAAT;AACA,SAHD,MAKA;AACCH,gBAAOO,GAAP,CAAWJ,IAAX;AACA;AACD;AACD;AACD;AACD;;AAED,WAAOH,MAAP;AACA,IArCD;;AAuCA;;;;;AAKA1H,kBAAe2B,SAAf,CAAyBuG,kBAAzB,GAA8C,UAAShH,MAAT,EAC9C;AACC,QAAI6B,QAAQ,IAAIoF,gBAAJ,CAAqBjH,MAArB,EAA6B,IAA7B,EAAmC,KAAK2B,YAAxC,CAAZ;AACAE,UAAMqF,QAAN,GAAiB,IAAjB;;AAEA,QAAI,KAAKtF,WAAT,EACA;AACCC,WAAMsF,OAAN,GAAgBC,YAAYC,kBAA5B;AACAxF,WAAMyF,IAAN,CAAW,KAAKvI,KAAL,CAAWwI,SAAtB;AACA,KAJD,MAMA;AACC;AACA;AACA;AACA1F,WAAMsF,OAAN,GAAiB,KAAKpI,KAAL,CAAWoI,OAAX,IAAsBC,YAAYI,WAAnC,GACfJ,YAAYK,WADG,GACWL,YAAYI,WADvC;AAEA3F,WAAMyF,IAAN,CAAW,KAAKvI,KAAL,CAAWkB,OAAX,GAAqByH,cAArB,EAAX;AACA7F,WAAM8F,aAAN,GAAsB,KAAtB;;AAEA;AACA,SAAIhH,SAASiH,MAAb,EACA;AACC/F,YAAMgG,kBAAN,GAA2B,YAC3B;AACC,cAAO,CAAP;AACA,OAHD;AAIA;AACD;;AAED,WAAOhG,KAAP;AACA,IA/BD;;AAiCA;;;;;AAKA/C,kBAAe2B,SAAf,CAAyB8D,KAAzB,GAAiC,UAASxB,IAAT,EAAegD,CAAf,EAAkBQ,CAAlB,EACjC;AACC,SAAKxD,IAAL,GAAYA,IAAZ;AACA,SAAKhD,KAAL,GAAab,QAAQ4I,YAAR,CAAqB,KAAK/I,KAAL,CAAWwI,SAAhC,EAA2CxB,CAA3C,EAA8CQ,CAA9C,CAAb;AACA,SAAKpG,KAAL,GAAa,KAAKkF,QAAL,CAAc,KAAKtC,IAAnB,CAAb;AACA,SAAK/C,MAAL,GAAc,KAAKjB,KAAL,CAAWkB,OAAX,GAAqBC,SAArB,CAA+B,KAAKC,KAApC,CAAd;AACA,SAAKC,OAAL,GAAe,KAAKC,gBAAL,CAAsB,KAAKF,KAA3B,CAAf;;AAEA,QAAI,KAAKc,aAAT,EACA;AACC,UAAKC,KAAL,GAAa,IAAI6G,OAAJ,CAAY,KAAKhJ,KAAjB,EAAwB,KAAK6F,cAAL,EAAxB,CAAb;AACA;AACD,IAZD;;AAcA;;;;;;AAMA9F,kBAAe2B,SAAf,CAAyBuH,iBAAzB,GAA6C,UAASpF,EAAT,EAC7C;AACC,WAAQ,KAAK1B,KAAL,IAAc,IAAf,GAAuB,KAAKA,KAAL,CAAW+G,iBAAX,CAA6BrF,GAAGY,QAAH,EAA7B,CAAvB,GAAqE,IAA5E;AACA,IAHD;;AAMA;;;;;AAKA1E,kBAAe2B,SAAf,CAAyByH,IAAzB,GAAgC,UAASC,MAAT,EAChC;AACC,QAAI9B,QAAS,KAAKvE,SAAN,GAAmB,KAAK/C,KAAL,CAAWiG,IAAX,CAAgBqB,KAAnC,GAA2C,CAAvD;;AAEA8B,WAAOpC,CAAP,GAAW,KAAKhH,KAAL,CAAWmJ,IAAX,CAAgBC,OAAOpC,CAAP,GAAWM,KAA3B,IAAoCA,KAA/C;AACA8B,WAAO5B,CAAP,GAAW,KAAKxH,KAAL,CAAWmJ,IAAX,CAAgBC,OAAO5B,CAAP,GAAWF,KAA3B,IAAoCA,KAA/C;;AAEA,WAAO8B,MAAP;AACA,IARD;;AAUA;;;;;;AAMArJ,kBAAe2B,SAAf,CAAyB2H,QAAzB,GAAoC,UAASxF,EAAT,EACpC;AACC,QAAIyF,QAAQnJ,QAAQ4I,YAAR,CAAqB,KAAK/I,KAAL,CAAWwI,SAAhC,EAA2C3E,GAAG4B,IAAH,EAA3C,EAAsD5B,GAAG6B,IAAH,EAAtD,CAAZ;AACA,QAAI2B,IAAI,KAAKrH,KAAL,CAAWiG,IAAX,CAAgBqB,KAAxB;;AAEA,WAAO,IAAIiC,OAAJ,CAAY,KAAKC,WAAL,CAAiB,CAACF,MAAMtC,CAAN,GAAU,KAAKhG,KAAL,CAAWgG,CAAtB,IAA2BK,CAA5C,IAAiDA,CAA7D,EACN,KAAKmC,WAAL,CAAiB,CAACF,MAAM9B,CAAN,GAAU,KAAKxG,KAAL,CAAWwG,CAAtB,IAA2BH,CAA5C,IAAiDA,CAD3C,CAAP;AAEA,IAPD;;AASA;;;;;AAKAtH,kBAAe2B,SAAf,CAAyBpB,UAAzB,GAAsC,UAASuD,EAAT,EAAa,CAAG,CAAtD;;AAEA;;;;;AAKA9D,kBAAe2B,SAAf,CAAyB+H,UAAzB,GAAsC,YAAW,CAAG,CAApD;;AAEA;;;;;AAKA1J,kBAAe2B,SAAf,CAAyB8H,WAAzB,GAAuC,UAASrE,MAAT,EACvC;AACC,WAAOyB,KAAKK,KAAL,CAAW9B,SAAS,CAApB,IAAyB,CAAhC;AACA,IAHD;;AAKA;;;;;;AAMApF,kBAAe2B,SAAf,CAAyBgI,SAAzB,GAAqC,UAAS/I,MAAT,EAAiBkD,EAAjB,EACrC;AACC,QAAI7D,QAAQ,KAAKA,KAAjB;;AAEA,QAAI,CAAC6D,GAAGS,UAAH,EAAD,IAAoBtE,MAAM2J,WAA1B,IAAyC,KAAK3F,IAAL,IAAa,IAAtD,IACH,KAAKhD,KAAL,IAAc,IADX,IACmB,KAAKC,MAAL,IAAe,IADtC,EAEA;AACC;AACA,SAAIT,QAAQgE,iBAAR,CAA0BX,GAAGY,QAAH,EAA1B,CAAJ,EACA;AACC,WAAK5D,KAAL;AACA;AACA;;AAED,SAAI+I,QAAQ,KAAKP,QAAL,CAAcxF,EAAd,CAAZ;AACA,SAAIkD,KAAK6C,MAAM5C,CAAf;AACA,SAAIO,KAAKqC,MAAMpC,CAAf;AACA,SAAIqC,MAAM7J,MAAM8J,SAAhB;;AAEA,SAAI,KAAKhH,KAAL,IAAc,IAAd,IAAsB8D,KAAKmD,GAAL,CAAShD,EAAT,IAAe8C,GAArC,IAA4CjD,KAAKmD,GAAL,CAASxC,EAAT,IAAesC,GAA/D,EACA;AACC;AACA,UAAI,KAAKG,SAAL,IAAkB,IAAtB,EACA;AACC,YAAKA,SAAL,GAAiB,IAAIC,eAAJ,CAAoB,KAAKjK,KAAzB,EAChBqI,YAAY6B,iBADI,EACe,CADf,CAAjB;AAEA;;AAED,UAAI,KAAKpH,KAAL,IAAc,IAAlB,EACA;AACC,YAAKA,KAAL,GAAa,KAAKmF,kBAAL,CAAwB,KAAKhH,MAA7B,CAAb;AACA;;AAED,UAAIkJ,QAAQnK,MAAMsF,YAAN,CAAmBzB,GAAGY,QAAH,EAAnB,KAAqCzE,MAAMuF,gBAAN,EAArC,IAAiE,KAAKnC,cAAL,EAA7E;AACA,UAAIgH,cAAcpK,MAAMqK,kBAAN,CAAyBxG,GAAGY,QAAH,EAAzB,CAAlB;AACA,UAAI6F,YAAY,IAAhB;;AAEA,UAAI,KAAKnI,KAAL,IAAc,IAAd,IAAsB,KAAK8G,iBAAL,CAAuBpF,EAAvB,CAA1B,EACA;AACC+F,eAAQ,KAAKzH,KAAL,CAAWoI,IAAX,CAAgB,KAAKtJ,MAArB,EAA6B,IAAIsI,OAAJ,CAAYxC,EAAZ,EAAgBQ,EAAhB,CAA7B,EAAkD6C,WAAlD,EAA+DD,KAA/D,CAAR;AACAG,mBAAY,KAAZ;AACAvD,YAAK6C,MAAM5C,CAAX;AACAO,YAAKqC,MAAMpC,CAAX;AACA,OAND,MAOK,IAAI4C,WAAJ,EACL;AACC,WAAII,MAAMxK,MAAMkB,OAAN,GAAgBkG,SAA1B;AACA,WAAIE,QAAQtH,MAAMkB,OAAN,GAAgBoG,KAA5B;;AAEA,WAAImD,KAAK,KAAKxJ,MAAL,CAAY+F,CAAZ,GAAgB,CAAChH,MAAMmJ,IAAN,CAAW,KAAKlI,MAAL,CAAY+F,CAAZ,GAAgBM,KAAhB,GAAwBkD,IAAIxD,CAAvC,IAA4CwD,IAAIxD,CAAjD,IAAsDM,KAA/E;AACA,WAAIoD,KAAK,KAAKzJ,MAAL,CAAYuG,CAAZ,GAAgB,CAACxH,MAAMmJ,IAAN,CAAW,KAAKlI,MAAL,CAAYuG,CAAZ,GAAgBF,KAAhB,GAAwBkD,IAAIhD,CAAvC,IAA4CgD,IAAIhD,CAAjD,IAAsDF,KAA/E;AACA,WAAIqD,IAAI,KAAKxB,IAAL,CAAU,IAAII,OAAJ,CAAYxC,EAAZ,EAAgBQ,EAAhB,CAAV,CAAR;;AAEAR,YAAK4D,EAAE3D,CAAF,GAAMyD,EAAX;AACAlD,YAAKoD,EAAEnD,CAAF,GAAMkD,EAAX;AACA;;AAED,UAAI,KAAKvI,KAAL,IAAc,IAAd,IAAsBmI,SAA1B,EACA;AACC,YAAKnI,KAAL,CAAWyI,IAAX;AACA;;AAED;AACA,UAAI5K,MAAM6K,kBAAN,CAAyBhH,GAAGY,QAAH,EAAzB,CAAJ,EACA;AACC,WAAImC,KAAKmD,GAAL,CAAShD,EAAT,IAAeH,KAAKmD,GAAL,CAASxC,EAAT,CAAnB,EACA;AACCA,aAAK,CAAL;AACA,QAHD,MAKA;AACCR,aAAK,CAAL;AACA;AACD;;AAED,WAAK3E,SAAL,GAAiB2E,EAAjB;AACA,WAAK1E,SAAL,GAAiBkF,EAAjB;AACA,WAAKlH,kBAAL;;AAEA,UAAIyK,SAAS,IAAb;AACA,UAAI9G,OAAOH,GAAGC,OAAH,EAAX;;AAEA,UAAI9D,MAAM+K,aAAN,MAAyB,KAAKhJ,gBAAlC,EACA;AACC;AACA+I,gBAAS9K,MAAMgL,aAAN,CAAoB,KAAK5J,KAAzB,EAAgCyC,GAAGY,QAAH,EAAhC,EAA+CT,IAA/C,EAAqDmG,KAArD,CAAT;AACA;;AAED,UAAIxC,QAAQ3H,MAAMkB,OAAN,GAAgBqD,QAAhB,CAAyBuG,MAAzB,CAAZ;AACA,UAAId,YAAY,KAAhB;;AAEA,UAAIrC,SAAS,IAAT,KAAkB3H,MAAM4E,KAAN,CAAYqG,SAAZ,CAAsB,KAAKjH,IAA3B,KAAoC8G,MAApC,IAA8CX,KAAhE,CAAJ,EACA;AACI,WAAI,KAAKW,MAAL,IAAeA,MAAnB,EACA;AACC,aAAKA,MAAL,GAAcA,MAAd;AACA,aAAKI,iBAAL,CAAuB7C,YAAY6B,iBAAnC;AACH;;AAEEF,mBAAY,IAAZ;AACH,OATD,MAWA;AACC,YAAKc,MAAL,GAAc,IAAd;;AAEA,WAAI,KAAKrI,aAAL,IAAsBuB,QAAQ,IAA9B,IAAsC,KAAK5C,KAAL,CAAW+D,MAAX,IAAqB,CAA3D,IACHnF,MAAMwB,QAAN,GAAiB0E,QAAjB,CAA0BlC,IAA1B,CADG,IACgChE,MAAMmL,iBAAN,CAAwBnH,IAAxB,CADpC,EAEA;AACC2D,gBAAQ3H,MAAMkB,OAAN,GAAgBqD,QAAhB,CAAyBP,IAAzB,CAAR;;AAEA,YAAI2D,SAAS,IAAb,EACA;AACC,aAAIyD,QAAQpL,MAAMqL,sBAAN,CAA6B,IAA7B,EAAmC,KAAKrH,IAAxC,EAA8CA,IAA9C,CAAZ;AACA,aAAIsH,QAASF,SAAS,IAAV,GACX/C,YAAYkD,WADD,GAEXlD,YAAYmD,4BAFb;AAGA,cAAKN,iBAAL,CAAuBI,KAAvB;AACAtB,qBAAY,IAAZ;AACA;AACD;AACD;;AAED,UAAIrC,SAAS,IAAT,IAAiBqC,SAArB,EACA;AACC,YAAKA,SAAL,CAAeA,SAAf,CAAyBrC,KAAzB;AACA,OAHD,MAKA;AACC,YAAKqC,SAAL,CAAeY,IAAf;AACA;AACD;;AAED,UAAKtK,UAAL,CAAgBuD,EAAhB;AACA,UAAKK,iBAAL,CAAuB1D,QAAQiL,UAA/B,EAA2C5H,EAA3C;;AAEA;AACA;AACA;AACArD,aAAQ4D,OAAR,CAAgBP,GAAGY,QAAH,EAAhB;AACA,KAvID,MAwIK,IAAI,CAAC,KAAKnB,aAAL,MAAwB,KAAKF,cAAL,EAAzB,KAAmD,KAAKd,YAAxD,IAAwE,CAACuB,GAAGS,UAAH,EAAzE,KACPT,GAAGU,QAAH,MAAiB,IAAjB,IAAyBV,GAAG6H,WAAH,IAAkB,IADpC,KAC6C,CAAC1L,MAAM2J,WADxD,EAEL;AACC,SAAIgC,SAAS3L,MAAM4L,sBAAN,CAA6B/H,EAA7B,CAAb;;AAEA,SAAI8H,UAAU,IAAV,IAAkB3L,MAAMiD,SAAN,EAAlB,IAAuCjD,MAAM+E,aAAN,CAAoBlB,GAAGC,OAAH,EAApB,CAA3C,EACA;AACC,UAAI9D,MAAMwB,QAAN,GAAiBwD,MAAjB,CAAwBnB,GAAGC,OAAH,EAAxB,CAAJ,EACA;AACC6H,gBAAStD,YAAYwD,mBAArB;AACA,OAHD,MAKA;AACCF,gBAAStD,YAAYyD,qBAArB;AACA;AACD;;AAED;AACA;AACA,SAAIH,UAAU,IAAV,IAAkB9H,GAAG6H,WAAH,IAAkB,IAAxC,EACA;AACC7H,SAAG6H,WAAH,CAAeK,SAAf,CAAyBJ,MAAzB;AACA;AACD;AACD,IApKD;;AAsKA;;;;;AAKA5L,kBAAe2B,SAAf,CAAyBrB,kBAAzB,GAA8C,YAC9C;AACC,QAAI,KAAKyC,KAAL,IAAc,IAAlB,EACA;AACC,UAAKA,KAAL,CAAW7B,MAAX,GAAoB,IAAI6G,WAAJ,CAAgBlB,KAAKK,KAAL,CAAW,KAAK5F,OAAL,CAAa2F,CAAb,GAAiB,KAAK5E,SAAtB,GAAkC,KAAKpC,KAAL,CAAWgM,KAAxD,CAAhB,EAClBpF,KAAKK,KAAL,CAAW,KAAK5F,OAAL,CAAamG,CAAb,GAAiB,KAAKnF,SAAtB,GAAkC,KAAKrC,KAAL,CAAWiM,KAAxD,CADkB,EAC8C,KAAK5K,OAAL,CAAasF,KAD3D,EACkE,KAAKtF,OAAL,CAAayF,MAD/E,CAApB;AAEA,UAAKhE,KAAL,CAAWoJ,MAAX;AACA;AACD,IARD;;AAUA;;;;;;;;;AASAnM,kBAAe2B,SAAf,CAAyBwJ,iBAAzB,GAA6C,UAASI,KAAT,EAC7C;AACC,QAAI,KAAKtB,SAAL,IAAkB,IAAtB,EACA;AACC,UAAKA,SAAL,CAAekB,iBAAf,CAAiCI,KAAjC;AACA;AACD,IAND;;AAQA;;;;;AAKAvL,kBAAe2B,SAAf,CAAyByK,OAAzB,GAAmC,UAASxL,MAAT,EAAiBkD,EAAjB,EACnC;AACC,QAAI,CAACA,GAAGS,UAAH,EAAL,EACA;AACC,SAAItE,QAAQ,KAAKA,KAAjB;;AAEA,SAAI,KAAKgE,IAAL,IAAa,IAAb,IAAqB,KAAKhD,KAAL,IAAc,IAAnC,IAA2C,KAAK8B,KAAL,IAAc,IAAzD,IACH,KAAKV,SAAL,IAAkB,IADf,IACuB,KAAKC,SAAL,IAAkB,IAD7C,EAEA;AACC,UAAI2B,OAAOH,GAAGC,OAAH,EAAX;;AAEA,UAAI,KAAKrB,aAAL,IAAsB,KAAKqI,MAAL,IAAe,IAArC,IAA6C9G,QAAQ,IAArD,IAA6DhE,MAAMwB,QAAN,GAAiB0E,QAAjB,CAA0BlC,IAA1B,CAA7D,IACHhE,MAAMmL,iBAAN,CAAwBnH,IAAxB,CADG,IAC8BhE,MAAMoM,WAAN,CAAkB,IAAlB,EAAwB,KAAKpI,IAA7B,EAAmCA,IAAnC,CADlC,EAEA;AACChE,aAAMqM,iBAAN,CAAwBC,OAAxB,CAAgC,KAAKtI,IAArC,EAA2CA,IAA3C,EAAiDH,GAAGY,QAAH,EAAjD;AACA,OAJD,MAMA;AACC,WAAI0F,QAAQnK,MAAMsF,YAAN,CAAmBzB,GAAGY,QAAH,EAAnB,KAAqCzE,MAAMuF,gBAAN,EAArC,IAAiE,KAAKnC,cAAL,EAA7E;AACA,WAAIkE,QAAQtH,MAAMkB,OAAN,GAAgBoG,KAA5B;AACA,WAAIP,KAAK,KAAKyC,WAAL,CAAiB,KAAKpH,SAAL,GAAiBkF,KAAlC,CAAT;AACA,WAAIC,KAAK,KAAKiC,WAAL,CAAiB,KAAKnH,SAAL,GAAiBiF,KAAlC,CAAT;AACA,WAAIwD,SAAS,KAAKA,MAAlB;;AAEA,WAAI9K,MAAMuM,cAAN,MAA0BvM,MAAMwM,aAAN,CAAoB1B,MAApB,EAA4B,KAAK1J,KAAjC,EAAwCyC,GAAGY,QAAH,EAAxC,CAA9B,EACA;AACCzE,cAAMyM,SAAN,CAAgB3B,MAAhB,EAAwB,KAAK1J,KAA7B,EAAoC,IAApC,EAA0C2F,EAA1C,EAA8CQ,EAA9C;AACA,QAHD,MAKA;AACC,aAAKmF,SAAL,CAAe,KAAKtL,KAApB,EAA2B2F,EAA3B,EAA+BQ,EAA/B,EAAmC4C,KAAnC,EAA0C,KAAKW,MAA/C,EAAuDjH,GAAGY,QAAH,EAAvD;AACA;AACD;AACD,MA3BD,MA4BK,IAAI,KAAKjB,eAAL,MAA0B,KAAKkB,gBAA/B,IAAmD,KAAKV,IAAL,IAAa,IAApE,EACL;AACC,WAAK2I,aAAL,CAAmB9I,EAAnB;AACA;AACD;;AAED;AACA,QAAI,KAAK8B,cAAT,EACA;AACC,UAAKzB,iBAAL,CAAuB1D,QAAQoM,QAA/B,EAAyC/I,EAAzC;AACA;;AAED,SAAKhD,KAAL;AACA,IA/CD;;AAiDA;;;;;AAKAd,kBAAe2B,SAAf,CAAyBiL,aAAzB,GAAyC,UAAS9I,EAAT,EACzC;AACC,QAAI,CAAC,KAAK7D,KAAL,CAAWiE,cAAX,CAA0B,KAAKD,IAA/B,CAAD,IAAyC,CAAC,KAAKhE,KAAL,CAAW6M,gBAAX,CAA4BC,cAA5B,CAA2CjJ,EAA3C,CAA9C,EACA;AACC,UAAK7D,KAAL,CAAW2E,kBAAX,CAA8B,KAAKX,IAAnC,EAAyCH,GAAGY,QAAH,EAAzC;AACA;AACD,IAND;;AAQA;;;;;AAKA1E,kBAAe2B,SAAf,CAAyBb,KAAzB,GAAiC,YACjC;AACC,SAAKkM,aAAL;AACA,SAAKtD,UAAL;;AAEA,SAAK9D,cAAL,GAAsB,KAAtB;AACA,SAAKjB,gBAAL,GAAwB,KAAxB;AACA,SAAKtC,SAAL,GAAiB,IAAjB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAK2K,MAAL,GAAc,IAAd;AACA,SAAKhM,KAAL,GAAa,IAAb;AACA,SAAKgD,IAAL,GAAY,IAAZ;AACA,SAAK8G,MAAL,GAAc,IAAd;AACA,IAbD;;AAeA;;;;;;AAMA/K,kBAAe2B,SAAf,CAAyBuL,2BAAzB,GAAuD,UAASnH,MAAT,EAAiB1E,KAAjB,EAAwBR,GAAxB,EACvD;AACC,QAAI,KAAKZ,KAAL,CAAWwB,QAAX,GAAsB0E,QAAtB,CAA+BJ,MAA/B,CAAJ,EACA;AACC,SAAIoH,SAAS,KAAKlN,KAAL,CAAWkB,OAAX,GAAqBqD,QAArB,CAA8BuB,MAA9B,CAAb;;AAEA,SAAIoH,UAAU,IAAd,EACA;AACC,UAAIC,KAAKhN,QAAQ4I,YAAR,CAAqB,KAAK/I,KAAL,CAAWwI,SAAhC,EACRhI,QAAQ4M,UAAR,CAAmBxM,GAAnB,CADQ,EACiBJ,QAAQ6M,UAAR,CAAmBzM,GAAnB,CADjB,CAAT;AAEA,UAAI0M,QAAQnN,QAAQoN,SAAR,CAAkBpN,QAAQqN,QAAR,CAAiBN,OAAOO,KAAxB,EAA+BpF,YAAYqF,cAA3C,KAA8D,CAAhF,CAAZ;;AAEA,UAAIJ,SAAS,CAAb,EACA;AACC,WAAIK,MAAM/G,KAAK+G,GAAL,CAAS,CAACL,KAAV,CAAV;AACA,WAAIM,MAAMhH,KAAKgH,GAAL,CAAS,CAACN,KAAV,CAAV;AACA,WAAIO,KAAK,IAAItE,OAAJ,CAAY2D,OAAOY,UAAP,EAAZ,EAAiCZ,OAAOa,UAAP,EAAjC,CAAT;AACAZ,YAAKhN,QAAQ6N,eAAR,CAAwBb,EAAxB,EAA4BQ,GAA5B,EAAiCC,GAAjC,EAAsCC,EAAtC,CAAL;AACA;;AAED,aAAO,CAAC1N,QAAQ8N,QAAR,CAAiBf,MAAjB,EAAyBC,GAAGnG,CAA5B,EAA+BmG,GAAG3F,CAAlC,CAAR;AACA;AACD;;AAED,WAAO,KAAP;AACA,IAzBD;;AA2BA;;;;;AAKAzH,kBAAe2B,SAAf,CAAyBgL,SAAzB,GAAqC,UAAStL,KAAT,EAAgB2F,EAAhB,EAAoBQ,EAApB,EAAwB4C,KAAxB,EAA+BW,MAA/B,EAAuClK,GAAvC,EACrC;AACC,QAAIuJ,KAAJ,EACA;AACC/I,aAAQ,KAAKpB,KAAL,CAAWkO,iBAAX,CAA6B9M,KAA7B,CAAR;AACA;;AAED;AACA,QAAI0J,UAAU,IAAV,IAAkB,KAAKpH,uBAAL,EAAlB,IACH,KAAKuJ,2BAAL,CAAiC,KAAKjN,KAAL,CAAWwB,QAAX,GAAsByJ,SAAtB,CAAgC,KAAKjH,IAArC,CAAjC,EAA6E5C,KAA7E,EAAoFR,GAApF,CADD,EAEA;AACCkK,cAAS,KAAK9K,KAAL,CAAW+F,gBAAX,EAAT;AACA;;AAED;AACAoE,YAAQA,SAAS,CAAC,KAAKnK,KAAL,CAAWmO,YAAX,CAAwBrD,UAAU,KAAK9K,KAAL,CAAW+F,gBAAX,EAAlC,CAAlB;;AAEA;AACA;AACA3E,YAAQ,KAAKpB,KAAL,CAAW0M,SAAX,CAAqBtL,KAArB,EAA4B2F,KAAK,KAAK/G,KAAL,CAAWgM,KAAX,GAAmB,KAAKhM,KAAL,CAAWiG,IAAX,CAAgBqB,KAApE,EACNC,KAAK,KAAKvH,KAAL,CAAWiM,KAAX,GAAmB,KAAKjM,KAAL,CAAWiG,IAAX,CAAgBqB,KADlC,EACyC6C,KADzC,EACgDW,MADhD,EACwDlK,GADxD,CAAR;;AAGA,QAAI,KAAK4C,eAAL,MAA0B,KAAKd,YAAnC,EACA;AACC,UAAK1C,KAAL,CAAWoO,mBAAX,CAA+BhN,MAAM,CAAN,CAA/B;AACA;;AAED;AACA,QAAI+I,KAAJ,EACA;AACC,UAAKnK,KAAL,CAAWqO,iBAAX,CAA6BjN,KAA7B;AACA;AACD,IAhCD;;AAkCA;;;;;AAKArB,kBAAe2B,SAAf,CAAyBqL,aAAzB,GAAyC,YACzC;AACC;AACA,QAAI,KAAKjK,KAAL,IAAc,IAAlB,EACA;AACC,UAAKA,KAAL,CAAWwL,OAAX;AACA,UAAKxL,KAAL,GAAa,IAAb;AACA;;AAED,QAAI,KAAKX,KAAL,IAAc,IAAlB,EACA;AACC,UAAKA,KAAL,CAAWmM,OAAX;AACA,UAAKnM,KAAL,GAAa,IAAb;AACA;;AAED;AACA,QAAI,KAAK6H,SAAL,IAAkB,IAAtB,EACA;AACC,UAAKA,SAAL,CAAesE,OAAf;AACA,UAAKtE,SAAL,GAAiB,IAAjB;AACA;AACD,IArBD;;AAuBA;;;;;AAKAjK,kBAAe2B,SAAf,CAAyB4M,OAAzB,GAAmC,YACnC;AACC,SAAKtO,KAAL,CAAWuO,mBAAX,CAA+B,IAA/B;AACA,SAAKvO,KAAL,CAAWwO,cAAX,CAA0B,KAAKtO,UAA/B;;AAEA,QAAI,KAAKQ,aAAL,IAAsB,IAA1B,EACA;AACC,UAAKV,KAAL,CAAWwO,cAAX,CAA0B,KAAK9N,aAA/B;AACA,UAAKA,aAAL,GAAqB,IAArB;AACA;;AAED,QAAI,KAAKK,cAAL,IAAuB,IAA3B,EACA;AACC,UAAKf,KAAL,CAAWwB,QAAX,GAAsBgN,cAAtB,CAAqC,KAAKzN,cAA1C;AACA,UAAKA,cAAL,GAAsB,IAAtB;AACA;;AAED,SAAKgM,aAAL;AACA,SAAKtD,UAAL;AACA,IAnBD;;AAqBAgF,cAAW1O,cAAX,GAA4B,OAAOA,cAAP,KAA0B,WAA1B,GAAwCA,cAAxC,GAAyD2O,SAArF","file":"mxGraphHandler.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHandler\n * \n * Graph event handler that handles selection. Individual cells are handled\n * separately using <mxVertexHandler> or one of the edge handlers. These\n * handlers are created using <mxGraph.createHandler> in\n * <mxGraphSelectionModel.cellAdded>.\n * \n * To avoid the container to scroll a moved cell into view, set\n * <scrollAfterMove> to false.\n * \n * Constructor: mxGraphHandler\n * \n * Constructs an event handler that creates handles for the\n * selection cells.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphHandler(graph)\n{\n\tthis.graph = graph;\n\tthis.graph.addMouseListener(this);\n\t\n\t// Repaints the handler after autoscroll\n\tthis.panHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.updatePreviewShape();\n\t\tthis.updateHint();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.PAN, this.panHandler);\n\t\n\t// Handles escape keystrokes\n\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tthis.reset();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t\n\t// Updates the preview box for remote changes\n\tthis.refreshHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.first != null)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tthis.bounds = this.graph.getView().getBounds(this.cells);\n\t\t\t\tthis.pBounds = this.getPreviewBounds(this.cells);\n\t\t\t\tthis.updatePreviewShape();\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// Resets the handler if cells have vanished\n\t\t\t\tthis.reset();\n\t\t\t}\n\t\t}\n\t});\n\t\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphHandler.prototype.graph = null;\n\n/**\n * Variable: maxCells\n * \n * Defines the maximum number of cells to paint subhandles\n * for. Default is 50 for Firefox and 20 for IE. Set this\n * to 0 if you want an unlimited number of handles to be\n * displayed. This is only recommended if the number of\n * cells in the graph is limited to a small number, eg.\n * 500.\n */\nmxGraphHandler.prototype.maxCells = (mxClient.IS_IE) ? 20 : 50;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxGraphHandler.prototype.enabled = true;\n\n/**\n * Variable: highlightEnabled\n * \n * Specifies if drop targets under the mouse should be enabled. Default is\n * true.\n */\nmxGraphHandler.prototype.highlightEnabled = true;\n\n/**\n * Variable: cloneEnabled\n * \n * Specifies if cloning by control-drag is enabled. Default is true.\n */\nmxGraphHandler.prototype.cloneEnabled = true;\n\n/**\n * Variable: moveEnabled\n * \n * Specifies if moving is enabled. Default is true.\n */\nmxGraphHandler.prototype.moveEnabled = true;\n\n/**\n * Variable: guidesEnabled\n * \n * Specifies if other cells should be used for snapping the right, center or\n * left side of the current selection. Default is false.\n */\nmxGraphHandler.prototype.guidesEnabled = false;\n\n/**\n * Variable: guide\n * \n * Holds the <mxGuide> instance that is used for alignment.\n */\nmxGraphHandler.prototype.guide = null;\n\n/**\n * Variable: currentDx\n * \n * Stores the x-coordinate of the current mouse move.\n */\nmxGraphHandler.prototype.currentDx = null;\n\n/**\n * Variable: currentDy\n * \n * Stores the y-coordinate of the current mouse move.\n */\nmxGraphHandler.prototype.currentDy = null;\n\n/**\n * Variable: updateCursor\n * \n * Specifies if a move cursor should be shown if the mouse is over a movable\n * cell. Default is true.\n */\nmxGraphHandler.prototype.updateCursor = true;\n\n/**\n * Variable: selectEnabled\n * \n * Specifies if selecting is enabled. Default is true.\n */\nmxGraphHandler.prototype.selectEnabled = true;\n\n/**\n * Variable: removeCellsFromParent\n * \n * Specifies if cells may be moved out of their parents. Default is true.\n */\nmxGraphHandler.prototype.removeCellsFromParent = true;\n\n/**\n * Variable: connectOnDrop\n * \n * Specifies if drop events are interpreted as new connections if no other\n * drop action is defined. Default is false.\n */\nmxGraphHandler.prototype.connectOnDrop = false;\n\n/**\n * Variable: scrollOnMove\n * \n * Specifies if the view should be scrolled so that a moved cell is\n * visible. Default is true.\n */\nmxGraphHandler.prototype.scrollOnMove = true;\n\n/**\n * Variable: minimumSize\n * \n * Specifies the minimum number of pixels for the width and height of a\n * selection border. Default is 6.\n */\nmxGraphHandler.prototype.minimumSize = 6;\n\n/**\n * Variable: previewColor\n * \n * Specifies the color of the preview shape. Default is black.\n */\nmxGraphHandler.prototype.previewColor = 'black';\n\n/**\n * Variable: htmlPreview\n * \n * Specifies if the graph container should be used for preview. If this is used\n * then drop target detection relies entirely on <mxGraph.getCellAt> because\n * the HTML preview does not \"let events through\". Default is false.\n */\nmxGraphHandler.prototype.htmlPreview = false;\n\n/**\n * Variable: shape\n * \n * Reference to the <mxShape> that represents the preview.\n */\nmxGraphHandler.prototype.shape = null;\n\n/**\n * Variable: scaleGrid\n * \n * Specifies if the grid should be scaled. Default is false.\n */\nmxGraphHandler.prototype.scaleGrid = false;\n\n/**\n * Variable: rotationEnabled\n * \n * Specifies if the bounding box should allow for rotation. Default is true.\n */\nmxGraphHandler.prototype.rotationEnabled = true;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxGraphHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxGraphHandler.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isCloneEnabled\n * \n * Returns <cloneEnabled>.\n */\nmxGraphHandler.prototype.isCloneEnabled = function()\n{\n\treturn this.cloneEnabled;\n};\n\n/**\n * Function: setCloneEnabled\n * \n * Sets <cloneEnabled>.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new clone enabled state.\n */\nmxGraphHandler.prototype.setCloneEnabled = function(value)\n{\n\tthis.cloneEnabled = value;\n};\n\n/**\n * Function: isMoveEnabled\n * \n * Returns <moveEnabled>.\n */\nmxGraphHandler.prototype.isMoveEnabled = function()\n{\n\treturn this.moveEnabled;\n};\n\n/**\n * Function: setMoveEnabled\n * \n * Sets <moveEnabled>.\n */\nmxGraphHandler.prototype.setMoveEnabled = function(value)\n{\n\tthis.moveEnabled = value;\n};\n\n/**\n * Function: isSelectEnabled\n * \n * Returns <selectEnabled>.\n */\nmxGraphHandler.prototype.isSelectEnabled = function()\n{\n\treturn this.selectEnabled;\n};\n\n/**\n * Function: setSelectEnabled\n * \n * Sets <selectEnabled>.\n */\nmxGraphHandler.prototype.setSelectEnabled = function(value)\n{\n\tthis.selectEnabled = value;\n};\n\n/**\n * Function: isRemoveCellsFromParent\n * \n * Returns <removeCellsFromParent>.\n */\nmxGraphHandler.prototype.isRemoveCellsFromParent = function()\n{\n\treturn this.removeCellsFromParent;\n};\n\n/**\n * Function: setRemoveCellsFromParent\n * \n * Sets <removeCellsFromParent>.\n */\nmxGraphHandler.prototype.setRemoveCellsFromParent = function(value)\n{\n\tthis.removeCellsFromParent = value;\n};\n\n/**\n * Function: getInitialCellForEvent\n * \n * Hook to return initial cell for the given event.\n */\nmxGraphHandler.prototype.getInitialCellForEvent = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: isDelayedSelection\n * \n * Hook to return true for delayed selections.\n */\nmxGraphHandler.prototype.isDelayedSelection = function(cell, me)\n{\n\treturn this.graph.isCellSelected(cell);\n};\n\n/**\n * Function: consumeMouseEvent\n * \n * Consumes the given mouse event. NOTE: This may be used to enable click\n * events for links in labels on iOS as follows as consuming the initial\n * touchStart disables firing the subsequent click evnent on the link.\n * \n * <code>\n * mxGraphHandler.prototype.consumeMouseEvent = function(evtName, me)\n * {\n *   var source = mxEvent.getSource(me.getEvent());\n *   \n *   if (!mxEvent.isTouchEvent(me.getEvent()) || source.nodeName != 'A')\n *   {\n *     me.consume();\n *   }\n * }\n * </code>\n */\nmxGraphHandler.prototype.consumeMouseEvent = function(evtName, me)\n{\n\tme.consume();\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by selecing the given cell and creating a handle for\n * it. By consuming the event all subsequent events of the gesture are\n * redirected to this handler.\n */\nmxGraphHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&\n\t\tme.getState() != null && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\tvar cell = this.getInitialCellForEvent(me);\n\t\tthis.delayedSelection = this.isDelayedSelection(cell, me);\n\t\tthis.cell = null;\n\t\t\n\t\tif (this.isSelectEnabled() && !this.delayedSelection)\n\t\t{\n\t\t\tthis.graph.selectCellForEvent(cell, me.getEvent());\n\t\t}\n\n\t\tif (this.isMoveEnabled())\n\t\t{\n\t\t\tvar model = this.graph.model;\n\t\t\tvar geo = model.getGeometry(cell);\n\n\t\t\tif (this.graph.isCellMovable(cell) && ((!model.isEdge(cell) || this.graph.getSelectionCount() > 1 ||\n\t\t\t\t(geo.points != null && geo.points.length > 0) || model.getTerminal(cell, true) == null ||\n\t\t\t\tmodel.getTerminal(cell, false) == null) || this.graph.allowDanglingEdges || \n\t\t\t\t(this.graph.isCloneEvent(me.getEvent()) && this.graph.isCellsCloneable())))\n\t\t\t{\n\t\t\t\tthis.start(cell, me.getX(), me.getY());\n\t\t\t}\n\t\t\telse if (this.delayedSelection)\n\t\t\t{\n\t\t\t\tthis.cell = cell;\n\t\t\t}\n\n\t\t\tthis.cellWasClicked = true;\n\t\t\tthis.consumeMouseEvent(mxEvent.MOUSE_DOWN, me);\n\t\t}\n\t}\n};\n\n/**\n * Function: getGuideStates\n * \n * Creates an array of cell states which should be used as guides.\n */\nmxGraphHandler.prototype.getGuideStates = function()\n{\n\tvar parent = this.graph.getDefaultParent();\n\tvar model = this.graph.getModel();\n\t\n\tvar filter = mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.graph.view.getState(cell) != null &&\n\t\t\tmodel.isVertex(cell) &&\n\t\t\tmodel.getGeometry(cell) != null &&\n\t\t\t!model.getGeometry(cell).relative;\n\t});\n\t\n\treturn this.graph.view.getCellStates(model.filterDescendants(filter, parent));\n};\n\n/**\n * Function: getCells\n * \n * Returns the cells to be modified by this handler. This implementation\n * returns all selection cells that are movable, or the given initial cell if\n * the given cell is not selected and movable. This handles the case of moving\n * unselectable or unselected cells.\n * \n * Parameters:\n * \n * initialCell - <mxCell> that triggered this handler.\n */\nmxGraphHandler.prototype.getCells = function(initialCell)\n{\n\tif (!this.delayedSelection && this.graph.isCellMovable(initialCell))\n\t{\n\t\treturn [initialCell];\n\t}\n\telse\n\t{\n\t\treturn this.graph.getMovableCells(this.graph.getSelectionCells());\n\t}\n};\n\n/**\n * Function: getPreviewBounds\n * \n * Returns the <mxRectangle> used as the preview bounds for\n * moving the given cells.\n */\nmxGraphHandler.prototype.getPreviewBounds = function(cells)\n{\n\tvar bounds = this.getBoundingBox(cells);\n\t\n\tif (bounds != null)\n\t{\n\t\t// Corrects width and height\n\t\tbounds.width = Math.max(0, bounds.width - 1);\n\t\tbounds.height = Math.max(0, bounds.height - 1);\n\t\t\n\t\tif (bounds.width < this.minimumSize)\n\t\t{\n\t\t\tvar dx = this.minimumSize - bounds.width;\n\t\t\tbounds.x -= dx / 2;\n\t\t\tbounds.width = this.minimumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds.x = Math.round(bounds.x);\n\t\t\tbounds.width = Math.ceil(bounds.width);\n\t\t}\n\t\t\n\t\tvar tr = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\t\n\t\tif (bounds.height < this.minimumSize)\n\t\t{\n\t\t\tvar dy = this.minimumSize - bounds.height;\n\t\t\tbounds.y -= dy / 2;\n\t\t\tbounds.height = this.minimumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds.y = Math.round(bounds.y);\n\t\t\tbounds.height = Math.ceil(bounds.height);\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the union of the <mxCellStates> for the given array of <mxCells>.\n * For vertices, this method uses the bounding box of the corresponding shape\n * if one exists. The bounding box of the corresponding text label and all\n * controls and overlays are ignored. See also: <mxGraphView.getBounds> and\n * <mxGraph.getBoundingBox>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounding box should be returned.\n */\nmxGraphHandler.prototype.getBoundingBox = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (model.isVertex(cells[i]) || model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar state = this.graph.view.getState(cells[i]);\n\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = state;\n\t\t\t\t\t\n\t\t\t\t\tif (model.isVertex(cells[i]) && state.shape != null && state.shape.boundingBox != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox = state.shape.boundingBox;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createPreviewShape\n * \n * Creates the shape used to draw the preview for the given bounds.\n */\nmxGraphHandler.prototype.createPreviewShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(bounds, null, this.previewColor);\n\tshape.isDashed = true;\n\t\n\tif (this.htmlPreview)\n\t{\n\t\tshape.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tshape.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t// event-transparency on the background area of the rectangle since\n\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\tshape.init(this.graph.getView().getOverlayPane());\n\t\tshape.pointerEvents = false;\n\t\t\n\t\t// Workaround for artifacts on iOS\n\t\tif (mxClient.IS_IOS)\n\t\t{\n\t\t\tshape.getSvgScreenOffset = function()\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t};\n\t\t}\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxGraphHandler.prototype.start = function(cell, x, y)\n{\n\tthis.cell = cell;\n\tthis.first = mxUtils.convertPoint(this.graph.container, x, y);\n\tthis.cells = this.getCells(this.cell);\n\tthis.bounds = this.graph.getView().getBounds(this.cells);\n\tthis.pBounds = this.getPreviewBounds(this.cells);\n\n\tif (this.guidesEnabled)\n\t{\n\t\tthis.guide = new mxGuide(this.graph, this.getGuideStates());\n\t}\n};\n\n/**\n * Function: useGuidesForEvent\n * \n * Returns true if the guides should be used for the given <mxMouseEvent>.\n * This implementation returns <mxGuide.isEnabledForEvent>.\n */\nmxGraphHandler.prototype.useGuidesForEvent = function(me)\n{\n\treturn (this.guide != null) ? this.guide.isEnabledForEvent(me.getEvent()) : true;\n};\n\n\n/**\n * Function: snap\n * \n * Snaps the given vector to the grid and returns the given mxPoint instance.\n */\nmxGraphHandler.prototype.snap = function(vector)\n{\n\tvar scale = (this.scaleGrid) ? this.graph.view.scale : 1;\n\t\n\tvector.x = this.graph.snap(vector.x / scale) * scale;\n\tvector.y = this.graph.snap(vector.y / scale) * scale;\n\t\n\treturn vector;\n};\n\n/**\n * Function: getDelta\n * \n * Returns an <mxPoint> that represents the vector for moving the cells\n * for the given <mxMouseEvent>.\n */\nmxGraphHandler.prototype.getDelta = function(me)\n{\n\tvar point = mxUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n\tvar s = this.graph.view.scale;\n\t\n\treturn new mxPoint(this.roundLength((point.x - this.first.x) / s) * s,\n\t\tthis.roundLength((point.y - this.first.y) / s) * s);\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxGraphHandler.prototype.updateHint = function(me) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxGraphHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled vector. This uses Math.round.\n */\nmxGraphHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length * 2) / 2;\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by highlighting possible drop targets and updating the\n * preview.\n */\nmxGraphHandler.prototype.mouseMove = function(sender, me)\n{\n\tvar graph = this.graph;\n\n\tif (!me.isConsumed() && graph.isMouseDown && this.cell != null &&\n\t\tthis.first != null && this.bounds != null)\n\t{\n\t\t// Stops moving if a multi touch event is received\n\t\tif (mxEvent.isMultiTouchEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.reset();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar delta = this.getDelta(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\tvar tol = graph.tolerance;\n\n\t\tif (this.shape != null || Math.abs(dx) > tol || Math.abs(dy) > tol)\n\t\t{\n\t\t\t// Highlight is used for highlighting drop targets\n\t\t\tif (this.highlight == null)\n\t\t\t{\n\t\t\t\tthis.highlight = new mxCellHighlight(this.graph,\n\t\t\t\t\tmxConstants.DROP_TARGET_COLOR, 3);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.shape == null)\n\t\t\t{\n\t\t\t\tthis.shape = this.createPreviewShape(this.bounds);\n\t\t\t}\n\t\t\t\n\t\t\tvar clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();\n\t\t\tvar gridEnabled = graph.isGridEnabledEvent(me.getEvent());\n\t\t\tvar hideGuide = true;\n\t\t\t\n\t\t\tif (this.guide != null && this.useGuidesForEvent(me))\n\t\t\t{\n\t\t\t\tdelta = this.guide.move(this.bounds, new mxPoint(dx, dy), gridEnabled, clone);\n\t\t\t\thideGuide = false;\n\t\t\t\tdx = delta.x;\n\t\t\t\tdy = delta.y;\n\t\t\t}\n\t\t\telse if (gridEnabled)\n\t\t\t{\n\t\t\t\tvar trx = graph.getView().translate;\n\t\t\t\tvar scale = graph.getView().scale;\t\t\t\t\n\t\t\t\t\n\t\t\t\tvar tx = this.bounds.x - (graph.snap(this.bounds.x / scale - trx.x) + trx.x) * scale;\n\t\t\t\tvar ty = this.bounds.y - (graph.snap(this.bounds.y / scale - trx.y) + trx.y) * scale;\n\t\t\t\tvar v = this.snap(new mxPoint(dx, dy));\n\t\t\t\n\t\t\t\tdx = v.x - tx;\n\t\t\t\tdy = v.y - ty;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.guide != null && hideGuide)\n\t\t\t{\n\t\t\t\tthis.guide.hide();\n\t\t\t}\n\n\t\t\t// Constrained movement if shift key is pressed\n\t\t\tif (graph.isConstrainedEvent(me.getEvent()))\n\t\t\t{\n\t\t\t\tif (Math.abs(dx) > Math.abs(dy))\n\t\t\t\t{\n\t\t\t\t\tdy = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdx = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.currentDx = dx;\n\t\t\tthis.currentDy = dy;\n\t\t\tthis.updatePreviewShape();\n\n\t\t\tvar target = null;\n\t\t\tvar cell = me.getCell();\n\n\t\t\tif (graph.isDropEnabled() && this.highlightEnabled)\n\t\t\t{\n\t\t\t\t// Contains a call to getCellAt to find the cell under the mouse\n\t\t\t\ttarget = graph.getDropTarget(this.cells, me.getEvent(), cell, clone);\n\t\t\t}\n\n\t\t\tvar state = graph.getView().getState(target);\n\t\t\tvar highlight = false;\n\t\t\t\n\t\t\tif (state != null && (graph.model.getParent(this.cell) != target || clone))\n\t\t\t{\n\t\t\t    if (this.target != target)\n\t\t\t    {\n\t\t\t\t    this.target = target;\n\t\t\t\t    this.setHighlightColor(mxConstants.DROP_TARGET_COLOR);\n\t\t\t\t}\n\t\t\t    \n\t\t\t    highlight = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.target = null;\n\n\t\t\t\tif (this.connectOnDrop && cell != null && this.cells.length == 1 &&\n\t\t\t\t\tgraph.getModel().isVertex(cell) && graph.isCellConnectable(cell))\n\t\t\t\t{\n\t\t\t\t\tstate = graph.getView().getState(cell);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar error = graph.getEdgeValidationError(null, this.cell, cell);\n\t\t\t\t\t\tvar color = (error == null) ?\n\t\t\t\t\t\t\tmxConstants.VALID_COLOR :\n\t\t\t\t\t\t\tmxConstants.INVALID_CONNECT_TARGET_COLOR;\n\t\t\t\t\t\tthis.setHighlightColor(color);\n\t\t\t\t\t\thighlight = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (state != null && highlight)\n\t\t\t{\n\t\t\t\tthis.highlight.highlight(state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.highlight.hide();\n\t\t\t}\n\t\t}\n\n\t\tthis.updateHint(me);\n\t\tthis.consumeMouseEvent(mxEvent.MOUSE_MOVE, me);\n\t\t\n\t\t// Cancels the bubbling of events to the container so\n\t\t// that the droptarget is not reset due to an mouseMove\n\t\t// fired on the container with no associated state.\n\t\tmxEvent.consume(me.getEvent());\n\t}\n\telse if ((this.isMoveEnabled() || this.isCloneEnabled()) && this.updateCursor && !me.isConsumed() &&\n\t\t(me.getState() != null || me.sourceState != null) && !graph.isMouseDown)\n\t{\n\t\tvar cursor = graph.getCursorForMouseEvent(me);\n\t\t\n\t\tif (cursor == null && graph.isEnabled() && graph.isCellMovable(me.getCell()))\n\t\t{\n\t\t\tif (graph.getModel().isEdge(me.getCell()))\n\t\t\t{\n\t\t\t\tcursor = mxConstants.CURSOR_MOVABLE_EDGE;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcursor = mxConstants.CURSOR_MOVABLE_VERTEX;\n\t\t\t}\n\t\t}\n\n\t\t// Sets the cursor on the original source state under the mouse\n\t\t// instead of the event source state which can be the parent\n\t\tif (cursor != null && me.sourceState != null)\n\t\t{\n\t\t\tme.sourceState.setCursor(cursor);\n\t\t}\n\t}\n};\n\n/**\n * Function: updatePreviewShape\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updatePreviewShape = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.bounds = new mxRectangle(Math.round(this.pBounds.x + this.currentDx - this.graph.panDx),\n\t\t\t\tMath.round(this.pBounds.y + this.currentDy - this.graph.panDy), this.pBounds.width, this.pBounds.height);\n\t\tthis.shape.redraw();\n\t}\n};\n\n/**\n * Function: setHighlightColor\n * \n * Sets the color of the rectangle used to highlight drop targets.\n * \n * Parameters:\n * \n * color - String that represents the new highlight color.\n */\nmxGraphHandler.prototype.setHighlightColor = function(color)\n{\n\tif (this.highlight != null)\n\t{\n\t\tthis.highlight.setHighlightColor(color);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the changes to the selection cells.\n */\nmxGraphHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (!me.isConsumed())\n\t{\n\t\tvar graph = this.graph;\n\t\t\n\t\tif (this.cell != null && this.first != null && this.shape != null &&\n\t\t\tthis.currentDx != null && this.currentDy != null)\n\t\t{\n\t\t\tvar cell = me.getCell();\n\t\t\t\n\t\t\tif (this.connectOnDrop && this.target == null && cell != null && graph.getModel().isVertex(cell) &&\n\t\t\t\tgraph.isCellConnectable(cell) && graph.isEdgeValid(null, this.cell, cell))\n\t\t\t{\n\t\t\t\tgraph.connectionHandler.connect(this.cell, cell, me.getEvent());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();\n\t\t\t\tvar scale = graph.getView().scale;\n\t\t\t\tvar dx = this.roundLength(this.currentDx / scale);\n\t\t\t\tvar dy = this.roundLength(this.currentDy / scale);\n\t\t\t\tvar target = this.target;\n\t\t\t\t\n\t\t\t\tif (graph.isSplitEnabled() && graph.isSplitTarget(target, this.cells, me.getEvent()))\n\t\t\t\t{\n\t\t\t\t\tgraph.splitEdge(target, this.cells, null, dx, dy);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.moveCells(this.cells, dx, dy, clone, this.target, me.getEvent());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.isSelectEnabled() && this.delayedSelection && this.cell != null)\n\t\t{\n\t\t\tthis.selectDelayed(me);\n\t\t}\n\t}\n\n\t// Consumes the event if a cell was initially clicked\n\tif (this.cellWasClicked)\n\t{\n\t\tthis.consumeMouseEvent(mxEvent.MOUSE_UP, me);\n\t}\n\n\tthis.reset();\n};\n\n/**\n * Function: selectDelayed\n * \n * Implements the delayed selection for the given mouse event.\n */\nmxGraphHandler.prototype.selectDelayed = function(me)\n{\n\tif (!this.graph.isCellSelected(this.cell) || !this.graph.popupMenuHandler.isPopupTrigger(me))\n\t{\n\t\tthis.graph.selectCellForEvent(this.cell, me.getEvent());\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxGraphHandler.prototype.reset = function()\n{\n\tthis.destroyShapes();\n\tthis.removeHint();\n\t\n\tthis.cellWasClicked = false;\n\tthis.delayedSelection = false;\n\tthis.currentDx = null;\n\tthis.currentDy = null;\n\tthis.guides = null;\n\tthis.first = null;\n\tthis.cell = null;\n\tthis.target = null;\n};\n\n/**\n * Function: shouldRemoveCellsFromParent\n * \n * Returns true if the given cells should be removed from the parent for the specified\n * mousereleased event.\n */\nmxGraphHandler.prototype.shouldRemoveCellsFromParent = function(parent, cells, evt)\n{\n\tif (this.graph.getModel().isVertex(parent))\n\t{\n\t\tvar pState = this.graph.getView().getState(parent);\n\t\t\n\t\tif (pState != null)\n\t\t{\n\t\t\tvar pt = mxUtils.convertPoint(this.graph.container,\n\t\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(pState.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(pState.getCenterX(), pState.getCenterY());\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, cx);\n\t\t\t}\n\t\t\n\t\t\treturn !mxUtils.contains(pState, pt.x, pt.y);\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: moveCells\n * \n * Moves the given cells by the specified amount.\n */\nmxGraphHandler.prototype.moveCells = function(cells, dx, dy, clone, target, evt)\n{\n\tif (clone)\n\t{\n\t\tcells = this.graph.getCloneableCells(cells);\n\t}\n\t\n\t// Removes cells from parent\n\tif (target == null && this.isRemoveCellsFromParent() &&\n\t\tthis.shouldRemoveCellsFromParent(this.graph.getModel().getParent(this.cell), cells, evt))\n\t{\n\t\ttarget = this.graph.getDefaultParent();\n\t}\n\t\n\t// Cloning into locked cells is not allowed\n\tclone = clone && !this.graph.isCellLocked(target || this.graph.getDefaultParent());\n\t\n\t// Passes all selected cells in order to correctly clone or move into\n\t// the target cell. The method checks for each cell if its movable.\n\tcells = this.graph.moveCells(cells, dx - this.graph.panDx / this.graph.view.scale,\n\t\t\tdy - this.graph.panDy / this.graph.view.scale, clone, target, evt);\n\t\n\tif (this.isSelectEnabled() && this.scrollOnMove)\n\t{\n\t\tthis.graph.scrollCellToVisible(cells[0]);\n\t}\n\t\t\t\n\t// Selects the new cells if cells have been cloned\n\tif (clone)\n\t{\n\t\tthis.graph.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Function: destroyShapes\n * \n * Destroy the preview and highlight shapes.\n */\nmxGraphHandler.prototype.destroyShapes = function()\n{\n\t// Destroys the preview dashed rectangle\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.guide != null)\n\t{\n\t\tthis.guide.destroy();\n\t\tthis.guide = null;\n\t}\n\t\n\t// Destroys the drop target highlight\n\tif (this.highlight != null)\n\t{\n\t\tthis.highlight.destroy();\n\t\tthis.highlight = null;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxGraphHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.panHandler);\n\t\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.refreshHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.refreshHandler);\n\t\tthis.refreshHandler = null;\n\t}\n\t\n\tthis.destroyShapes();\n\tthis.removeHint();\n};\n\n__mxOutput.mxGraphHandler = typeof mxGraphHandler !== 'undefined' ? mxGraphHandler : undefined;\n"]}