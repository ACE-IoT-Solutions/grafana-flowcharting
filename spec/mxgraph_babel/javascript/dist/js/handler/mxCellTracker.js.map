{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/handler/mxCellTracker.js"],"names":["mxCellTracker","graph","color","funct","mxCellMarker","call","addMouseListener","getCell","mxClient","IS_IE","mxEvent","addListener","window","mxUtils","bind","destroy","extend","prototype","mouseDown","sender","me","mouseMove","isEnabled","process","mouseUp","destroyed","removeMouseListener","apply","__mxOutput","undefined"],"mappings":";;;;;AAAA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA,WAASA,aAAT,CAAuBC,KAAvB,EAA8BC,KAA9B,EAAqCC,KAArC,EACA;AACCC,iBAAaC,IAAb,CAAkB,IAAlB,EAAwBJ,KAAxB,EAA+BC,KAA/B;;AAEA,SAAKD,KAAL,CAAWK,gBAAX,CAA4B,IAA5B;;AAEA,QAAIH,SAAS,IAAb,EACA;AACC,WAAKI,OAAL,GAAeJ,KAAf;AACA;;AAED;AACA,QAAIK,SAASC,KAAb,EACA;AACCC,cAAQC,WAAR,CAAoBC,MAApB,EAA4B,QAA5B,EAAsCC,QAAQC,IAAR,CAAa,IAAb,EAAmB,YACzD;AACC,aAAKC,OAAL;AACA,OAHqC,CAAtC;AAIA;AACD,G;;;AAAA;;AAED;;;AAGAF,cAAQG,MAAR,CAAehB,aAAf,EAA8BI,YAA9B;;AAEA;;;;;AAKAJ,oBAAciB,SAAd,CAAwBC,SAAxB,GAAoC,UAASC,MAAT,EAAiBC,EAAjB,EAAqB,CAAG,CAA5D;;AAEA;;;;;;AAMApB,oBAAciB,SAAd,CAAwBI,SAAxB,GAAoC,UAASF,MAAT,EAAiBC,EAAjB,EACpC;AACC,YAAI,KAAKE,SAAL,EAAJ,EACA;AACC,eAAKC,OAAL,CAAaH,EAAb;AACA;AACD,OAND;;AAQA;;;;;AAKApB,oBAAciB,SAAd,CAAwBO,OAAxB,GAAkC,UAASL,MAAT,EAAiBC,EAAjB,EAAqB,CAAG,CAA1D;;AAEA;;;;;;;AAOApB,oBAAciB,SAAd,CAAwBF,OAAxB,GAAkC,YAClC;AACC,YAAI,CAAC,KAAKU,SAAV,EACA;AACC,eAAKA,SAAL,GAAiB,IAAjB;;AAEA,eAAKxB,KAAL,CAAWyB,mBAAX,CAA+B,IAA/B;AACAtB,uBAAaa,SAAb,CAAuBF,OAAvB,CAA+BY,KAA/B,CAAqC,IAArC;AACA;AACD,OATD;;AAWAC,iBAAW5B,aAAX,GAA2B,OAAOA,aAAP,KAAyB,WAAzB,GAAuCA,aAAvC,GAAuD6B,SAAlF","file":"mxCellTracker.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellTracker\n * \n * Event handler that highlights cells. Inherits from <mxCellMarker>.\n * \n * Example:\n * \n * (code)\n * new mxCellTracker(graph, '#00FF00');\n * (end)\n * \n * For detecting dragEnter, dragOver and dragLeave on cells, the following\n * code can be used:\n * \n * (code)\n * graph.addMouseListener(\n * {\n *   cell: null,\n *   mouseDown: function(sender, me) { },\n *   mouseMove: function(sender, me)\n *   {\n *     var tmp = me.getCell();\n *     \n *     if (tmp != this.cell)\n *     {\n *       if (this.cell != null)\n *       {\n *         this.dragLeave(me.getEvent(), this.cell);\n *       }\n *       \n *       this.cell = tmp;\n *       \n *       if (this.cell != null)\n *       {\n *         this.dragEnter(me.getEvent(), this.cell);\n *       }\n *     }\n *     \n *     if (this.cell != null)\n *     {\n *       this.dragOver(me.getEvent(), this.cell);\n *     }\n *   },\n *   mouseUp: function(sender, me) { },\n *   dragEnter: function(evt, cell)\n *   {\n *     mxLog.debug('dragEnter', cell.value);\n *   },\n *   dragOver: function(evt, cell)\n *   {\n *     mxLog.debug('dragOver', cell.value);\n *   },\n *   dragLeave: function(evt, cell)\n *   {\n *     mxLog.debug('dragLeave', cell.value);\n *   }\n * });\n * (end)\n * \n * Constructor: mxCellTracker\n * \n * Constructs an event handler that highlights cells.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * color - Color of the highlight. Default is blue.\n * funct - Optional JavaScript function that is used to override\n * <mxCellMarker.getCell>.\n */\nfunction mxCellTracker(graph, color, funct)\n{\n\tmxCellMarker.call(this, graph, color);\n\n\tthis.graph.addMouseListener(this);\n\t\n\tif (funct != null)\n\t{\n\t\tthis.getCell = funct;\n\t}\n\t\n\t// Automatic deallocation of memory\n\tif (mxClient.IS_IE)\n\t{\n\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.destroy();\n\t\t}));\n\t}\n};\n\n/**\n * Extends mxCellMarker.\n */\nmxUtils.extend(mxCellTracker, mxCellMarker);\n\n/**\n * Function: mouseDown\n * \n * Ignores the event. The event is not consumed.\n */\nmxCellTracker.prototype.mouseDown = function(sender, me) { };\n\n/**\n * Function: mouseMove\n * \n * Handles the event by highlighting the cell under the mousepointer if it\n * is over the hotspot region of the cell.\n */\nmxCellTracker.prototype.mouseMove = function(sender, me)\n{\n\tif (this.isEnabled())\n\t{\n\t\tthis.process(me);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by reseting the highlight.\n */\nmxCellTracker.prototype.mouseUp = function(sender, me) { };\n\n/**\n * Function: destroy\n * \n * Destroys the object and all its resources and DOM nodes. This doesn't\n * normally need to be called. It is called automatically when the window\n * unloads.\n */\nmxCellTracker.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tthis.graph.removeMouseListener(this);\n\t\tmxCellMarker.prototype.destroy.apply(this);\n\t}\n};\n\n__mxOutput.mxCellTracker = typeof mxCellTracker !== 'undefined' ? mxCellTracker : undefined;\n"]}