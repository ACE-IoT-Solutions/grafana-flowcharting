{"version":3,"sources":["../../../../../../src/mxgraph/javascript/dist/js/handler/mxPanningHandler.js"],"names":["mxPanningHandler","graph","addMouseListener","forcePanningHandler","mxUtils","bind","sender","evt","evtName","getProperty","me","mxEvent","MOUSE_DOWN","isForcePanningEvent","start","active","fireEvent","mxEventObject","PAN_START","consume","addListener","FIRE_MOUSE_EVENT","gestureHandler","eo","isPinchEnabled","isConsumed","type","initialScale","view","scale","mouseDownEvent","value","Math","round","minScale","max","maxScale","min","zoomTo","GESTURE","mouseUpListener","reset","document","prototype","mxEventSource","constructor","useLeftButtonForPanning","usePopupTrigger","ignoreCell","previewEnabled","useGrid","panningEnabled","pinchEnabled","dx","dy","startX","startY","isActive","isPanningEnabled","setPanningEnabled","setPinchEnabled","isPanningTrigger","getEvent","getState","isLeftMouseButton","isControlDown","isShiftDown","isPopupTrigger","isMultiTouchEvent","mouseDown","consumePanningTrigger","dx0","container","scrollLeft","dy0","scrollTop","getX","getY","panningTrigger","mouseMove","snap","panGraph","PAN","tmp","abs","tolerance","mouseUp","useScrollbarsForPanning","hasScrollbars","getView","t","translate","x","y","PAN_END","setTranslate","destroy","removeMouseListener","removeListener","__mxOutput","undefined"],"mappings":";;;;;AAAA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,WAASA,gBAAT,CAA0BC,KAA1B,EACA;AACC,QAAIA,SAAS,IAAb,EACA;AACC,WAAKA,KAAL,GAAaA,KAAb;AACA,WAAKA,KAAL,CAAWC,gBAAX,CAA4B,IAA5B;;AAEA;AACA,WAAKC,mBAAL,GAA2BC,QAAQC,IAAR,CAAa,IAAb,EAAmB,UAASC,MAAT,EAAiBC,GAAjB,EAC9C;AACC,YAAIC,UAAUD,IAAIE,WAAJ,CAAgB,WAAhB,CAAd;AACA,YAAIC,KAAKH,IAAIE,WAAJ,CAAgB,OAAhB,CAAT;;AAEA,YAAID,WAAWG,QAAQC,UAAnB,IAAiC,KAAKC,mBAAL,CAAyBH,EAAzB,CAArC,EACA;AACC,eAAKI,KAAL,CAAWJ,EAAX;AACA,eAAKK,MAAL,GAAc,IAAd;AACA,eAAKC,SAAL,CAAe,IAAIC,aAAJ,CAAkBN,QAAQO,SAA1B,EAAqC,OAArC,EAA8CR,EAA9C,CAAf;AACAA,aAAGS,OAAH;AACA;AACD,OAZ0B,CAA3B;;AAcA,WAAKlB,KAAL,CAAWmB,WAAX,CAAuBT,QAAQU,gBAA/B,EAAiD,KAAKlB,mBAAtD;;AAEA;AACA,WAAKmB,cAAL,GAAsBlB,QAAQC,IAAR,CAAa,IAAb,EAAmB,UAASC,MAAT,EAAiBiB,EAAjB,EACzC;AACC,YAAI,KAAKC,cAAL,EAAJ,EACA;AACC,cAAIjB,MAAMgB,GAAGd,WAAH,CAAe,OAAf,CAAV;;AAEA,cAAI,CAACE,QAAQc,UAAR,CAAmBlB,GAAnB,CAAD,IAA4BA,IAAImB,IAAJ,IAAY,cAA5C,EACA;AACC,iBAAKC,YAAL,GAAoB,KAAK1B,KAAL,CAAW2B,IAAX,CAAgBC,KAApC;;AAEA;AACA,gBAAI,CAAC,KAAKd,MAAN,IAAgB,KAAKe,cAAL,IAAuB,IAA3C,EACA;AACC,mBAAKhB,KAAL,CAAW,KAAKgB,cAAhB;AACA,mBAAKA,cAAL,GAAsB,IAAtB;AACA;AACD,WAVD,MAWK,IAAIvB,IAAImB,IAAJ,IAAY,YAAZ,IAA4B,KAAKC,YAAL,IAAqB,IAArD,EACL;AACC,iBAAKA,YAAL,GAAoB,IAApB;AACA;;AAED,cAAI,KAAKA,YAAL,IAAqB,IAAzB,EACA;AACC,gBAAII,QAAQC,KAAKC,KAAL,CAAW,KAAKN,YAAL,GAAoBpB,IAAIsB,KAAxB,GAAgC,GAA3C,IAAkD,GAA9D;;AAEA,gBAAI,KAAKK,QAAL,IAAiB,IAArB,EACA;AACCH,sBAAQC,KAAKG,GAAL,CAAS,KAAKD,QAAd,EAAwBH,KAAxB,CAAR;AACA;;AAED,gBAAI,KAAKK,QAAL,IAAiB,IAArB,EACA;AACCL,sBAAQC,KAAKK,GAAL,CAAS,KAAKD,QAAd,EAAwBL,KAAxB,CAAR;AACA;;AAED,gBAAI,KAAK9B,KAAL,CAAW2B,IAAX,CAAgBC,KAAhB,IAAyBE,KAA7B,EACA;AACC,mBAAK9B,KAAL,CAAWqC,MAAX,CAAkBP,KAAlB;AACApB,sBAAQQ,OAAR,CAAgBZ,GAAhB;AACA;AACD;AACD;AACD,OA3CqB,CAAtB;;AA6CA,WAAKN,KAAL,CAAWmB,WAAX,CAAuBT,QAAQ4B,OAA/B,EAAwC,KAAKjB,cAA7C;;AAEA,WAAKkB,eAAL,GAAuBpC,QAAQC,IAAR,CAAa,IAAb,EAAmB,YAC1C;AACK,YAAI,KAAKU,MAAT,EACA;AACC,eAAK0B,KAAL;AACA;AACL,OANsB,CAAvB;;AAQA;AACA9B,cAAQS,WAAR,CAAoBsB,QAApB,EAA8B,SAA9B,EAAyC,KAAKF,eAA9C;AACA;AACD,G;;;AAAA;;AAED;;;AAGAxC,uBAAiB2C,SAAjB,GAA6B,IAAIC,aAAJ,EAA7B;AACA5C,uBAAiB2C,SAAjB,CAA2BE,WAA3B,GAAyC7C,gBAAzC;;AAEA;;;;;AAKAA,uBAAiB2C,SAAjB,CAA2B1C,KAA3B,GAAmC,IAAnC;;AAEA;;;;;;AAMAD,uBAAiB2C,SAAjB,CAA2BG,uBAA3B,GAAqD,KAArD;;AAEA;;;;;AAKA9C,uBAAiB2C,SAAjB,CAA2BI,eAA3B,GAA6C,IAA7C;;AAEA;;;;;;AAMA/C,uBAAiB2C,SAAjB,CAA2BK,UAA3B,GAAwC,KAAxC;;AAEA;;;;;AAKAhD,uBAAiB2C,SAAjB,CAA2BM,cAA3B,GAA4C,IAA5C;;AAEA;;;;;;AAMAjD,uBAAiB2C,SAAjB,CAA2BO,OAA3B,GAAqC,KAArC;;AAEA;;;;;AAKAlD,uBAAiB2C,SAAjB,CAA2BQ,cAA3B,GAA4C,IAA5C;;AAEA;;;;;AAKAnD,uBAAiB2C,SAAjB,CAA2BS,YAA3B,GAA0C,IAA1C;;AAEA;;;;;AAKApD,uBAAiB2C,SAAjB,CAA2BP,QAA3B,GAAsC,CAAtC;;AAEA;;;;;AAKApC,uBAAiB2C,SAAjB,CAA2BT,QAA3B,GAAsC,IAAtC;;AAEA;;;;;AAKAlC,uBAAiB2C,SAAjB,CAA2BU,EAA3B,GAAgC,IAAhC;;AAEA;;;;;AAKArD,uBAAiB2C,SAAjB,CAA2BW,EAA3B,GAAgC,IAAhC;;AAEA;;;;;AAKAtD,uBAAiB2C,SAAjB,CAA2BY,MAA3B,GAAoC,CAApC;;AAEA;;;;;AAKAvD,uBAAiB2C,SAAjB,CAA2Ba,MAA3B,GAAoC,CAApC;;AAEA;;;;;AAKAxD,uBAAiB2C,SAAjB,CAA2Bc,QAA3B,GAAsC,YACtC;AACC,eAAO,KAAK1C,MAAL,IAAe,KAAKY,YAAL,IAAqB,IAA3C;AACA,OAHD;;AAKA;;;;;AAKA3B,uBAAiB2C,SAAjB,CAA2Be,gBAA3B,GAA8C,YAC9C;AACC,eAAO,KAAKP,cAAZ;AACA,OAHD;;AAKA;;;;;AAKAnD,uBAAiB2C,SAAjB,CAA2BgB,iBAA3B,GAA+C,UAAS5B,KAAT,EAC/C;AACC,aAAKoB,cAAL,GAAsBpB,KAAtB;AACA,OAHD;;AAKA;;;;;AAKA/B,uBAAiB2C,SAAjB,CAA2BnB,cAA3B,GAA4C,YAC5C;AACC,eAAO,KAAK4B,YAAZ;AACA,OAHD;;AAKA;;;;;AAKApD,uBAAiB2C,SAAjB,CAA2BiB,eAA3B,GAA6C,UAAS7B,KAAT,EAC7C;AACC,aAAKqB,YAAL,GAAoBrB,KAApB;AACA,OAHD;;AAKA;;;;;;;AAOA/B,uBAAiB2C,SAAjB,CAA2BkB,gBAA3B,GAA8C,UAASnD,EAAT,EAC9C;AACC,YAAIH,MAAMG,GAAGoD,QAAH,EAAV;;AAEA,eAAQ,KAAKhB,uBAAL,IAAgCpC,GAAGqD,QAAH,MAAiB,IAAjD,IACNpD,QAAQqD,iBAAR,CAA0BzD,GAA1B,CADK,IAC+BI,QAAQsD,aAAR,CAAsB1D,GAAtB,KACpCI,QAAQuD,WAAR,CAAoB3D,GAApB,CAFK,IAEyB,KAAKwC,eAAL,IAAwBpC,QAAQwD,cAAR,CAAuB5D,GAAvB,CAFxD;AAGA,OAPD;;AASA;;;;;;;AAOAP,uBAAiB2C,SAAjB,CAA2B9B,mBAA3B,GAAiD,UAASH,EAAT,EACjD;AACC,eAAO,KAAKsC,UAAL,IAAmBrC,QAAQyD,iBAAR,CAA0B1D,GAAGoD,QAAH,EAA1B,CAA1B;AACA,OAHD;;AAKA;;;;;;AAMA9D,uBAAiB2C,SAAjB,CAA2B0B,SAA3B,GAAuC,UAAS/D,MAAT,EAAiBI,EAAjB,EACvC;AACC,aAAKoB,cAAL,GAAsBpB,EAAtB;;AAEA,YAAI,CAACA,GAAGe,UAAH,EAAD,IAAoB,KAAKiC,gBAAL,EAApB,IAA+C,CAAC,KAAK3C,MAArD,IAA+D,KAAK8C,gBAAL,CAAsBnD,EAAtB,CAAnE,EACA;AACC,eAAKI,KAAL,CAAWJ,EAAX;AACA,eAAK4D,qBAAL,CAA2B5D,EAA3B;AACA;AACD,OATD;;AAWA;;;;;AAKAV,uBAAiB2C,SAAjB,CAA2B7B,KAA3B,GAAmC,UAASJ,EAAT,EACnC;AACC,aAAK6D,GAAL,GAAW,CAAC,KAAKtE,KAAL,CAAWuE,SAAX,CAAqBC,UAAjC;AACA,aAAKC,GAAL,GAAW,CAAC,KAAKzE,KAAL,CAAWuE,SAAX,CAAqBG,SAAjC;;AAEA;AACA,aAAKpB,MAAL,GAAc7C,GAAGkE,IAAH,EAAd;AACA,aAAKpB,MAAL,GAAc9C,GAAGmE,IAAH,EAAd;AACA,aAAKxB,EAAL,GAAU,IAAV;AACA,aAAKC,EAAL,GAAU,IAAV;;AAEA,aAAKwB,cAAL,GAAsB,IAAtB;AACA,OAZD;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA9E,uBAAiB2C,SAAjB,CAA2B2B,qBAA3B,GAAmD,UAAS5D,EAAT,EACnD;AACCA,WAAGS,OAAH;AACA,OAHD;;AAKA;;;;;AAKAnB,uBAAiB2C,SAAjB,CAA2BoC,SAA3B,GAAuC,UAASzE,MAAT,EAAiBI,EAAjB,EACvC;AACC,aAAK2C,EAAL,GAAU3C,GAAGkE,IAAH,KAAY,KAAKrB,MAA3B;AACA,aAAKD,EAAL,GAAU5C,GAAGmE,IAAH,KAAY,KAAKrB,MAA3B;;AAEA,YAAI,KAAKzC,MAAT,EACA;AACC,cAAI,KAAKkC,cAAT,EACA;AACC;AACA,gBAAI,KAAKC,OAAT,EACA;AACC,mBAAKG,EAAL,GAAU,KAAKpD,KAAL,CAAW+E,IAAX,CAAgB,KAAK3B,EAArB,CAAV;AACA,mBAAKC,EAAL,GAAU,KAAKrD,KAAL,CAAW+E,IAAX,CAAgB,KAAK1B,EAArB,CAAV;AACA;;AAED,iBAAKrD,KAAL,CAAWgF,QAAX,CAAoB,KAAK5B,EAAL,GAAU,KAAKkB,GAAnC,EAAwC,KAAKjB,EAAL,GAAU,KAAKoB,GAAvD;AACA;;AAED,eAAK1D,SAAL,CAAe,IAAIC,aAAJ,CAAkBN,QAAQuE,GAA1B,EAA+B,OAA/B,EAAwCxE,EAAxC,CAAf;AACA,SAfD,MAgBK,IAAI,KAAKoE,cAAT,EACL;AACC,cAAIK,MAAM,KAAKpE,MAAf;;AAEA;AACA;AACA,eAAKA,MAAL,GAAciB,KAAKoD,GAAL,CAAS,KAAK/B,EAAd,IAAoB,KAAKpD,KAAL,CAAWoF,SAA/B,IAA4CrD,KAAKoD,GAAL,CAAS,KAAK9B,EAAd,IAAoB,KAAKrD,KAAL,CAAWoF,SAAzF;;AAEA,cAAI,CAACF,GAAD,IAAQ,KAAKpE,MAAjB,EACA;AACC,iBAAKC,SAAL,CAAe,IAAIC,aAAJ,CAAkBN,QAAQO,SAA1B,EAAqC,OAArC,EAA8CR,EAA9C,CAAf;AACA;AACD;;AAED,YAAI,KAAKK,MAAL,IAAe,KAAK+D,cAAxB,EACA;AACCpE,aAAGS,OAAH;AACA;AACD,OAvCD;;AAyCA;;;;;;AAMAnB,uBAAiB2C,SAAjB,CAA2B2C,OAA3B,GAAqC,UAAShF,MAAT,EAAiBI,EAAjB,EACrC;AACC,YAAI,KAAKK,MAAT,EACA;AACC,cAAI,KAAKsC,EAAL,IAAW,IAAX,IAAmB,KAAKC,EAAL,IAAW,IAAlC,EACA;AACC;AACA,gBAAI,CAAC,KAAKrD,KAAL,CAAWsF,uBAAZ,IAAuC,CAACnF,QAAQoF,aAAR,CAAsB,KAAKvF,KAAL,CAAWuE,SAAjC,CAA5C,EACA;AACC,kBAAI3C,QAAQ,KAAK5B,KAAL,CAAWwF,OAAX,GAAqB5D,KAAjC;AACA,kBAAI6D,IAAI,KAAKzF,KAAL,CAAWwF,OAAX,GAAqBE,SAA7B;AACA,mBAAK1F,KAAL,CAAWgF,QAAX,CAAoB,CAApB,EAAuB,CAAvB;AACA,mBAAKA,QAAL,CAAcS,EAAEE,CAAF,GAAM,KAAKvC,EAAL,GAAUxB,KAA9B,EAAqC6D,EAAEG,CAAF,GAAM,KAAKvC,EAAL,GAAUzB,KAArD;AACA;;AAEDnB,eAAGS,OAAH;AACA;;AAED,eAAKH,SAAL,CAAe,IAAIC,aAAJ,CAAkBN,QAAQmF,OAA1B,EAAmC,OAAnC,EAA4CpF,EAA5C,CAAf;AACA;;AAED,aAAK+B,KAAL;AACA,OAtBD;;AAwBA;;;;;;AAMAzC,uBAAiB2C,SAAjB,CAA2BF,KAA3B,GAAmC,YACnC;AACC,aAAKqC,cAAL,GAAsB,KAAtB;AACA,aAAKhD,cAAL,GAAsB,IAAtB;AACA,aAAKf,MAAL,GAAc,KAAd;AACA,aAAKsC,EAAL,GAAU,IAAV;AACA,aAAKC,EAAL,GAAU,IAAV;AACA,OAPD;;AASA;;;;;AAKAtD,uBAAiB2C,SAAjB,CAA2BsC,QAA3B,GAAsC,UAAS5B,EAAT,EAAaC,EAAb,EACtC;AACC,aAAKrD,KAAL,CAAWwF,OAAX,GAAqBM,YAArB,CAAkC1C,EAAlC,EAAsCC,EAAtC;AACA,OAHD;;AAKA;;;;;AAKAtD,uBAAiB2C,SAAjB,CAA2BqD,OAA3B,GAAqC,YACrC;AACC,aAAK/F,KAAL,CAAWgG,mBAAX,CAA+B,IAA/B;AACA,aAAKhG,KAAL,CAAWiG,cAAX,CAA0B,KAAK/F,mBAA/B;AACA,aAAKF,KAAL,CAAWiG,cAAX,CAA0B,KAAK5E,cAA/B;AACAX,gBAAQuF,cAAR,CAAuBxD,QAAvB,EAAiC,SAAjC,EAA4C,KAAKF,eAAjD;AACA,OAND;;AAQA2D,iBAAWnG,gBAAX,GAA8B,OAAOA,gBAAP,KAA4B,WAA5B,GAA0CA,gBAA1C,GAA6DoG,SAA3F","file":"mxPanningHandler.js","sourcesContent":["/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPanningHandler\n * \n * Event handler that pans and creates popupmenus. To use the left\n * mousebutton for panning without interfering with cell moving and\n * resizing, use <isUseLeftButton> and <isIgnoreCell>. For grid size\n * steps while panning, use <useGrid>. This handler is built-into\n * <mxGraph.panningHandler> and enabled using <mxGraph.setPanning>.\n * \n * Constructor: mxPanningHandler\n * \n * Constructs an event handler that creates a <mxPopupMenu>\n * and pans the graph.\n *\n * Event: mxEvent.PAN_START\n *\n * Fires when the panning handler changes its <active> state to true. The\n * <code>event</code> property contains the corresponding <mxMouseEvent>.\n *\n * Event: mxEvent.PAN\n *\n * Fires while handle is processing events. The <code>event</code> property contains\n * the corresponding <mxMouseEvent>.\n *\n * Event: mxEvent.PAN_END\n *\n * Fires when the panning handler changes its <active> state to false. The\n * <code>event</code> property contains the corresponding <mxMouseEvent>.\n */\nfunction mxPanningHandler(graph)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.graph.addMouseListener(this);\n\n\t\t// Handles force panning event\n\t\tthis.forcePanningHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar evtName = evt.getProperty('eventName');\n\t\t\tvar me = evt.getProperty('event');\n\t\t\t\n\t\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isForcePanningEvent(me))\n\t\t\t{\n\t\t\t\tthis.start(me);\n\t\t\t\tthis.active = true;\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_START, 'event', me));\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.forcePanningHandler);\n\t\t\n\t\t// Handles pinch gestures\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tif (this.isPinchEnabled())\n\t\t\t{\n\t\t\t\tvar evt = eo.getProperty('event');\n\t\t\t\t\n\t\t\t\tif (!mxEvent.isConsumed(evt) && evt.type == 'gesturestart')\n\t\t\t\t{\n\t\t\t\t\tthis.initialScale = this.graph.view.scale;\n\t\t\t\t\n\t\t\t\t\t// Forces start of panning when pinch gesture starts\n\t\t\t\t\tif (!this.active && this.mouseDownEvent != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.start(this.mouseDownEvent);\n\t\t\t\t\t\tthis.mouseDownEvent = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (evt.type == 'gestureend' && this.initialScale != null)\n\t\t\t\t{\n\t\t\t\t\tthis.initialScale = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.initialScale != null)\n\t\t\t\t{\n\t\t\t\t\tvar value = Math.round(this.initialScale * evt.scale * 100) / 100;\n\t\t\t\t\t\n\t\t\t\t\tif (this.minScale != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue = Math.max(this.minScale, value);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.maxScale != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue = Math.min(this.maxScale, value);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (this.graph.view.scale != value)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.zoomTo(value);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\tthis.mouseUpListener = mxUtils.bind(this, function()\n\t\t{\n\t\t    \tif (this.active)\n\t\t    \t{\n\t\t    \t\tthis.reset();\n\t\t    \t}\n\t\t});\n\t\t\n\t\t// Stops scrolling on every mouseup anywhere in the document\n\t\tmxEvent.addListener(document, 'mouseup', this.mouseUpListener);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxPanningHandler.prototype = new mxEventSource();\nmxPanningHandler.prototype.constructor = mxPanningHandler;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxPanningHandler.prototype.graph = null;\n\n/**\n * Variable: useLeftButtonForPanning\n * \n * Specifies if panning should be active for the left mouse button.\n * Setting this to true may conflict with <mxRubberband>. Default is false.\n */\nmxPanningHandler.prototype.useLeftButtonForPanning = false;\n\n/**\n * Variable: usePopupTrigger\n * \n * Specifies if <mxEvent.isPopupTrigger> should also be used for panning.\n */\nmxPanningHandler.prototype.usePopupTrigger = true;\n\n/**\n * Variable: ignoreCell\n * \n * Specifies if panning should be active even if there is a cell under the\n * mousepointer. Default is false.\n */\nmxPanningHandler.prototype.ignoreCell = false;\n\n/**\n * Variable: previewEnabled\n * \n * Specifies if the panning should be previewed. Default is true.\n */\nmxPanningHandler.prototype.previewEnabled = true;\n\n/**\n * Variable: useGrid\n * \n * Specifies if the panning steps should be aligned to the grid size.\n * Default is false.\n */\nmxPanningHandler.prototype.useGrid = false;\n\n/**\n * Variable: panningEnabled\n * \n * Specifies if panning should be enabled. Default is true.\n */\nmxPanningHandler.prototype.panningEnabled = true;\n\n/**\n * Variable: pinchEnabled\n * \n * Specifies if pinch gestures should be handled as zoom. Default is true.\n */\nmxPanningHandler.prototype.pinchEnabled = true;\n\n/**\n * Variable: maxScale\n * \n * Specifies the maximum scale. Default is 8.\n */\nmxPanningHandler.prototype.maxScale = 8;\n\n/**\n * Variable: minScale\n * \n * Specifies the minimum scale. Default is 0.01.\n */\nmxPanningHandler.prototype.minScale = 0.01;\n\n/**\n * Variable: dx\n * \n * Holds the current horizontal offset.\n */\nmxPanningHandler.prototype.dx = null;\n\n/**\n * Variable: dy\n * \n * Holds the current vertical offset.\n */\nmxPanningHandler.prototype.dy = null;\n\n/**\n * Variable: startX\n * \n * Holds the x-coordinate of the start point.\n */\nmxPanningHandler.prototype.startX = 0;\n\n/**\n * Variable: startY\n * \n * Holds the y-coordinate of the start point.\n */\nmxPanningHandler.prototype.startY = 0;\n\n/**\n * Function: isActive\n * \n * Returns true if the handler is currently active.\n */\nmxPanningHandler.prototype.isActive = function()\n{\n\treturn this.active || this.initialScale != null;\n};\n\n/**\n * Function: isPanningEnabled\n * \n * Returns <panningEnabled>.\n */\nmxPanningHandler.prototype.isPanningEnabled = function()\n{\n\treturn this.panningEnabled;\n};\n\n/**\n * Function: setPanningEnabled\n * \n * Sets <panningEnabled>.\n */\nmxPanningHandler.prototype.setPanningEnabled = function(value)\n{\n\tthis.panningEnabled = value;\n};\n\n/**\n * Function: isPinchEnabled\n * \n * Returns <pinchEnabled>.\n */\nmxPanningHandler.prototype.isPinchEnabled = function()\n{\n\treturn this.pinchEnabled;\n};\n\n/**\n * Function: setPinchEnabled\n * \n * Sets <pinchEnabled>.\n */\nmxPanningHandler.prototype.setPinchEnabled = function(value)\n{\n\tthis.pinchEnabled = value;\n};\n\n/**\n * Function: isPanningTrigger\n * \n * Returns true if the given event is a panning trigger for the optional\n * given cell. This returns true if control-shift is pressed or if\n * <usePopupTrigger> is true and the event is a popup trigger.\n */\nmxPanningHandler.prototype.isPanningTrigger = function(me)\n{\n\tvar evt = me.getEvent();\n\t\n\treturn (this.useLeftButtonForPanning && me.getState() == null &&\n\t\t\tmxEvent.isLeftMouseButton(evt)) || (mxEvent.isControlDown(evt) &&\n\t\t\tmxEvent.isShiftDown(evt)) || (this.usePopupTrigger && mxEvent.isPopupTrigger(evt));\n};\n\n/**\n * Function: isForcePanningEvent\n * \n * Returns true if the given <mxMouseEvent> should start panning. This\n * implementation always returns true if <ignoreCell> is true or for\n * multi touch events.\n */\nmxPanningHandler.prototype.isForcePanningEvent = function(me)\n{\n\treturn this.ignoreCell || mxEvent.isMultiTouchEvent(me.getEvent());\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating the panning. By consuming the event all\n * subsequent events of the gesture are redirected to this handler.\n */\nmxPanningHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.mouseDownEvent = me;\n\t\n\tif (!me.isConsumed() && this.isPanningEnabled() && !this.active && this.isPanningTrigger(me))\n\t{\n\t\tthis.start(me);\n\t\tthis.consumePanningTrigger(me);\n\t}\n};\n\n/**\n * Function: start\n * \n * Starts panning at the given event.\n */\nmxPanningHandler.prototype.start = function(me)\n{\n\tthis.dx0 = -this.graph.container.scrollLeft;\n\tthis.dy0 = -this.graph.container.scrollTop;\n\n\t// Stores the location of the trigger event\n\tthis.startX = me.getX();\n\tthis.startY = me.getY();\n\tthis.dx = null;\n\tthis.dy = null;\n\t\n\tthis.panningTrigger = true;\n};\n\n/**\n * Function: consumePanningTrigger\n * \n * Consumes the given <mxMouseEvent> if it was a panning trigger in\n * <mouseDown>. The default is to invoke <mxMouseEvent.consume>. Note that this\n * will block any further event processing. If you haven't disabled built-in\n * context menus and require immediate selection of the cell on mouseDown in\n * Safari and/or on the Mac, then use the following code:\n * \n * (code)\n * mxPanningHandler.prototype.consumePanningTrigger = function(me)\n * {\n *   if (me.evt.preventDefault)\n *   {\n *     me.evt.preventDefault();\n *   }\n *   \n *   // Stops event processing in IE\n *   me.evt.returnValue = false;\n *   \n *   // Sets local consumed state\n *   if (!mxClient.IS_SF && !mxClient.IS_MAC)\n *   {\n *     me.consumed = true;\n *   }\n * };\n * (end)\n */\nmxPanningHandler.prototype.consumePanningTrigger = function(me)\n{\n\tme.consume();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the panning on the graph.\n */\nmxPanningHandler.prototype.mouseMove = function(sender, me)\n{\n\tthis.dx = me.getX() - this.startX;\n\tthis.dy = me.getY() - this.startY;\n\t\n\tif (this.active)\n\t{\n\t\tif (this.previewEnabled)\n\t\t{\n\t\t\t// Applies the grid to the panning steps\n\t\t\tif (this.useGrid)\n\t\t\t{\n\t\t\t\tthis.dx = this.graph.snap(this.dx);\n\t\t\t\tthis.dy = this.graph.snap(this.dy);\n\t\t\t}\n\t\t\t\n\t\t\tthis.graph.panGraph(this.dx + this.dx0, this.dy + this.dy0);\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN, 'event', me));\n\t}\n\telse if (this.panningTrigger)\n\t{\n\t\tvar tmp = this.active;\n\n\t\t// Panning is activated only if the mouse is moved\n\t\t// beyond the graph tolerance\n\t\tthis.active = Math.abs(this.dx) > this.graph.tolerance || Math.abs(this.dy) > this.graph.tolerance;\n\n\t\tif (!tmp && this.active)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_START, 'event', me));\n\t\t}\n\t}\n\t\n\tif (this.active || this.panningTrigger)\n\t{\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPanningHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tif (this.dx != null && this.dy != null)\n\t\t{\n\t\t\t// Ignores if scrollbars have been used for panning\n\t\t\tif (!this.graph.useScrollbarsForPanning || !mxUtils.hasScrollbars(this.graph.container))\n\t\t\t{\n\t\t\t\tvar scale = this.graph.getView().scale;\n\t\t\t\tvar t = this.graph.getView().translate;\n\t\t\t\tthis.graph.panGraph(0, 0);\n\t\t\t\tthis.panGraph(t.x + this.dx / scale, t.y + this.dy / scale);\n\t\t\t}\n\t\t\t\n\t\t\tme.consume();\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_END, 'event', me));\n\t}\n\t\n\tthis.reset();\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPanningHandler.prototype.reset = function()\n{\n\tthis.panningTrigger = false;\n\tthis.mouseDownEvent = null;\n\tthis.active = false;\n\tthis.dx = null;\n\tthis.dy = null;\n};\n\n/**\n * Function: panGraph\n * \n * Pans <graph> by the given amount.\n */\nmxPanningHandler.prototype.panGraph = function(dx, dy)\n{\n\tthis.graph.getView().setTranslate(dx, dy);\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPanningHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.forcePanningHandler);\n\tthis.graph.removeListener(this.gestureHandler);\n\tmxEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n};\n\n__mxOutput.mxPanningHandler = typeof mxPanningHandler !== 'undefined' ? mxPanningHandler : undefined;\n"]}