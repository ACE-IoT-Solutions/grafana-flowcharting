{"version":3,"sources":["../src/rulesHandler.js"],"names":["RulesHandler","$scope","data","u","log","rules","undefined","length","import","obj","i","forEach","map","rule","Rule","pattern","push","index","newRule","Array","isArray","splice","getRule","getData","newData","JSON","parse","stringify","activeRuleIndex","first","last","curr","before","after"],"mappings":"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","sourcesContent":["import Rule from './rule_class';\r\n\r\nexport default class RulesHandler {\r\n  /** @ngInject */\r\n  constructor($scope, data) {\r\n    u.log(1, 'RulesHandler.constructor()');\r\n    this.$scope = $scope || null;\r\n    this.rules = [];\r\n    this.data = data;\r\n    // if (version != this.panel.version) this.migrate(this.rules)\r\n    // else this.import(this.rules);\r\n    if (this.data !== undefined && this.data !== null && this.data.length > 0) {\r\n      this.import(this.data);\r\n    }\r\n  }\r\n\r\n  import(obj) {\r\n    u.log(1, 'RuleHandler.import()');\r\n    u.log(0, 'RuleHandler.import() obj', obj);\r\n    let i = 0;\r\n    if (this.data != obj) this.data = [];\r\n    this.rules = [];\r\n    obj.forEach((map) => {\r\n      const rule = new Rule(map.pattern, map);\r\n      this.rules.push(rule);\r\n      this.data[i] = map;\r\n      i += 1;\r\n    });\r\n  }\r\n\r\n  getRules() {\r\n    return this.rules;\r\n  }\r\n\r\n  getRule(index) {\r\n    return this.rules[index];\r\n  }\r\n\r\n  addRule(pattern) {\r\n    const data = {};\r\n    const newRule = new Rule(pattern, data);\r\n    this.rules.push(newRule);\r\n    this.data.push(data);\r\n  }\r\n\r\n  countRules() {\r\n    if (this.rules !== undefined && Array.isArray(this.rules)) return this.rules.length;\r\n    return 0;\r\n  }\r\n\r\n  removeRule(index) {\r\n    this.rules.splice(index, 1);\r\n    this.data.splice(index, 1);\r\n  }\r\n\r\n  cloneRule(index) {\r\n    const rule = this.getRule(index);\r\n    const data = rule.getData();\r\n    const newData = JSON.parse(JSON.stringify(data));\r\n    const newRule = new Rule(newData.pattern, newData);\r\n    this.rules.splice(index, 0, newRule);\r\n    this.data.splice(index, 0, newData);\r\n    this.activeRuleIndex = index;\r\n  }\r\n\r\n  moveRuleToUp(index) {\r\n    const first = 0;\r\n    const rules = this.rules;\r\n    const last = rules.length - 1;\r\n    if (index !== first && last !== first) {\r\n      const curr = rules[index];\r\n      const before = rules[index - 1];\r\n      rules[index - 1] = curr;\r\n      rules[index] = before;\r\n    }\r\n  }\r\n\r\n  moveRuleToDown(index) {\r\n    const first = 0;\r\n    const rules = this.rules;\r\n    const last = rules.length - 1;\r\n    if (index !== last && last !== first) {\r\n      const curr = rules[index];\r\n      const after = rules[index + 1];\r\n      rules[index + 1] = curr;\r\n      rules[index] = after;\r\n    }\r\n  }\r\n}\r\n"],"file":"rulesHandler.js"}