{"version":3,"sources":["../src/rulesHandler.js"],"names":["RulesHandler","$scope","data","u","log","rules","undefined","length","import","obj","i","forEach","map","rule","Rule","pattern","push","index","newRule","Array","isArray","splice","getRule","getData","newData","JSON","parse","stringify","activeRuleIndex","first","last","curr","before","after"],"mappings":"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","sourcesContent":["import Rule from \"./rule_class\";\n\nexport default class RulesHandler {\n    /** @ngInject */\n    constructor($scope,data) {\n        u.log(1,\"RulesHandler.constructor()\");\n        this.$scope = $scope || null;\n        this.rules = [];\n        this.data = data;\n        // if (version != this.panel.version) this.migrate(this.rules)\n        // else this.import(this.rules);\n        if( this.data != undefined && this.data != null && this.data.length >0 ) {\n            this.import(this.data);\n        }\n    }\n\n    import(obj) {\n        let i = 0;\n        obj.forEach(map => {\n            let rule = new Rule(map.pattern, map);\n            this.rules.push(rule);\n            this.data[i++] = map;\n        });\n    }\n\n    getRules() {\n        return this.rules;\n    }\n\n    getRule(index) {\n        return this.rules[index];\n    }\n\n    addRule(pattern) {\n        let data = {}\n        const newRule = new Rule(pattern,data);\n        this.rules.push(newRule);\n        this.data.push(data);\n    }\n\n    countRules() {\n        if (this.rules != undefined && Array.isArray(this.rules))return this.rules.length;\n        else return 0;\n    }\n\n    removeRule(index) {\n        this.rules.splice(index, 1);\n        this.data.splice(index, 1);\n    }\n\n    cloneRule(index) {\n        let rule = this.getRule(index);\n        let data = rule.getData();\n        let newData = JSON.parse(JSON.stringify(data));\n        let newRule = new Rule(newData.pattern,newData);\n        this.rules.splice(index, 0, newRule);\n        this.data.splice(index, 0, newData);\n        this.activeRuleIndex = index;\n    }\n\n    moveRuleToUp(index) {\n        const first = 0;\n        const rules = this.rules;\n        const last = rules.length - 1;\n        if (index != first && last != first) {\n            let curr = rules[index];\n            let before = rules[index - 1];\n            rules[index - 1] = curr;\n            rules[index] = before;\n        }\n    }\n\n    moveRuleToDown(index) {\n        const first = 0;\n        const rules = this.rules\n        const last = rules.length - 1;\n        if (index != last && last != first) {\n            let curr = rules[index];\n            let after = rules[index + 1];\n            rules[index + 1] = curr;\n            rules[index] = after;\n        }\n    }\n}"],"file":"rulesHandler.js"}