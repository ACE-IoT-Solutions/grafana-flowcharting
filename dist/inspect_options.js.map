{"version":3,"sources":["../src/inspect_options.js"],"names":["InspectOptionsCtrl","$scope","editor","GF_PLUGIN","window","ctrl","panel","text","u","stringify","json","prettifyJSON","logDisplayOption","value","logDisplay","logLevelOption","logLevel","flowchartHandler","panelCtrl","render","styleIndex","colorIndex","newColor","colors","state","newcellId","undefined","cellId","getFlowchart","getStateHandler","edited","previousId","edit","elt","document","getElementById","setTimeout","focus","draw","refresh","flowchart","states","getStates","forEach","renameId","applyModel","xgraph","getXGraph","selectMxCells","unselectMxCells","inspectOptionsTab","$q","uiSegmentSrv","restrict","scope","templateUrl","getPartialPath","controller"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEaA,kB;;;AACX;AACA,8BAAYC,MAAZ,EAAoB;AAAA;;AAClBA,IAAAA,MAAM,CAACC,MAAP,GAAgB,IAAhB;AACAD,IAAAA,MAAM,CAACE,SAAP,GAAmBC,MAAM,CAACD,SAA1B;AACA,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKI,IAAL,GAAYJ,MAAM,CAACI,IAAnB;AACA,SAAKC,KAAL,GAAa,KAAKD,IAAL,CAAUC,KAAvB;AACA,QAAMC,IAAI,GAAGC,CAAC,CAACC,SAAF,CAAY,KAAKH,KAAjB,CAAb;AACA,SAAKI,IAAL,GAAYF,CAAC,CAACG,YAAF,CAAeJ,IAAf,CAAZ;AACA,SAAKK,gBAAL,GAAwB,CAAC;AAAEL,MAAAA,IAAI,EAAE,MAAR;AAAgBM,MAAAA,KAAK,EAAE;AAAvB,KAAD,EAAgC;AAAEN,MAAAA,IAAI,EAAE,OAAR;AAAiBM,MAAAA,KAAK,EAAE;AAAxB,KAAhC,CAAxB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,cAAL,GAAsB,CACpB;AAAER,MAAAA,IAAI,EAAE,OAAR;AAAiBM,MAAAA,KAAK,EAAE;AAAxB,KADoB,EAEpB;AAAEN,MAAAA,IAAI,EAAE,MAAR;AAAgBM,MAAAA,KAAK,EAAE;AAAvB,KAFoB,EAGpB;AAAEN,MAAAA,IAAI,EAAE,SAAR;AAAmBM,MAAAA,KAAK,EAAE;AAA1B,KAHoB,EAIpB;AAAEN,MAAAA,IAAI,EAAE,OAAR;AAAiBM,MAAAA,KAAK,EAAE;AAAxB,KAJoB,CAAtB;AAMA,SAAKG,QAAL,GAAgBA,QAAhB;AACA,SAAKC,gBAAL,GAAwB,KAAKZ,IAAL,CAAUY,gBAAlC;AACAhB,IAAAA,MAAM,CAACgB,gBAAP,GAA0B,KAAKZ,IAAL,CAAUY,gBAApC;AACD;;;;6BAEQ;AACP,WAAKC,SAAL,CAAeC,MAAf;AACD;;;kCAEaC,U,EAAYC,U,EAAY;AAAA;;AACpC,aAAO,UAACC,QAAD,EAAc;AACnB,QAAA,KAAI,CAACC,MAAL,CAAYF,UAAZ,IAA0BC,QAA1B;AACD,OAFD;AAGD;;;8BAES;AACRlB,MAAAA,MAAM,CAACY,QAAP,GAAkB,KAAKA,QAAvB;AACAZ,MAAAA,MAAM,CAACU,UAAP,GAAoB,KAAKA,UAAzB;AACD;;;+BAEUU,K,EAAO;AAChB,UAAIA,KAAK,CAACC,SAAN,KAAoBC,SAApB,IAAiCF,KAAK,CAACG,MAAN,KAAiBH,KAAK,CAACC,SAA5D,EAAuE;AACrE,aAAKR,gBAAL,CAAsBW,YAAtB,CAAmC,CAAnC,EAAsCC,eAAtC,GAAwDC,MAAxD,GAAiE,IAAjE;AACA,YAAIN,KAAK,CAACO,UAAN,KAAqBL,SAAzB,EAAoCF,KAAK,CAACO,UAAN,GAAmBP,KAAK,CAACG,MAAzB;AACpCH,QAAAA,KAAK,CAACG,MAAN,GAAeH,KAAK,CAACC,SAArB;AACAD,QAAAA,KAAK,CAACM,MAAN,GAAe,IAAf;AACD;;AACDN,MAAAA,KAAK,CAACQ,IAAN,GAAa,KAAb;AACD;;;2BAEMR,K,EAAO;AACZA,MAAAA,KAAK,CAACQ,IAAN,GAAa,IAAb;AACAR,MAAAA,KAAK,CAACC,SAAN,GAAkBD,KAAK,CAACG,MAAxB;AACA,UAAIM,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwBX,KAAK,CAACG,MAA9B,CAAV;AACAS,MAAAA,UAAU,CAAC,YAAY;AACrBH,QAAAA,GAAG,CAACI,KAAJ;AACD,OAFS,EAEP,GAFO,CAAV;AAGD;;;4BAEO;AACN,WAAKpB,gBAAL,CAAsBqB,IAAtB;AACA,WAAKrB,gBAAL,CAAsBsB,OAAtB,GAFM,CAGN;AACD;;;4BAEO;AACN,UAAMC,SAAS,GAAG,KAAKvB,gBAAL,CAAsBW,YAAtB,CAAmC,CAAnC,CAAlB;AACA,UAAMa,MAAM,GAAGD,SAAS,CAACX,eAAV,GAA4Ba,SAA5B,EAAf;AACAD,MAAAA,MAAM,CAACE,OAAP,CAAe,UAACnB,KAAD,EAAW;AACxB,YAAIA,KAAK,CAACM,MAAV,EAAkBU,SAAS,CAACI,QAAV,CAAmBpB,KAAK,CAACO,UAAzB,EAAqCP,KAAK,CAACG,MAA3C;AACnB,OAFD;AAGAa,MAAAA,SAAS,CAACK,UAAV;AACD;;;+BAEUrB,K,EAAO;AAChB,UAAMgB,SAAS,GAAG,KAAKvB,gBAAL,CAAsBW,YAAtB,CAAmC,CAAnC,CAAlB;AACA,UAAMkB,MAAM,GAAGN,SAAS,CAACO,SAAV,EAAf;AACA,UAAIvB,KAAK,CAACM,MAAV,EAAkBgB,MAAM,CAACE,aAAP,CAAqB,IAArB,EAA2BxB,KAAK,CAACO,UAAjC,EAAlB,KACKe,MAAM,CAACE,aAAP,CAAqB,IAArB,EAA2BxB,KAAK,CAACG,MAAjC;AACN;;;mCAEc;AACb,UAAMa,SAAS,GAAG,KAAKvB,gBAAL,CAAsBW,YAAtB,CAAmC,CAAnC,CAAlB;AACA,UAAMkB,MAAM,GAAGN,SAAS,CAACO,SAAV,EAAf;AACAD,MAAAA,MAAM,CAACG,eAAP;AACD;;;;;AAGH;;;;;AACO,SAASC,iBAAT,CAA2BC,EAA3B,EAA+BC,YAA/B,EAA6C;AAClD;;AACA,SAAO;AACLC,IAAAA,QAAQ,EAAE,GADL;AAELC,IAAAA,KAAK,EAAE,IAFF;AAGLC,IAAAA,WAAW,YAAKpD,SAAS,CAACqD,cAAV,EAAL,0BAHN;AAILC,IAAAA,UAAU,EAAEzD;AAJP,GAAP;AAMD","sourcesContent":["import { plugin } from './plugin';\n\nexport class InspectOptionsCtrl {\n  /** @ngInject */\n  constructor($scope) {\n    $scope.editor = this;\n    $scope.GF_PLUGIN = window.GF_PLUGIN;\n    this.$scope = $scope;\n    this.ctrl = $scope.ctrl;\n    this.panel = this.ctrl.panel;\n    const text = u.stringify(this.panel);\n    this.json = u.prettifyJSON(text);\n    this.logDisplayOption = [{ text: 'True', value: true }, { text: 'False', value: false }];\n    this.logDisplay = logDisplay;\n    this.logLevelOption = [\n      { text: 'DEBUG', value: 0 },\n      { text: 'INFO', value: 1 },\n      { text: 'WARNING', value: 2 },\n      { text: 'ERROR', value: 3 },\n    ];\n    this.logLevel = logLevel;\n    this.flowchartHandler = this.ctrl.flowchartHandler;\n    $scope.flowchartHandler = this.ctrl.flowchartHandler;\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  onColorChange(styleIndex, colorIndex) {\n    return (newColor) => {\n      this.colors[colorIndex] = newColor;\n    };\n  }\n\n  onDebug() {\n    window.logLevel = this.logLevel;\n    window.logDisplay = this.logDisplay;\n  }\n\n  onChangeId(state) {\n    if (state.newcellId !== undefined && state.cellId !== state.newcellId) {\n      this.flowchartHandler.getFlowchart(0).getStateHandler().edited = true;\n      if (state.previousId === undefined) state.previousId = state.cellId;\n      state.cellId = state.newcellId;\n      state.edited = true;\n    }\n    state.edit = false;\n  }\n\n  onEdit(state) {\n    state.edit = true;\n    state.newcellId = state.cellId;\n    let elt = document.getElementById(state.cellId);\n    setTimeout(function () {\n      elt.focus();\n    }, 100);\n  }\n\n  reset() {\n    this.flowchartHandler.draw();\n    this.flowchartHandler.refresh();\n    // this.$scope.$apply();\n  }\n\n  apply() {\n    const flowchart = this.flowchartHandler.getFlowchart(0);\n    const states = flowchart.getStateHandler().getStates();\n    states.forEach((state) => {\n      if (state.edited) flowchart.renameId(state.previousId, state.cellId);\n    });\n    flowchart.applyModel();\n  }\n\n  selectCell(state) {\n    const flowchart = this.flowchartHandler.getFlowchart(0);\n    const xgraph = flowchart.getXGraph();\n    if (state.edited) xgraph.selectMxCells('id', state.previousId);\n    else xgraph.selectMxCells('id', state.cellId);\n  }\n\n  unselectCell() {\n    const flowchart = this.flowchartHandler.getFlowchart(0);\n    const xgraph = flowchart.getXGraph();\n    xgraph.unselectMxCells();\n  }\n}\n\n/** @ngInject */\nexport function inspectOptionsTab($q, uiSegmentSrv) {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: `${GF_PLUGIN.getPartialPath()}/inspect_options.html`,\n    controller: InspectOptionsCtrl\n  };\n}\n"],"file":"inspect_options.js"}