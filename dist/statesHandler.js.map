{"version":3,"sources":["../src/statesHandler.js"],"names":["StateHandler","xgraph","u","log","states","initStates","cellId","foundState","state","mxcell","State","push","_","without","mxcells","getMxCells","each","addState","length","level","count","forEach","getLevel","prepare","rules","series","rule","serie","setState","applyState"],"mappings":";;;;;;;AACA;;;;;;;;;;IAEqBA,Y;;;AACnB;AACA,wBAAYC,MAAZ,EAAoB;AAAA;;AAClBC,IAAAA,CAAC,CAACC,GAAF,CAAM,CAAN,EAAS,4BAAT;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKH,MAAL,GAAcA,MAAd;AACA,SAAKI,UAAL,CAAgB,KAAKJ,MAArB;AACD;;;;gCAEW;AACV,aAAO,KAAKG,MAAZ;AACD;;;6BAEQE,M,EAAQ;AACf,UAAIC,UAAU,GAAG,IAAjB;AADe;AAAA;AAAA;;AAAA;AAEf,6BAAkB,KAAKH,MAAvB,8HAA+B;AAAA,cAAtBI,KAAsB;AAC7B,cAAIF,MAAM,IAAIE,KAAK,CAACF,MAApB,EAA4BC,UAAU,GAAGC,KAAb;AAC5B;AACD;AALc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMf,aAAOD,UAAP;AACD;;;6BAEQE,M,EAAQ;AACf,UAAMD,KAAK,GAAG,IAAIE,oBAAJ,CAAUD,MAAV,EAAkB,KAAKR,MAAvB,CAAd;AACA,WAAKG,MAAL,CAAYO,IAAZ,CAAiBH,KAAjB;AACD;;;gCAEWC,M,EAAQ;AAClB,WAAKL,MAAL,GAAcQ,CAAC,CAACC,OAAF,CAAU,KAAKT,MAAf,EAAuBK,MAAvB,CAAd;AACD;;;+BAEUR,M,EAAQ;AAAA;;AACjB,WAAKA,MAAL,GAAcA,MAAd;AACA,WAAKG,MAAL,GAAc,EAAd;AACA,UAAMU,OAAO,GAAG,KAAKb,MAAL,CAAYc,UAAZ,EAAhB;;AACAH,MAAAA,CAAC,CAACI,IAAF,CAAOF,OAAP,EAAgB,UAACL,MAAD,EAAY;AAC1B,QAAA,KAAI,CAACQ,QAAL,CAAcR,MAAd;AACD,OAFD;AAGD;;;kCAEa;AACZ,aAAO,KAAKL,MAAL,CAAYc,MAAnB;AACD;;;yCAEoBC,K,EAAO;AAC1B,UAAIC,KAAK,GAAG,CAAZ;AACA,WAAKhB,MAAL,CAAYiB,OAAZ,CAAoB,UAACb,KAAD,EAAW;AAC7B,YAAIA,KAAK,CAACc,QAAN,OAAqBH,KAAzB,EAAgCC,KAAK,IAAI,CAAT;AACjC,OAFD;AAGA,aAAOA,KAAP;AACD;;;8BAES;AACR,WAAKhB,MAAL,CAAYiB,OAAZ,CAAoB,UAACb,KAAD,EAAW;AAC7BA,QAAAA,KAAK,CAACe,OAAN;AACD,OAFD;AAGD;;;8BAESC,K,EAAOC,M,EAAQ;AACvBvB,MAAAA,CAAC,CAACC,GAAF,CAAM,CAAN,EAAS,0BAAT;AACAD,MAAAA,CAAC,CAACC,GAAF,CAAM,CAAN,EAAS,iCAAT,EAA4CqB,KAA5C;AACAtB,MAAAA,CAAC,CAACC,GAAF,CAAM,CAAN,EAAS,kCAAT,EAA6CsB,MAA7C;AACA,WAAKF,OAAL;AACA,WAAKnB,MAAL,CAAYiB,OAAZ,CAAoB,UAACb,KAAD,EAAW;AAC7BgB,QAAAA,KAAK,CAACH,OAAN,CAAc,UAACK,IAAD,EAAU;AACtBD,UAAAA,MAAM,CAACJ,OAAP,CAAe,UAACM,KAAD,EAAW;AACxBnB,YAAAA,KAAK,CAACoB,QAAN,CAAeF,IAAf,EAAqBC,KAArB;AACD,WAFD;AAGD,SAJD;AAKD,OAND;AAOD;;;kCAEa;AACZzB,MAAAA,CAAC,CAACC,GAAF,CAAM,CAAN,EAAS,4BAAT;AACA,WAAKC,MAAL,CAAYiB,OAAZ,CAAoB,UAACb,KAAD,EAAW;AAC7BA,QAAAA,KAAK,CAACqB,UAAN;AACD,OAFD;AAGD","sourcesContent":["/* global u */\r\nimport State from './state_class';\r\n\r\nexport default class StateHandler {\r\n  /** @ngInject */\r\n  constructor(xgraph) {\r\n    u.log(1, 'StateHandler.constructor()');\r\n    this.states = [];\r\n    this.xgraph = xgraph;\r\n    this.initStates(this.xgraph);\r\n  }\r\n\r\n  getStates() {\r\n    return this.states;\r\n  }\r\n\r\n  getState(cellId) {\r\n    let foundState = null;\r\n    for (let state of this.states) {\r\n      if (cellId == state.cellId) foundState = state;\r\n      break;\r\n    }\r\n    return foundState;\r\n  }\r\n\r\n  addState(mxcell) {\r\n    const state = new State(mxcell, this.xgraph);\r\n    this.states.push(state);\r\n  }\r\n\r\n  removeState(mxcell) {\r\n    this.states = _.without(this.states, mxcell);\r\n  }\r\n\r\n  initStates(xgraph) {\r\n    this.xgraph = xgraph;\r\n    this.states = [];\r\n    const mxcells = this.xgraph.getMxCells();\r\n    _.each(mxcells, (mxcell) => {\r\n      this.addState(mxcell);\r\n    });\r\n  }\r\n\r\n  countStates() {\r\n    return this.states.length;\r\n  }\r\n\r\n  countStatesWithLevel(level) {\r\n    let count = 0;\r\n    this.states.forEach((state) => {\r\n      if (state.getLevel() === level) count += 1;\r\n    });\r\n    return count;\r\n  }\r\n\r\n  prepare() {\r\n    this.states.forEach((state) => {\r\n      state.prepare();\r\n    });\r\n  }\r\n\r\n  setStates(rules, series) {\r\n    u.log(1, 'StateHandler.setStates()');\r\n    u.log(0, 'StatesHandler.setStates() Rules', rules);\r\n    u.log(0, 'StatesHandler.setStates() Series', series);\r\n    this.prepare();\r\n    this.states.forEach((state) => {\r\n      rules.forEach((rule) => {\r\n        series.forEach((serie) => {\r\n          state.setState(rule, serie);\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  applyStates() {\r\n    u.log(1, 'StateHandler.applyStates()');\r\n    this.states.forEach((state) => {\r\n      state.applyState();\r\n    });\r\n  }\r\n}\r\n"],"file":"statesHandler.js"}