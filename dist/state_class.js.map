{"version":3,"sources":["../src/state_class.js"],"names":["State","mxcell","xgraph","u","log","cellId","id","matched","matchedShape","matchedText","matchedLink","globalLevel","styles","level","fillColor","strokeColor","fontColor","currentColors","originalColors","originalValue","getValueCell","currentValue","link","getLink","undefined","originalLink","currentLink","forEach","style","color","getStyleCell","rule","serie","matchSerie","shapeMaps","getShapeMaps","textMaps","getTextMaps","linkMaps","getLinkMaps","value","getValueForSerie","FormattedValue","getFormattedValue","getThresholdLevel","cellProp","getCellProp","data","shapeProp","shape","isHidden","match","setLevelStyle","toColorize","setColorStyle","getColorForValue","overlayIcon","toIconize","textProp","text","toValorize","setText","getReplaceText","linkProp","toLinkable","unsetLevel","unsetColor","unsetText","unsetLink","prop","unsetColorStyle","unsetLevelStyle","getLevel","url","isVertex","isEdge","setStyleCell","getCurrentColorStyle","addOverlay","getTextLevel","removeOverlay","setValueCell","getCurrentText","addLink","restoreCell","unsetState"],"mappings":"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","sourcesContent":["export default class State {\r\n  constructor(mxcell, xgraph) {\r\n    u.log(1, 'State.constructor()');\r\n    this.mxcell = mxcell;\r\n    this.cellId = mxcell.id;\r\n    this.xgraph = xgraph;\r\n    this.matched = false;\r\n    this.matchedShape = false;\r\n    this.matchedText = false;\r\n    this.matchedLink = false;\r\n    this.globalLevel = -1;\r\n    this.styles = ['fillColor', 'strokeColor', 'fontColor'];\r\n    this.level = {\r\n      fillColor: -1,\r\n      strokeColor: -1,\r\n      fontColor: -1,\r\n    };\r\n    this.currentColors = {};\r\n    this.originalColors = {};\r\n    this.originalValue = this.xgraph.getValueCell(mxcell);\r\n    this.currentValue = this.originalValue;\r\n    let link = this.xgraph.getLink(mxcell);\r\n    if (link === undefined) link = null;\r\n    this.originalLink = link;\r\n    this.currentLink = link;\r\n\r\n    this.styles.forEach((style) => {\r\n      const color = this.xgraph.getStyleCell(mxcell, style);\r\n      this.currentColors[style] = color;\r\n      this.originalColors[style] = color;\r\n    });\r\n  }\r\n\r\n  setState(rule, serie) {\r\n    u.log(1, 'State.setState()');\r\n    u.log(0, 'State.setState() Rule', rule);\r\n    u.log(0, 'State.setState() Serie', serie);\r\n    if (rule.matchSerie(serie)) {\r\n      const shapeMaps = rule.getShapeMaps();\r\n      const textMaps = rule.getTextMaps();\r\n      const linkMaps = rule.getLinkMaps();\r\n      const value = rule.getValueForSerie(serie);\r\n      const FormattedValue = rule.getFormattedValue(value);\r\n      const level = rule.getThresholdLevel(value);\r\n\r\n      // SHAPE\r\n      let cellProp = this.getCellProp(rule.data.shapeProp);\r\n      shapeMaps.forEach((shape) => {\r\n        if (!shape.isHidden() && shape.match(cellProp)) {\r\n          this.matchedShape = true;\r\n          this.matched = true;\r\n          if (this.globalLevel <= level) {\r\n            this.setLevelStyle(rule.data.style, level);\r\n            if (rule.toColorize(value)) {\r\n              this.setColorStyle(rule.data.style, rule.getColorForValue(value));\r\n            }\r\n            this.overlayIcon = rule.toIconize(value);\r\n          }\r\n        }\r\n      });\r\n\r\n      // TEXT\r\n      cellProp = this.getCellProp(rule.data.textProp);\r\n      textMaps.forEach((text) => {\r\n        if (!text.isHidden() && text.match(cellProp)) {\r\n          this.matchedText = true;\r\n          this.matched = true;\r\n          if (this.globalLevel <= level) {\r\n            if (rule.toValorize(value)) {\r\n              this.setText(rule.getReplaceText(this.originalValue, FormattedValue));\r\n            } else {\r\n              // Hide text\r\n              this.setText(rule.getReplaceText(this.originalValue, ''));\r\n            }\r\n          }\r\n        }\r\n      });\r\n      // LINK\r\n      cellProp = this.getCellProp(rule.data.linkProp);\r\n      linkMaps.forEach((link) => {\r\n        if (!link.isHidden() && link.match(cellProp)) {\r\n          this.matchedLink = true;\r\n          this.matched = true;\r\n          if (this.globalLevel <= level) {\r\n            if (rule.toLinkable(value)) {\r\n              this.currentLink = rule.getLink();\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n    u.log(0, 'State.setState() state', this);\r\n  }\r\n\r\n  unsetState() {\r\n    u.log(1, 'State.unsetState()');\r\n    this.unsetLevel();\r\n    this.unsetColor();\r\n    this.unsetText();\r\n    this.unsetLink();\r\n    this.matched = false;\r\n    this.matchedShape = false;\r\n    this.matchedText = false;\r\n    this.matchedLink = false;\r\n    u.log(0, 'State.unsetState() state', this);\r\n  }\r\n\r\n  getCellProp(prop) {\r\n    if (prop === 'id') return this.cellId;\r\n    if (prop === 'value') return this.originalValue;\r\n    return '/!\\\\ Not found';\r\n  }\r\n\r\n  setColorStyle(style, color) {\r\n    u.log(1, 'State.setColorStyle()');\r\n    this.currentColors[style] = color;\r\n  }\r\n\r\n  unsetColorStyle(style) {\r\n    this.currentColors[style] = this.originalColors[style];\r\n  }\r\n\r\n  unsetColor() {\r\n    this.styles.forEach((style) => {\r\n      this.unsetColorStyle(style);\r\n    });\r\n  }\r\n\r\n  getCurrentColorStyle(style) {\r\n    return this.currentColors[style];\r\n  }\r\n\r\n  getOriginalColorStyle(style) {\r\n    return this.originalColors[style];\r\n  }\r\n\r\n  unsetLevelStyle(style) {\r\n    this.level[style] = -1;\r\n  }\r\n\r\n  unsetLevel() {\r\n    this.styles.forEach((style) => {\r\n      this.unsetLevelStyle(style);\r\n    });\r\n    this.globalLevel = -1;\r\n  }\r\n\r\n  setLevelStyle(style, level) {\r\n    u.log(1, 'State.setLevelStyle()');\r\n    this.level[style] = level;\r\n    if (this.globalLevel < level) this.globalLevel = level;\r\n  }\r\n\r\n  getLevelStyle(style) {\r\n    return this.level[style];\r\n  }\r\n\r\n  getLevel() {\r\n    return this.globalLevel;\r\n  }\r\n\r\n  getTextLevel() {\r\n    const level = this.getLevel();\r\n    switch (level) {\r\n      case -1:\r\n        return 'NO DATA';\r\n      case 0:\r\n        return 'OK';\r\n      case 1:\r\n        return 'WARN';\r\n      case 2:\r\n        return 'ERROR';\r\n      default:\r\n        return 'NULL';\r\n    }\r\n  }\r\n\r\n  setText(text) {\r\n    this.currentValue = text;\r\n    // this.cell.setValue(text);\r\n  }\r\n\r\n  getCurrentText() {\r\n    return this.currentValue;\r\n  }\r\n\r\n  unsetText() {\r\n    this.currentValue = this.originalValue;\r\n  }\r\n\r\n  setLink(url) {\r\n    this.currentLink = url;\r\n  }\r\n\r\n  unsetLink() {\r\n    this.currentLink = this.originalLink;\r\n  }\r\n\r\n  getCurrentLink() {\r\n    return this.currentLink;\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  isGradient() {\r\n    // TODO:\r\n  }\r\n\r\n  isShape() {\r\n    return this.mxcell.isVertex();\r\n  }\r\n\r\n  isConnector() {\r\n    return this.mxcell.isEdge();\r\n  }\r\n\r\n  applyState() {\r\n    u.log(1, 'State.applyState()');\r\n    if (this.matched) {\r\n      if (this.matchedShape) {\r\n        this.styles.forEach((style) => {\r\n          // Apply colors\r\n          this.xgraph.setStyleCell(this.mxcell, style, this.getCurrentColorStyle(style));\r\n        });\r\n        // Apply icons\r\n        if (this.overlayIcon) {\r\n          this.xgraph.addOverlay(this.getTextLevel(), this.mxcell);\r\n        } else {\r\n          this.xgraph.removeOverlay(this.mxcell);\r\n        }\r\n      }\r\n      if (this.matchedText) {\r\n        this.xgraph.setValueCell(this.mxcell, this.getCurrentText());\r\n      }\r\n      if (this.matchedLink) {\r\n        this.xgraph.addLink(this.mxcell, this.currentLink);\r\n      }\r\n    } else this.restoreCell();\r\n  }\r\n\r\n  restoreCell() {\r\n    this.unsetState();\r\n    this.styles.forEach((style) => {\r\n      this.xgraph.setStyleCell(this.mxcell, style, this.getCurrentColorStyle(style));\r\n    });\r\n    this.xgraph.setValueCell(this.mxcell, this.getCurrentText());\r\n    // this.mxcell.setAttribute('link', this.getCurrentLink());\r\n    this.xgraph.removeOverlay(this.mxcell);\r\n    this.xgraph.addLink(this.mxcell, this.originalLink);\r\n  }\r\n\r\n  prepare() {\r\n    this.unsetState();\r\n  }\r\n}\r\n"],"file":"state_class.js"}