{"version":3,"sources":["../src/flowchartHandler.js"],"names":["FlowchartHandler","$scope","elem","ctrl","data","u","log","$elem","find","flowcharts","changeSourceFlag","changeOptionFlag","changeDataFlag","changedRuleFlag","defaultXml","xgraph","undefined","$container","onMapping","active","object","id","import","events","on","render","obj","length","forEach","map","container","createContainer","newData","fc","Flowchart","name","xml","push","index","Array","isArray","$","uniqueID","html","flowchart","draw","changeRuleFlag","setOptions","setStates","applyStates","width","height","refresh","rules","rulesHandler","getRules","series","setScale","scale","setCenter","center","setGrid","grid","setTooltip","tooltip","setLock","lock","setZoom","zoom","redraw","objToMap","getFlowchart","getId","setMap","unsetMap","urlEditor","editorWindow","window","open","addEventListener","event","origin","source","postMessage","sourceChanged","$apply","close"],"mappings":"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","sourcesContent":["/* eslint-disable prefer-destructuring */\nimport Flowchart from './flowchart_class';\n\nexport default class FlowchartHandler {\n  /** @ngInject */\n  constructor($scope, elem, ctrl, data) {\n    u.log(1, 'FlowchartHandler.constructor()');\n    u.log(0, 'FlowchartHandler.constructor() data', data);\n    this.$scope = $scope || null;\n    this.$elem = elem.find('.flowchart-panel__chart');\n    this.ctrl = ctrl;\n    this.flowcharts = [];\n    this.data = data;\n    this.changeSourceFlag = true;\n    this.changeOptionFlag = true;\n    this.changeDataFlag = true;\n    this.changedRuleFlag = true;\n    this.defaultXml = '';\n      \n    // '<mxGraphModel dx=\"1073\" dy=\"521\" grid=\"1\" gridSize=\"10\" guides=\"1\" tooltips=\"1\" connect=\"1\" arrows=\"1\" fold=\"1\" page=\"0\" pageScale=\"1\" pageWidth=\"827\" pageHeight=\"1169\" math=\"0\" shadow=\"0\"><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"arrow-1\" style=\"edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;jettySize=auto;orthogonalLoop=1;strokeWidth=4;shadow=1;\" parent=\"1\" source=\"shape-grafana\" target=\"shape-love\" edge=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><object label=\"Grafana\" href=\"www.google.fr\" id=\"shape-grafana\"><mxCell style=\"rounded=1;whiteSpace=wrap;html=1;fillColor=#ffe6cc;strokeColor=#d79b00;shadow=1;\" parent=\"1\" vertex=\"1\"><mxGeometry x=\"10\" y=\"10\" width=\"120\" height=\"60\" as=\"geometry\"/></mxCell></object><mxCell id=\"arrow-2\" style=\"edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;jettySize=auto;orthogonalLoop=1;strokeWidth=4;shadow=1;\" parent=\"1\" source=\"shape-love\" target=\"shape-mxgraph\" edge=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"shape-love\" value=\"loves\" style=\"triangle;whiteSpace=wrap;html=1;fillColor=#e1d5e7;strokeColor=#9673a6;shadow=1;\" parent=\"1\" vertex=\"1\"><mxGeometry x=\"210\" width=\"60\" height=\"80\" as=\"geometry\"/></mxCell><mxCell id=\"shape-mxgraph\" value=\"mxGraph\" style=\"ellipse;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;shadow=1;\" parent=\"1\" vertex=\"1\"><mxGeometry x=\"340\" width=\"120\" height=\"80\" as=\"geometry\"/></mxCell><mxCell id=\"text-grafana\" value=\"MyText : TextVal\" style=\"text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;\" parent=\"1\" vertex=\"1\"><mxGeometry x=\"9\" y=\"50\" width=\"120\" height=\"20\" as=\"geometry\"/></mxCell><mxCell id=\"text-arrow1\" value=\"Text 2\" style=\"text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;\" parent=\"1\" vertex=\"1\"><mxGeometry x=\"150\" y=\"20\" width=\"40\" height=\"20\" as=\"geometry\"/></mxCell><mxCell id=\"text-arrow2\" value=\"Text 3\" style=\"text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;\" parent=\"1\" vertex=\"1\"><mxGeometry x=\"280\" y=\"20\" width=\"40\" height=\"20\" as=\"geometry\"/></mxCell><mxCell id=\"text-mxgraph\" value=\"Text 4\" style=\"text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;\" parent=\"1\" vertex=\"1\"><mxGeometry x=\"380\" y=\"50\" width=\"40\" height=\"20\" as=\"geometry\"/></mxCell></root></mxGraphModel>';\n\n    this.xgraph = undefined;\n    this.$container = undefined;\n    this.onMapping = {\n      active: false, // boolean if pointer mapping is active\n      object: undefined, // ojb to return id of mapping\n      id: undefined, // id of dom\n    };\n\n    this.import(this.data);\n\n    // Events Render\n    ctrl.events.on('render', () => {\n      this.render();\n    });\n  }\n\n  import(obj) {\n    u.log(1, 'FlowchartHandler.import()');\n    u.log(0, 'FlowchartHandler.import() obj', obj);\n    this.flowcharts = [];\n    if (obj !== undefined && obj !== null && obj.length > 0) {\n      obj.forEach((map) => {\n        const container = this.createContainer();\n        const newData = {};\n        const fc = new Flowchart(map.name, map.xml, container, newData);\n        fc.import(map);\n        this.flowcharts.push(fc);\n        this.data.push(newData);\n      });\n    }\n  }\n\n  getFlowchart(index) {\n    return this.flowcharts[index];\n  }\n\n  getFlowcharts() {\n    return this.flowcharts;\n  }\n\n  countFlowcharts() {\n    if (this.flowcharts !== undefined && Array.isArray(this.flowcharts)) return this.flowcharts.length;\n    return 0;\n  }\n\n  createContainer() {\n    const $container = $(\n      `<div id=\"flowchart_${\n        u.uniqueID\n      }\" style=\"margin:auto;position:relative,width:100%;height:100%\"></div>`\n    );\n    this.$elem.html($container);\n    return $container[0];\n  }\n\n  addFlowchart(name) {\n    u.log(1, 'FlowchartHandler.addFlowchart()');\n    const container = this.createContainer();\n    const data = {};\n    const flowchart = new Flowchart(name, this.defaultXml, container, data);\n    this.data.push(data);\n    this.flowcharts.push(flowchart);\n  }\n\n  render() {\n    u.log(1, 'flowchartHandler.render()');\n    if (this.changeSourceFlag) {\n      this.draw();\n      this.changeSourceFlag = false;\n      this.changeRuleFlag = true;\n    }\n    if (this.changeOptionFlag) {\n      this.setOptions();\n      this.changeOptionFlag = false;\n    }\n    if (this.changeRuleFlag || this.changeDataFlag) {\n      this.setStates();\n      this.applyStates();\n      this.changeRuleFlag = false;\n      this.changeDataFlag = false;\n    }\n    const width = this.$elem.width();\n    const height = this.ctrl.height;\n    this.refresh(width, height);\n  }\n\n  sourceChanged() {\n    this.changeSourceFlag = true;\n  }\n\n  optionChanged() {\n    this.changeOptionFlag = true;\n  }\n\n  ruleChanged() {\n    this.changeRuleFlag = true;\n  }\n\n  dataChanged() {\n    this.changeDataFlag = true;\n  }\n\n  refresh(width, height) {\n    u.log(1, `FlowchartHandler.refresh()`);\n    this.flowcharts.forEach((flowchart) => {\n      flowchart.refresh(width, height);\n    });\n  }\n\n  setStates() {\n    const rules = this.ctrl.rulesHandler.getRules();\n    const series = this.ctrl.series;\n    this.flowcharts.forEach((flowchart) => {\n      flowchart.setStates(rules, series);\n    });\n  }\n\n  applyStates() {\n    this.flowcharts.forEach((flowchart) => {\n      flowchart.applyStates();\n    });\n  }\n\n  setOptions() {\n    this.flowcharts.forEach((flowchart) => {\n      flowchart.setScale(flowchart.data.scale);\n      flowchart.setCenter(flowchart.data.center);\n      flowchart.setGrid(flowchart.data.grid);\n      flowchart.setTooltip(flowchart.data.tooltip);\n      flowchart.setLock(flowchart.data.lock);\n      flowchart.setZoom(flowchart.data.zoom);\n    });\n  }\n\n  draw() {\n    u.log(1, `FlowchartHandler.draw()`);\n    this.flowcharts.forEach((flowchart) => {\n      flowchart.redraw();\n    });\n  }\n\n  setMap(objToMap) {\n    const flowchart = this.getFlowchart(0);\n    this.onMapping.active = true;\n    this.onMapping.object = objToMap;\n    this.onMapping.id = objToMap.getId();\n    this.onMapping.$scope = this.$scope;\n    flowchart.setMap(this.onMapping);\n  }\n\n  unsetMap() {\n    const flowchart = this.getFlowchart(0);\n    this.onMapping.active = false;\n    this.onMapping.object = undefined;\n    this.onMapping.id = '';\n    flowchart.unsetMap();\n  }\n\n  isMapping(objToMap) {\n    if (objToMap === undefined || objToMap == null) return this.onMapping.active;\n    if (this.onMapping.active === true && objToMap === this.onMapping.object) return true;\n    return false;\n  }\n\n  openDrawEditor(index) {\n    const urlEditor = 'https://draw.io?embed=1';\n    const editorWindow = window.open(urlEditor, 'MxGraph Editor', 'width=1280, height=720');\n    window.addEventListener('message', (event) => {\n      if (event.origin !== 'https://www.draw.io') return;\n      // when editor is open\n      if (event.data === 'ready') {\n        // send xml\n        event.source.postMessage(this.flowcharts[index].data.xml, event.origin);\n      } else {\n        if (event.data !== undefined && event.data.length > 0) {\n          // this.flowcharts[index].setXml(event.data);\n          this.flowcharts[index].redraw(event.data);\n          this.sourceChanged();\n          this.$scope.$apply();\n          // this.render();\n        }\n        if (event.data !== undefined || event.data.length === 0) {\n          editorWindow.close();\n        }\n      }\n    });\n  }\n}\n"],"file":"flowchartHandler.js"}