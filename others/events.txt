STYLE_OPACITY OK
STYLE_OPACITY: 'opacity'
Defines the key for the opacity style.  The type of the value is numeric and the possible range is 0-100.  Value is “opacity”.

STYLE_TEXT_OPACITY
STYLE_TEXT_OPACITY: 'textOpacity'
Defines the key for the text opacity style.  The type of the value is numeric and the possible range is 0-100.  Value is “textOpacity”.

STYLE_ROTATION
STYLE_ROTATION: 'rotation'
Defines the key for the rotation style.  The type of the value is numeric and the possible range is 0-360.  Value is “rotation”.

STYLE_STROKEWIDTH Epaisseur ligne
STYLE_STROKEWIDTH: 'strokeWidth'
Defines the key for the strokeWidth style.  The type of the value is numeric and the possible range is any non-negative value larger or equal to 1.  The value defines the stroke width in pixels.  Note: To hide a stroke use strokeColor none.  Value is “strokeWidth”.

STYLE_NOLABEL
STYLE_NOLABEL: 'noLabel'
Defines the key for the noLabel style.  If this is true then no label is visible for a given cell.  Possible values are true or false (1 or 0).  Default is false.  Value is “noLabel”.

STYLE_LABEL_BACKGROUNDCOLOR Fond du text : Color
STYLE_LABEL_BACKGROUNDCOLOR: 'labelBackgroundColor'
Defines the key for the label background color.  Possible values are all HTML color names or HEX codes.  Value is “labelBackgroundColor”.

STYLE_LABEL_BORDERCOLOR
STYLE_LABEL_BORDERCOLOR: 'labelBorderColor'
Defines the key for the label border color.  Possible values are all HTML color names or HEX codes.  Value is “labelBorderColor”.

STYLE_DASHED Pointillé
STYLE_DASHED: 'dashed'
Defines the key for the dashed style.  Use 0 (default) for non-dashed or 1 for dashed.  Value is “dashed”.

STYLE_FONTSIZE
STYLE_FONTSIZE: 'fontSize'
Defines the key for the fontSize style (in px).  The type of the value is int.  Value is “fontSize”.

Expand and collapse

			var collapse = !graph.isCellCollapsed(state.cell);
			graph.foldCells(collapse, false, [state.cell], null, evt);
			mxEvent.consume(evt);
			
Visibility			
mxGraph.prototype.toggleCells = function(show, cells, includeEdges)
{
	if (cells == null)
	{
		cells = this.getSelectionCells();
	}

	// Adds all connected edges recursively
	if (includeEdges)
	{
		cells = this.addAllEdges(cells);
	}

	this.model.beginUpdate();
	try
	{
		this.cellsToggled(cells, show);
		this.fireEvent(new mxEventObject(mxEvent.TOGGLE_CELLS,
			'show', show, 'cells', cells, 'includeEdges', includeEdges));
	}
	finally
	{
		this.model.endUpdate();
	}

https://jgraph.github.io/mxgraph/docs/manual.html
	
add(parent, child, index)
remove(cell)
setCollapsed(cell, collapsed)
setGeometry(cell, geometry)
setRoot(root)
setStyle(cell, style)
setTerminal(cell, terminal, isSource)
setTerminals(edge,source,target)
setValue(cell, value)
setVisible(cell, visible)


to front
to back
change url image
